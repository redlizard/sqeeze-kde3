.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH CVSSERVICE 1 "March 19, 2005"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
cvsservice \- a DCOP service for accessing CVS repositories
.SH SYNOPSIS
.B cvsservice
.RI "[ " generic-options " ]"
.SH DESCRIPTION
The CVS service is a DCOP service for accessing and working with
remote CVS repositories.  Applications may link with this library to
access the DCOP service directly from C++.  Alternatively, scripts may
access the service using the standard
.BR dcop (1)
command-line tool.
.PP
DCOP is the Desktop Communication Protocol used throughout KDE.
.PP
The CVS DCOP service consists of the following three parts:
.TP
\fBCvsService\fP
The main interface to the functionality of the
.BR cvs (1)
command line client.  There is one method for each CVS command, e.g., add,
checkout, commit, etc.  The methods assemble the command line
arguments, create a CvsJob and return a DCOPRef object for it
to the caller.  There is one instance of this service for each
application instance.
.TP
\fBRepository\fP
This DCOPObject manages the configuration data of the current
CVS repository.  The data is automatically updated when other
service instances change it.
.TP
\fBCvsJob\fP
This class represents a CVS job.  You can execute and cancel it,
and you can retrieve the output of the cvs client by either
connecting to the proper DCOP signals or by using the output()
method.  There are two types of jobs.  First the non-concurrent
job which has to run alone, like cvs update or import.  Second
the jobs which can run concurrently like cvs log or annotate.
.PP
The CVS service is provided with Cervisia, which is part of the KDE
Software Development Kit.
.SH OPTIONS
For a full summary of options, run \fIcvsservice \-\-help\fP.
.SH SEE ALSO
.BR cervisia (1),
.BR cvs (1),
.BR cvsaskpass (1),
.BR dcop (1).
.PP
Details of how to use the CVS service from within a shell script, a C++
program or through the JavaScript bindings can be found in
\fI/usr/share/doc/libcvsservice0/DESIGN\fP.
.SH AUTHOR
The CVS service was written by Christian Loose <christian.loose@kdemail.net>.
.br
Cervisia was written by Bernd Gehrmann <bernd@physik.hu-berlin.de>,
Christian Loose <christian.loose@kdemail.net>,
Andre Woebbeking <woebbeking@web.de>,
Carlos Woelz <carloswoelz@imap-mail.com> and others.
.br
This manual page was prepared by Ben Burton <bab@debian.org>
for the Debian GNU/Linux system (but may be used by others).
