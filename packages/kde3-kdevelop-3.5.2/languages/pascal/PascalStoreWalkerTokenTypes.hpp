#ifndef INC_PascalStoreWalkerTokenTypes_hpp_
#define INC_PascalStoreWalkerTokenTypes_hpp_

/* $ANTLR 2.7.7 (20061129): "pascal.tree.g" -> "PascalStoreWalkerTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API PascalStoreWalkerTokenTypes {
#endif
	enum {
		EOF_ = 1,
		BLOCK = 4,
		IDLIST = 5,
		ELIST = 6,
		FUNC_CALL = 7,
		PROC_CALL = 8,
		SCALARTYPE = 9,
		TYPELIST = 10,
		VARIANT_TAG = 11,
		VARIANT_TAG_NO_ID = 12,
		VARIANT_CASE = 13,
		CONSTLIST = 14,
		FIELDLIST = 15,
		ARGDECLS = 16,
		VARDECL = 17,
		ARGDECL = 18,
		ARGLIST = 19,
		TYPEDECL = 20,
		FIELD = 21,
		DOT = 22,
		LIBRARY = 23,
		SEMI = 24,
		END = 25,
		EXPORTS = 26,
		COMMA = 27,
		LITERAL_index = 28,
		LITERAL_name = 29,
		USES = 30,
		UNIT = 31,
		INTERFACE = 32,
		IMPLEMENTATION = 33,
		BEGIN = 34,
		PROGRAM = 35,
		LPAREN = 36,
		RPAREN = 37,
		INITIALIZATION = 38,
		FINALIZATION = 39,
		LABEL = 40,
		CONST = 41,
		RESOURCESTRING = 42,
		EQUAL = 43,
		TYPE = 44,
		VAR = 45,
		COLON = 46,
		PROCEDURE = 47,
		FORWARD = 48,
		FUNCTION = 49,
		ARRAY = 50,
		OF = 51,
		EXTERNAL = 52,
		PUBLIC = 53,
		ALIAS = 54,
		INTERRUPT = 55,
		EXPORT = 56,
		REGISTER = 57,
		PASCAL = 58,
		CDECL = 59,
		STDCALL = 60,
		POPSTACK = 61,
		SAVEREGISTERS = 62,
		INLINE = 63,
		SAFECALL = 64,
		NEAR = 65,
		FAR = 66,
		NUM_INT = 67,
		INTEGER = 68,
		SHORTINT = 69,
		SMALLINT = 70,
		LONGINT = 71,
		INT64 = 72,
		BYTE = 73,
		WORD = 74,
		CARDINAL = 75,
		QWORD = 76,
		BOOLEAN = 77,
		BYTEBOOL = 78,
		LONGBOOL = 79,
		CHAR = 80,
		DOTDOT = 81,
		ASSIGN = 82,
		REAL = 83,
		SINGLE = 84,
		DOUBLE = 85,
		EXTENDED = 86,
		COMP = 87,
		STRING = 88,
		LBRACK = 89,
		RBRACK = 90,
		PACKED = 91,
		RECORD = 92,
		CASE = 93,
		SET = 94,
		FILE = 95,
		POINTER = 96,
		OBJECT = 97,
		VIRTUAL = 98,
		ABSTRACT = 99,
		PRIVATE = 100,
		PROTECTED = 101,
		CONSTRUCTOR = 102,
		DESTRUCTOR = 103,
		CLASS = 104,
		OVERRIDE = 105,
		MESSAGE = 106,
		PUBLISHED = 107,
		PROPERTY = 108,
		LITERAL_read = 109,
		LITERAL_write = 110,
		DEFAULT = 111,
		LITERAL_nodefault = 112,
		LE = 113,
		GE = 114,
		LTH = 115,
		GT = 116,
		NOT_EQUAL = 117,
		IN = 118,
		IS = 119,
		PLUS = 120,
		MINUS = 121,
		OR = 122,
		XOR = 123,
		STAR = 124,
		SLASH = 125,
		DIV = 126,
		MOD = 127,
		AND = 128,
		SHL = 129,
		SHR = 130,
		NOT = 131,
		TRUE = 132,
		FALSE = 133,
		AT = 134,
		PLUSEQ = 135,
		MINUSEQ = 136,
		STAREQ = 137,
		SLASHQE = 138,
		GOTO = 139,
		IF = 140,
		THEN = 141,
		ELSE = 142,
		WHILE = 143,
		DO = 144,
		REPEAT = 145,
		UNTIL = 146,
		FOR = 147,
		TO = 148,
		DOWNTO = 149,
		WITH = 150,
		LBRACK2 = 151,
		RBRACK2 = 152,
		OPERATOR = 153,
		RAISE = 154,
		TRY = 155,
		EXCEPT = 156,
		FINALLY = 157,
		ON = 158,
		STRING_LITERAL = 159,
		CHR = 160,
		NIL = 161,
		NUM_REAL = 162,
		IDENT = 163,
		ABSOLUTE = 164,
		AS = 165,
		ASM = 166,
		ASSEMBLER = 167,
		BREAK = 168,
		CONTINUE = 169,
		DISPOSE = 170,
		EXIT = 171,
		INHERITED = 172,
		NEW = 173,
		SELF = 174,
		METHOD = 175,
		ADDSUBOR = 176,
		ASSIGNEQUAL = 177,
		SIGN = 178,
		FUNC = 179,
		NODE_NOT_EMIT = 180,
		MYASTVAR = 181,
		LF = 182,
		LCURLY = 183,
		RCURLY = 184,
		WS = 185,
		COMMENT_1 = 186,
		COMMENT_2 = 187,
		COMMENT_3 = 188,
		EXPONENT = 189,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_PascalStoreWalkerTokenTypes_hpp_*/
