CODING_STANDARDS:int abs(int number)
CODING_STANDARDS:object imap_header(int stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])
README:bool my_drawtext(resource image, string text, resource font, int x, int y[, int color])
zend_builtin_functions:int strlen(string str)
zend_builtin_functions:int strcmp(string str1, string str2)
zend_builtin_functions:int strncmp(string str1, string str2, int len)
zend_builtin_functions:int strcasecmp(string str1, string str2)
zend_builtin_functions:int strncasecmp(string str1, string str2, int len)
zend_builtin_functions:string get_class(object object)
zend_builtin_functions:string get_parent_class(object object)
zend_builtin_functions:bool is_subclass_of(object object, string class_name)
zend_builtin_functions:array get_class_vars(string class_name)
zend_builtin_functions:array get_object_vars(object obj)
zend_builtin_functions:array get_class_methods(string class_name)
zend_builtin_functions:bool method_exists(object object, string method)
zend_builtin_functions:bool class_exists(string classname)
zend_builtin_functions:bool function_exists(string function_name)
zend_builtin_functions:array get_included_files(void)
zend_builtin_functions:void trigger_error(string messsage [, int error_type])
zend_builtin_functions:string set_error_handler(string error_handler)
zend_builtin_functions:void restore_error_handler(void)
zend_builtin_functions:array get_declared_classes(void)
zend_builtin_functions:string create_function(string args, string code)
aspell:int aspell_new(string master [, string personal])
aspell:array aspell_suggest(aspell int, string word)
aspell:int aspell_check(aspell int, string word)
aspell:int aspell_check_raw(aspell int, string word)
bcmath:string bcadd(string left_operand, string right_operand [, int scale])
bcmath:string bcsub(string left_operand, string right_operand [, int scale])
bcmath:string bcmul(string left_operand, string right_operand [, int scale])
bcmath:string bcdiv(string left_operand, string right_operand [, int scale])
bcmath:string bcmod(string left_operand, string right_operand)
bcmath:string bcpow(string x, string y [, int scale])
bcmath:string bcsqrt(string operand [, int scale])
bcmath:string bccomp(string left_operand, string right_operand [, int scale])
bcmath:string bcscale(int scale)
cal_unix:int unixtojd([int timestamp])
cal_unix:int jdtounix(int jday)
calendar:string jdtogregorian(int juliandaycount)
calendar:int gregoriantojd(int month, int day, int year)
calendar:string jdtojulian(int juliandaycount)
calendar:int juliantojd(int month, int day, int year)
calendar:string jdtojewish(int juliandaycount)
calendar:int jewishtojd(int month, int day, int year)
calendar:string jdtofrench(int juliandaycount)
calendar:int frenchtojd(int month, int day, int year)
calendar:mixed jddayofweek(int juliandaycount [, int mode])
calendar:string jdmonthname(int juliandaycount, int mode)
easter:int easter_date([int year])
easter:int easter_days([int year])
ccvs:string ccvs_init(string name)
ccvs:string ccvs_done(string sess)
ccvs:string ccvs_new(string session, string invoice)
ccvs:string ccvs_add(string session, string invoice, string argtype, string argval)
ccvs:string ccvs_delete(string session, string invoice)
ccvs:string ccvs_auth(string session, string invoice)
ccvs:string ccvs_return(string session, string invoice)
ccvs:string ccvs_reverse(string session, string invoice)
ccvs:string ccvs_sale(string session, string invoice)
ccvs:string ccvs_void(string session, string invoice)
ccvs:string ccvs_status(string session, string invoice)
ccvs:int ccvs_count(string session, string type)
ccvs:string ccvs_lookup(string session, string invoice, int inum)
ccvs:string ccvs_report(string session, string type)
ccvs:string ccvs_command(string session, string type, string argval)
ccvs:string ccvs_textvalue(string session)
COM:int com_load(string module_name)
COM:mixed com_invoke(int module, string handler_name [, mixed arg [, ...]])
COM:mixed com_propget(int module, string property_name)
COM:bool com_propput(int module, string property_name, mixed value)
cpdf:void cpdf_global_set_document_limits(int maxPages, int maxFonts, int maxImages, int maxAnnots, int maxObjects)
cpdf:bool cpdf_set_creator(int pdfdoc, string creator)
cpdf:bool cpdf_set_title(int pdfptr, string title)
cpdf:bool cpdf_set_subject(int pdfptr, string subject)
cpdf:bool cpdf_set_keywords(int pdfptr, string keywords)
cpdf:void cpdf_set_viewer_preferences(int pdfdoc, int pagemode)
cpdf:int cpdf_open(int compression [, string filename [, array doc_limits]])
cpdf:void cpdf_close(int pdfdoc)
cpdf:void cpdf_page_init(int pdfdoc, int pagenr, int orientation, int height, int width [, double unit])
cpdf:void cpdf_finalize_page(int pdfdoc, int pagenr)
cpdf:void cpdf_set_current_page(int pdfdoc, int pagenr)
cpdf:void cpdf_begin_text(int pdfdoc)
cpdf:void cpdf_end_text(int pdfdoc)
cpdf:void cpdf_show(int pdfdoc, string text)
cpdf:void cpdf_show_xy(int pdfdoc, string text, double x-koor, double y-koor [, int mode])
cpdf:void cpdf_continue_text(int pdfdoc, string text)
cpdf:void cpdf_text(int pdfdoc, string text [, double x-koor, double y-koor [, int mode [, double orientation [, int alignmode]]]])
cpdf:void cpdf_set_font(int pdfdoc, string font, double size, string encoding)
cpdf:void cpdf_set_leading(int pdfdoc, double distance)
cpdf:void cpdf_set_text_rendering(int pdfdoc, int rendermode)
cpdf:void cpdf_set_horiz_scaling(int pdfdoc, double scale)
cpdf:void cpdf_set_text_rise(int pdfdoc, double value)
cpdf:void cpdf_set_text_matrix(int pdfdoc, arry matrix)
cpdf:void cpdf_set_text_pos(int pdfdoc, double x, double y [, int mode])
cpdf:void cpdf_rotate_text(int pdfdoc, double angle)
cpdf:void cpdf_set_char_spacing(int pdfdoc, double space)
cpdf:void cpdf_set_word_spacing(int pdfdoc, double space)
cpdf:double cpdf_stringwidth(int pdfdoc, string text)
cpdf:void cpdf_save(int pdfdoc)
cpdf:void cpdf_restore(int pdfdoc)
cpdf:void cpdf_translate(int pdfdoc, double x, double y)
cpdf:void cpdf_scale(int pdfdoc, double x-scale, double y-scale)
cpdf:void cpdf_rotate(int pdfdoc, double angle)
cpdf:void cpdf_setflat(int pdfdoc, double value)
cpdf:void cpdf_setlinejoin(int pdfdoc, int value)
cpdf:void cpdf_setlinecap(int pdfdoc, int value)
cpdf:void cpdf_setmiterlimit(int pdfdoc, double value)
cpdf:void cpdf_setlinewidth(int pdfdoc, double width)
cpdf:void cpdf_setdash(int pdfdoc, long white, long black)
cpdf:void cpdf_moveto(int pdfdoc, double x, double y [, int mode])
cpdf:void cpdf_rmoveto(int pdfdoc, double x, double y [, int mode])
cpdf:void cpdf_curveto(int pdfdoc, double x1, double y1, double x2, double y2, double x3, double y3 [, int mode])
cpdf:void cpdf_lineto(int pdfdoc, double x, double y [, int mode])
cpdf:void cpdf_rlineto(int pdfdoc, double x, double y [, int mode])
cpdf:void cpdf_circle(int pdfdoc, double x, double y, double radius [, int mode])
cpdf:void cpdf_arc(int pdfdoc, double x, double y, double radius, double start, double end [, int mode])
cpdf:void cpdf_rect(int pdfdoc, double x, double y, double width, double height [, int mode])
cpdf:void cpdf_newpath(int pdfdoc)
cpdf:void cpdf_closepath(int pdfdoc)
cpdf:void cpdf_closepath_stroke(int pdfdoc)
cpdf:void cpdf_stroke(int pdfdoc)
cpdf:void cpdf_fill(int pdfdoc)
cpdf:void cpdf_fill_stroke(int pdfdoc)
cpdf:void cpdf_closepath_fill_stroke(int pdfdoc)
cpdf:void cpdf_clip(int pdfdoc)
cpdf:void cpdf_setgray_fill(int pdfdoc, double value)
cpdf:void cpdf_setgray_stroke(int pdfdoc, double value)
cpdf:void cpdf_setgray(int pdfdoc, double value)
cpdf:void cpdf_setrgbcolor_fill(int pdfdoc, double red, double green, double blue)
cpdf:void cpdf_setrgbcolor_stroke(int pdfdoc, double red, double green, double blue)
cpdf:void cpdf_setrgbcolor(int pdfdoc, double red, double green, double blue)
cpdf:void cpdf_set_page_animation(int pdfdoc, int transition, double duration, double direction, int orientation, int inout)
cpdf:array cpdf_finalize(int pdfdoc)
cpdf:array cpdf_output_buffer(int pdfdoc)
cpdf:array cpdf_save_to_file(int pdfdoc, string filename)
cpdf:void cpdf_import_jpeg(int pdfdoc, string filename, double x, double y, double angle, double width, double height, double x-scale, double y-scale, int gsave [, int mode])
cpdf:void cpdf_place_inline_image(int pdfdoc, int gdimage, double x, double y, double angle, fload width, float height, int gsave [, int mode])
cpdf:void cpdf_add_annotation(int pdfdoc, double xll, double yll, double xur, double xur, string title, string text [, int mode])
cpdf:void cpdf_set_action_url(int pdfdoc, double xll, double yll, double xur, double xur, string url [, int mode])
cpdf:int cpdf_add_outline(int pdfdoc, int lastoutline, int sublevel, int open, int pagenr, string title)
curl:string curl_version(void)
curl:int curl_init([string url])
curl:bool curl_setopt(int ch, string option, mixed value)
curl:bool curl_exec(int ch)
curl:string curl_error(int ch)
curl:int curl_errno(int ch)
curl:void curl_close(int ch)
dav:void dav_set_mkcol_handlers(string test, string create)
db:string dblist(void)
db:int dbmopen(string filename, string mode)
db:bool dbmclose(int dbm_identifier)
db:int dbminsert(int dbm_identifier, string key, string value)
db:int dbmreplace(int dbm_identifier, string key, string value)
db:string dbmfetch(int dbm_identifier, string key)
db:int dbmexists(int dbm_identifier, string key)
db:int dbmdelete(int dbm_identifier, string key)
db:string dbmfirstkey(int dbm_identifier)
db:string dbmnextkey(int dbm_identifier, string key)
dba:int dba_popen(string path, string mode, string handlername [, string ...])
dba:int dba_open(string path, string mode, string handlername [, string ...])
dba:void dba_close(int handle)
dba:bool dba_exists(string key, int handle)
dba:string dba_fetch(string key, int handle)
dba:string dba_firstkey(int handle)
dba:string dba_nextkey(int handle)
dba:bool dba_delete(string key, int handle)
dba:bool dba_insert(string key, string value, int handle)
dba:bool dba_replace(string key, string value, int handle)
dba:bool dba_optimize(int handle)
dba:bool dba_sync(int handle)
dbase:int dbase_open(string name, int mode)
dbase:bool dbase_close(int identifier)
dbase:int dbase_numrecords(int identifier)
dbase:int dbase_numfields(int identifier)
dbase:bool dbase_pack(int identifier)
dbase:bool dbase_add_record(int identifier, array data)
dbase:bool dbase_replace_record(int identifier, array data, int recnum)
dbase:bool dbase_delete_record(int identifier, int record)
dbase:array dbase_get_record(int identifier, int record)
dbase:array dbase_get_record_with_names(int identifier, int record)
dbase:bool dbase_create(string filename, array fields)
domxml:string domxml_test(int id)
domxml:string domxml_attrname([int dir_handle])
domxml:class domxml_node(string name)
domxml:string domxml_lastchild([int node])
domxml:string domxml_parent([int node])
domxml:string domxml_children([int node])
domxml:string domxml_getattr([int node,] string attrname)
domxml:bool domxml_setattr([int node,] string attrname, string value)
domxml:array domxml_attributes([int node])
domxml:string domxml_rootnew([int doc])
domxml:string domxml_root([int doc_handle])
domxml:string domxml_dtd([int doc_handle])
domxml:string domxml_dumpmem([int doc_handle])
domxml:class xmldoc(string xmldoc)
domxml:class xmldocfile(string filename)
domxml:string domxml_new_child([int node_handle,] string name, string content)
domxml:string domxml_add_root([int doc_handle,] string name)
domxml:class domxml_new_xmldoc(string version)
domxml:string node_namespace([int node])
domxml:string node_attributes([int node])
domxml:string node_children([int node])
domxml:class xmltree(string xmldoc)
dotnet:int dotnet_load(string module_name)
exif:string read_exif_data(string filename)
fdf:int fdf_open(string filename)
fdf:void fdf_close(int fdfdoc)
fdf:void fdf_create(void)
fdf:void fdf_get_value(int fdfdoc, string fieldname)
fdf:void fdf_set_value(int fdfdoc, string fieldname, string value, int isName)
fdf:void fdf_next_field_name(int fdfdoc [, string fieldname])
fdf:void fdf_set_ap(int fdfdoc, string fieldname, int face, string filename, int pagenr)
fdf:void fdf_set_status(int fdfdoc, string status)
fdf:void fdf_get_status(int fdfdoc)
fdf:void fdf_set_file(int fdfdoc, string filename)
fdf:void fdf_get_file(int fdfdoc)
fdf:void fdf_save(int fdfdoc, string filename)
fdf:void fdf_add_template(int fdfdoc, int newpage, string filename, string template, int rename)
fdf:void fdf_set_flags(int fdfdoc, string fieldname, int whichFlags, int newFlags)
fdf:void fdf_set_opt(int fdfdoc, string fieldname, int element, string value, string name)
fdf:void fdf_set_submit_form_action(int fdfdoc, string fieldname, int whichTrigger, string url, int flags)
fdf:void fdf_set_javascript_action(int fdfdoc, string fieldname, int whichTrigger, string script)
filepro:bool filepro(string directory)
filepro:int filepro_rowcount(void)
filepro:string filepro_fieldname(int fieldnumber)
filepro:string filepro_fieldtype(int field_number)
filepro:int filepro_fieldwidth(int field_number)
filepro:int filepro_fieldcount(void)
filepro:string filepro_retrieve(int row_number, int field_number)
ftp:int ftp_connect(string host [, int port])
ftp:int ftp_login(int stream, string username, string password)
ftp:string ftp_pwd(int stream)
ftp:int ftp_cdup(int stream)
ftp:int ftp_chdir(int stream, string directory)
ftp:int ftp_exec(int stream, string command)
ftp:string ftp_mkdir(int stream, string directory)
ftp:int ftp_rmdir(int stream, string directory)
ftp:array ftp_nlist(int stream, string directory)
ftp:array ftp_rawlist(int stream, string directory)
ftp:string ftp_systype(int stream)
ftp:int ftp_fget(int stream, int fp, string remote_file, int mode)
ftp:int ftp_pasv(int stream, int pasv)
ftp:int ftp_get(int stream, string local_file, string remote_file, int mode)
ftp:int ftp_fput(int stream, string local_file, string remote_file, int mode)
ftp:int ftp_put(int stream, string remote_file, string local_file, int mode)
ftp:int ftp_size(int stream, string path)
ftp:int ftp_mdtm(int stream, string path)
ftp:int ftp_rename(int stream, string src, string dest)
ftp:int ftp_delete(int stream, string path)
ftp:int ftp_site(int stream, string cmd)
ftp:int ftp_quit(int stream)
gd:int imageloadfont(string filename)
gd:int imagecreate(int x_size, int y_size)
gd:int imagetypes(void)
gd:int imagecreatefromgif(string filename)
gd:int imagecreatefromjpeg(string filename)
gd:int imagecreatefrompng(string filename)
gd:int imagecreatefromxbm(string filename)
gd:int imagecreatefromwbmp(string filename)
gd:int imagegif(int im [, string filename])
gd:int imagepng(int im [, string filename])
gd:int imagejpeg(int im [, string filename [, int quality]])
gd:int imagewbmp(int im [, string filename])
gd:int imagedestroy(int im)
gd:int imagecolorallocate(int im, int red, int green, int blue)
gd:int imagepalettecopy(int dst, int src)
gd:int imagecolorat(int im, int x, int y)
gd:int imagecolorclosest(int im, int red, int green, int blue)
gd:int imagecolorclosesthwb(int im, int red, int green, int blue)
gd:int imagecolordeallocate(int im, int index)
gd:int imagecolorresolve(int im, int red, int green, int blue)
gd:int imagecolorexact(int im, int red, int green, int blue)
gd:int imagecolorset(int im, int col, int red, int green, int blue)
gd:array imagecolorsforindex(int im, int col)
gd:int imagegammacorrect(int im, double inputgamma, double outputgamma)
gd:int imagesetpixel(int im, int x, int y, int col)
gd:int imageline(int im, int x1, int y1, int x2, int y2, int col)
gd:int imagedashedline(int im, int x1, int y1, int x2, int y2, int col)
gd:int imagerectangle(int im, int x1, int y1, int x2, int y2, int col)
gd:int imagefilledrectangle(int im, int x1, int y1, int x2, int y2, int col)
gd:int imagearc(int im, int cx, int cy, int w, int h, int s, int e, int col)
gd:int imagefilltoborder(int im, int x, int y, int border, int col)
gd:int imagefill(int im, int x, int y, int col)
gd:int imagecolorstotal(int im)
gd:int imagecolortransparent(int im [, int col])
gd:int imageinterlace(int im [, int interlace])
gd:int imagepolygon(int im, array point, int num_points, int col)
gd:int imagefilledpolygon(int im, array point, int num_points, int col)
gd:int imagefontwidth(int font)
gd:int imagefontheight(int font)
gd:int imagechar(int im, int font, int x, int y, string c, int col)
gd:int imagecharup(int im, int font, int x, int y, string c, int col)
gd:int imagestring(int im, int font, int x, int y, string str, int col)
gd:int imagestringup(int im, int font, int x, int y, string str, int col)
gd:int imagecopy(int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)
gd:int imagecopymerge(int src_im, int dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)
gd:int imagecopyresized(int dst_im, int src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)
gd:int imagesx(int im)
gd:int imagesy(int im)
gd:array imagettfbbox(int size, int angle, string font_file, string text)
gd:array imagettftext(int im, int size, int angle, int x, int y, int col, string font_file, string text)
gd:int imagepsloadfont(string pathname)
gd:bool imagepsfreefont(int font_index)
gd:bool imagepsencodefont(int font_index, string filename)
gd:bool imagepsextendfont(int font_index, double extend)
gd:bool imagepsslantfont(int font_index, double slant)
gd:array imagepstext(int image, string text, int font, int size, int xcoord, int ycoord [, int space, int tightness, double angle, int antialias])
gd:array imagepsbbox(string text, int font, int size [, int space, int tightness, int angle])
gdt1:int imagepsloadfont(string pathname)
gdt1:bool imagepsfreefont(int font_index)
gdt1:bool imagepsencodefont(int font_index, string filename)
gdt1:bool imagepsextendfont(int font_index, double extend)
gdt1:bool imagepsslantfont(int font_index, double slant)
gdt1:array imagepstext(int image, string text, int font, int size, int xcoord, int ycoord [, int space, int tightness, double angle, int antialias])
gdt1:array imagepsbbox(string text, int font, int size [, int space, int tightness, int angle])
gettext:string textdomain(string domain)
gettext:string gettext(string msgid)
gettext:string dgettext(string domain_name, string msgid)
gettext:string dcgettext(string domain_name, string msgid, long category)
gettext:string bindtextdomain(string domain_name, string dir)
hw:int hw_connect(string host, int port [string username [, string password]])
hw:int hw_pconnect(string host, int port [, string username [, string password]])
hw:void hw_close(int link)
hw:void hw_info(int link)
hw:int hw_error(int link)
hw:string hw_errormsg(int link)
hw:int hw_root(void)
hw:string hw_stat(int link)
hw:array hw_who(int link)
hw:string hw_dummy(int link, int id, int msgid)
hw:string hw_getobject(int link, int objid [, string linkroot])
hw:int hw_insertobject(int link, string objrec, string parms)
hw:string hw_getandlock(int link, int objid)
hw:void hw_unlock(int link, int objid)
hw:void hw_deleteobject(int link, int objid)
hw:void hw_changeobject(int link, int objid, array attributes)
hw:void hw_modifyobject(int link, int objid, array remattributes, array addattributes [, int mode])
hw:void hw_mv(int link, array objrec, int from, int dest)
hw:void hw_cp(int link, array objrec, int dest)
hw:hwdoc hw_gettext(int link, int objid [, int rootid])
hw:void hw_edittext(int link, hwdoc doc)
hw:hwdoc hw_getcgi(int link, int objid)
hw:int hw_getremote(int link, int objid)
hw:[array|int] hw_getremotechildren(int link, string objrec)
hw:void hw_setlinkroot(int link, int rootid)
hw:hwdoc hw_pipedocument(int link, int objid)
hw:hwdoc hw_pipecgi(int link, int objid)
hw:void hw_insertdocument(int link, int parentid, hwdoc doc)
hw:hwdoc hw_new_document(string objrec, string data, int size)
hw:void hw_free_document(hwdoc doc)
hw:void hw_outputdocument(hwdoc doc)
hw:void hw_output_document(hwdoc doc)
hw:string hw_documentbodytag(hwdoc doc [, string prefix])
hw:string hw_document_bodytag(hwdoc doc [, string prefix])
hw:string hw_document_content(hwdoc doc)
hw:int hw_document_setcontent(hwdoc doc, string content)
hw:int hw_documentsize(hwdoc doc)
hw:int hw_document_size(hwdoc doc)
hw:string hw_documentattributes(hwdoc doc)
hw:string hw_document_attributes(hwdoc doc)
hw:array hw_getparentsobj(int link, int objid)
hw:array hw_getparents(int link, int objid)
hw:array hw_children(int link, int objid)
hw:array hw_childrenobj(int link, int objid)
hw:array hw_getchildcoll(int link, int objid)
hw:array hw_getchildcollobj(int link, int objid)
hw:int hw_docbyanchor(int link, int anchorid)
hw:array hw_docbyanchorobj(int link, int anchorid)
hw:array hw_getobjectbyquery(int link, string query, int maxhits)
hw:array hw_getobjectbyqueryobj(int link, string query, int maxhits)
hw:array hw_getobjectbyquerycoll(int link, int collid, string query, int maxhits)
hw:array hw_getobjectbyquerycollobj(int link, int collid, string query, int maxhits)
hw:array hw_getchilddoccoll(int link, int objid)
hw:array hw_getchilddoccollobj(int link, int objid)
hw:array hw_getanchors(int link, int objid)
hw:array hw_getanchorsobj(int link, int objid)
hw:string hw_getusername(int link)
hw:void hw_identify(int link, string username, string password)
hw:array hw_objrec2array(string objrec, [array format])
hw:string hw_array2objrec(array objarr)
hw:array hw_incollections(int link, array objids, array collids, int para)
hw:void hw_inscoll(int link, int parentid, array objarr)
hw:void hw_insdoc(int link, int parentid, string objrec [, string text])
hw:int hw_getsrcbydestobj(int link, int destid)
hw:int hw_mapid(int link, int serverid, int destid)
hw:string hw_getrellink(int link, int rootid, int sourceid, int destid)
hw:void hw_connection_info(int link)
icap:int icap_close(int stream_id [, int options])
icap:int icap_open(string calendar, string user, string password [, int options])
icap:int icap_reopen(int stream_id, string calendar [, int options])
icap:int icap_expunge(int stream_id)
icap:int icap_fetch_event(int stream_id, int eventid [, int options])
icap:array icap_list_events(int stream_id, int begindate [, int enddate])
icap:string icap_create_calendar(int stream_id, string calendar)
icap:string icap_rename_calendar(int stream_id, string src_calendar, string dest_calendar)
icap:int icap_list_alarms(int stream_id, array date, array time)
icap:string icap_delete_calendar(int stream_id, string calendar)
icap:string icap_delete_event(int stream_id, int uid)
icap:string icap_delete_calendar(int stream_id, int uid)
icap:string icap_store_event(int stream_id, object event)
icap:string icap_snooze(int stream_id, int uid)
imap:int imap_open(string mailbox, string user, string password [, int options])
imap:int imap_popen(string mailbox, string user, string password [, int options])
imap:int imap_reopen(int stream_id, string mailbox [, int options])
imap:int imap_append(int stream_id, string folder, string message [, string flags])
imap:int imap_num_msg(int stream_id)
imap:int imap_ping(int stream_id)
imap:int imap_num_recent(int stream_id)
imap:int imap_expunge(int stream_id)
imap:int imap_close(int stream_id [, int options])
imap:array imap_headers(int stream_id)
imap:string imap_body(int stream_id, int msg_no [, int options])
imap:string imap_fetchtext_full(int stream_id, int msg_no [, int options])
imap:int imap_mail_copy(int stream_id, int msg_no, string mailbox [, int options])
imap:int imap_mail_move(int stream_id, int msg_no, string mailbox [, int options])
imap:int imap_createmailbox(int stream_id, string mailbox)
imap:int imap_renamemailbox(int stream_id, string old_name, string new_name)
imap:int imap_deletemailbox(int stream_id, string mailbox)
imap:array imap_list(int stream_id, string ref, string pattern)
imap:array imap_getmailboxes(int stream_id, string ref, string pattern)
imap:array imap_scan(int stream_id, string ref, string pattern, string content)
imap:object imap_check(int stream_id)
imap:int imap_delete(int stream_id, int msg_no [, int flags])
imap:int imap_undelete(int stream_id, int msg_no)
imap:object imap_headerinfo(int stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])
imap:object imap_rfc822_parse_headers(string headers [, string default_host])
imap:array imap_lsub(int stream_id, string ref, string pattern)
imap:array imap_getsubscribed(int stream_id, string ref, string pattern)
imap:int imap_subscribe(int stream_id, string mailbox)
imap:int imap_unsubscribe(int stream_id, string mailbox)
imap:object imap_fetchstructure(int stream_id, int msg_no [, int options])
imap:string imap_fetchbody(int stream_id, int msg_no, int section [, int options])
imap:string imap_base64(string text)
imap:string imap_qprint(string text)
imap:string imap_8bit(string text)
imap:string imap_binary(string text)
imap:object imap_mailboxmsginfo(int stream_id)
imap:string imap_rfc822_write_address(string mailbox, string host, string personal)
imap:array imap_rfc822_parse_adrlist(string address_string, string default_host)
imap:string imap_utf8(string string)
imap:string imap_utf7_decode(string buf)
imap:string imap_utf7_encode(string buf)
imap:int imap_setflag_full(int stream_id, string sequence, string flag [, int options])
imap:int imap_clearflag_full(int stream_id, string sequence, string flag [, int options])
imap:array imap_sort(int stream_id, int criteria, int reverse [, int options])
imap:string imap_fetchheader(int stream_id, int msg_no [, int options])
imap:int imap_uid(int stream_id, int msg_no)
imap:int imap_msgno(int stream_id, int unique_msg_id)
imap:object imap_status(int stream_id, string mailbox, int options)
imap:object imap_bodystruct(int stream_id, int msg_no, int section)
imap:array imap_fetch_overview(int stream_id, int msg_no)
imap:string imap_mail_compose(array envelope, array body)
imap:int imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])
imap:array imap_search(int stream_id, string criteria [, long flags])
imap:array imap_alerts(void)
imap:array imap_errors(void)
imap:string imap_last_error(void)
imap:array imap_mime_header_decode(string str)
ifx:int ifx_connect([string database [, string userid [, string password]]])
ifx:int ifx_pconnect([string database [, string userid [, string password]]])
ifx:int ifx_close(int connid)
ifx:int ifx_query(string query, int connid [, int cursortype] [, array idarray])
ifx:int ifx_prepare(string query, int connid [, int cursortype] [, array idarray])
ifx:int ifx_do(int resultid)
ifx:string ifx_error([int connection_id])
ifx:string ifx_errormsg([int errorcode])
ifx:int ifx_affected_rows(int resultid)
ifx:array ifx_fetch_row(int resultid [, mixed position])
ifx:int ifx_htmltbl_result(int resultid [, string htmltableoptions])
ifx:array ifx_fieldtypes(int resultid)
ifx:array ifx_fieldproperties(int resultid)
ifx:int ifx_num_rows(int resultid)
ifx:int ifx_getsqlca(int resultid)
ifx:int ifx_num_fields(int resultid)
ifx:int ifx_free_result(int resultid)
ifx:int ifx_create_blob(int type, int mode, string param)
ifx:int ifx_copy_blob(int bid)
ifx:int ifx_free_blob(int bid)
ifx:string ifx_get_blob(int bid)
ifx:int ifx_update_blob(int bid, string content)
ifx:void ifx_blobinfile_mode(int mode)
ifx:void ifx_textasvarchar(int mode)
ifx:void ifx_byteasvarchar(int mode)
ifx:void ifx_nullformat(int mode)
ifx:int ifx_create_char(string param)
ifx:string ifx_get_char(int bid)
ifx:int ifx_free_char(int bid)
ifx:int ifx_update_char(int bid, string content)
ifx:int ifxus_create_slob(int mode)
ifx:int ifxus_free_slob(int bid)
ifx:int ifxus_close_slob(int bid)
ifx:int ifxus_open_slob(long bid, int mode)
ifx:int ifxus_tell_slob(long bid)
ifx:int ifxus_seek_slob(long bid, int mode, long offset)
ifx:int ifxus_read_slob(long bid, long nbytes)
ifx:int ifxus_write_slob(long bid, string content)
ii:resource ingres_connect([string database [, string username [, string password]]])
ii:resource ingres_pconnect([string database [, string username [, string password]]])
ii:bool ingres_close([resource link])
ii:bool ingres_query(string query [, resource link])
ii:int ingres_num_rows([resource link])
ii:int ingres_num_fields([resource link])
ii:string ingres_field_name(int index [, resource link])
ii:string ingres_field_type(int index [, resource link])
ii:string ingres_field_nullable(int index [, resource link])
ii:string ingres_field_length(int index [, resource link])
ii:string ingres_field_precision(int index [, resource link])
ii:string ingres_field_scale(int index [, resource link])
ii:array ingres_fetch_array([int result_type [, resource link]])
ii:array ingres_fetch_row([resource link])
ii:array ingres_fetch_object([int result_type [, resource link]])
ii:bool ingres_rollback([resource link])
ii:bool ingres_commit([resource link])
ii:bool ingres_autocommit([resource link])
interbase:string ibase_errmsg(void)
interbase:int ibase_connect(string database [, string username] [, string password] [, string charset] [, int buffers] [, int dialect] [, string role])
interbase:int ibase_pconnect(string database [, string username] [, string password] [, string charset] [, int buffers] [, int dialect] [, string role])
interbase:int ibase_close([int link_identifier])
interbase:int ibase_trans([int trans_args [, int link_identifier]])
interbase:int ibase_commit([int link_identifier,] int trans_number)
interbase:int ibase_rollback([int link_identifier,] int trans_number)
interbase:int ibase_query([int link_identifier,] string query [, int bind_args])
interbase:array ibase_fetch_row(int result [, int blob_flag])
interbase:object ibase_fetch_object(int result [, int blob_flag])
interbase:int ibase_free_result(int result)
interbase:int ibase_prepare([int link_identifier,] string query)
interbase:int ibase_execute(int query [, int bind_args [, int ...])
interbase:int ibase_free_query(int query)
interbase:int ibase_timefmt(string format)
interbase:int ibase_num_fields(int result)
interbase:array ibase_field_info(int result, int field_number)
interbase:int ibase_blob_create([int link_identifier])
interbase:int ibase_blob_open(string blob_id)
interbase:int ibase_blob_add(int blob_id, string data)
interbase:string ibase_blob_get(int blob_id, int len)
interbase:int ibase_blob_close(int blob_id)
interbase:int ibase_blob_cancel(int blob_id)
interbase:object ibase_blob_info(string blob_id_str)
interbase:int ibase_blob_echo(string blob_id_str)
interbase:string ibase_blob_import([link_identifier,] int file_id)
ldap:int ldap_connect([string host [, int port]])
ldap:int ldap_bind(int link [, string dn, string password])
ldap:int ldap_unbind(int link)
ldap:int ldap_read(int link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]] )
ldap:int ldap_list(int link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]] )
ldap:int ldap_search(int link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]] )
ldap:int ldap_free_result(int result)
ldap:int ldap_count_entries(int link, int result)
ldap:int ldap_first_entry(int link, int result)
ldap:int ldap_next_entry(int link, int entry)
ldap:array ldap_get_entries(int link, int result)
ldap:string ldap_first_attribute(int link, int result, int ber)
ldap:string ldap_next_attribute(int link, int result, int ber)
ldap:array ldap_get_attributes(int link, int result)
ldap:array ldap_get_values(int link, int result, string attribute)
ldap:array ldap_get_values_len(int link, int result, string attribute)
ldap:string ldap_get_dn(int link, int result)
ldap:array ldap_explode_dn(string dn, int with_attrib)
ldap:string ldap_dn2ufn(string dn)
ldap:int ldap_add(int link, string dn, array entry)
ldap:int ldap_modify(int link, string dn, array entry)
ldap:int ldap_mod_replace(int link, string dn, array entry)
ldap:int ldap_mod_add(int link, string dn, array entry)
ldap:int ldap_mod_del(int link, string dn, array entry)
ldap:int ldap_delete(int link, string dn)
ldap:int ldap_errno(int link)
ldap:string ldap_err2str(int errno)
ldap:string ldap_error(int link)
ldap:int ldap_compare(int link, string dn, string attr, string value)
ldap:string ldap_t61_to_8859(string value)
ldap:string ldap_8859_to_t61(string value)
mcal:int mcal_close(int stream_id [, int options])
mcal:int mcal_open(string calendar, string user, string password [, int options])
mcal:string mcal_popen(string calendar, string user, string password [, int options])
mcal:int mcal_reopen(int stream_id, string calendar [, int options])
mcal:int mcal_expunge(int stream_id)
mcal:int mcal_fetch_event(int stream_id, int eventid [, int options])
mcal:object mcal_fetch_current_stream_event(int stream_id)
mcal:array mcal_list_events(int stream_id, object begindate [, object enddate])
mcal:string mcal_create_calendar(int stream_id, string calendar)
mcal:string mcal_rename_calendar(int stream_id, string src_calendar, string dest_calendar)
mcal:bool mcal_list_alarms(int stream_id, int year, int month, int day, int hour, int min, int sec)
mcal:string mcal_delete_calendar(int stream_id, string calendar)
mcal:string mcal_delete_event(int stream_id, int event_id)
mcal:string mcal_append_event(int stream_id)
mcal:string mcal_store_event(int stream_id)
mcal:string mcal_snooze(int stream_id, int uid)
mcal:string mcal_event_set_category(int stream_id, string category)
mcal:string mcal_event_set_title(int stream_id, string title)
mcal:string mcal_event_set_description(int stream_id, string description)
mcal:string mcal_event_set_start(int stream_id, int year,int month, int day [[[, int hour], int min], int sec])
mcal:string mcal_event_set_end(int stream_id, int year,int month, int day [[[, int hour], int min], int sec])
mcal:int mcal_event_set_alarm(int stream_id, int alarm)
mcal:int mcal_event_init(int stream_id)
mcal:int mcal_event_set_class(int stream_id, int class)
mcal:string mcal_event_add_attribute(int stream_id, string attribute, string value)
mcal:bool mcal_is_leap_year(int year)
mcal:int mcal_days_in_month(int month, bool leap_year)
mcal:bool mcal_date_valid(int year, int month, int day)
mcal:bool mcal_time_valid(int hour, int min, int sec)
mcal:int mcal_day_of_week(int year, int month, int day)
mcal:int mcal_day_of_year(int year, int month, int day)
mcal:int mcal_week_of_year(int day, int month, int year)
mcal:int mcal_date_compare(int ayear, int amonth, int aday, int byear, int bmonth, int bday)
mcal:object mcal_next_recurrence(int stream_id, int weekstart, array next)
mcal:string mcal_event_set_recur_none(int stream_id)
mcal:string mcal_event_set_recur_daily(int stream_id, int year, int month, int day, int interval)
mcal:string mcal_event_set_recur_weekly(int stream_id, int year, int month, int day, int interval, int weekdays)
mcal:string mcal_event_set_recur_monthly_mday(int stream_id, int year, int month, int day, int interval)
mcal:string mcal_event_set_recur_monthly_wday(int stream_id, int year, int month, int day, int interval)
mcal:string mcal_event_set_recur_yearly(int stream_id, int year, int month, int day, int interval)
mcrypt:resource mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)
mcrypt:int mcrypt_generic_init(resource td, string key, string iv)
mcrypt:string mcrypt_generic(resource td, string data)
mcrypt:string mdecrypt_generic(resource td, string data)
mcrypt:int mcrypt_enc_get_supported_key_sizes(resource td)
mcrypt:int mcrypt_enc_self_test(resource td)
mcrypt:bool mcrypt_generic_end(resource td)
mcrypt:bool mcrypt_enc_is_block_algorithm_mode(resource td)
mcrypt:bool mcrypt_enc_is_block_algorithm(resource td)
mcrypt:bool mcrypt_enc_is_block_mode(resource td)
mcrypt:int mcrypt_enc_get_block_size(resource td)
mcrypt:int mcrypt_enc_get_key_size(resource td)
mcrypt:int mcrypt_enc_get_iv_size(resource td)
mcrypt:string mcrypt_enc_get_algorithms_name(resource td)
mcrypt:string mcrypt_enc_get_modes_name(resource td)
mcrypt:bool mcrypt_module_self_test(string algorithm [, string lib_dir])
mcrypt:bool mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])
mcrypt:bool mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])
mcrypt:bool mcrypt_module_is_block_mode(string mode [, string lib_dir])
mcrypt:int mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])
mcrypt:int mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])
mcrypt:int mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])
mcrypt:array mcrypt_list_algorithms([string lib_dir])
mcrypt:array mcrypt_list_modes([string lib_dir])
mcrypt:int mcrypt_get_key_size(string cipher, string module)
mcrypt:int mcrypt_get_block_size(string cipher, string module)
mcrypt:int mcrypt_get_iv_size(string cipher, string module)
mcrypt:string mcrypt_get_cipher_name(string cipher)
mcrypt:string mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)
mcrypt:string mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)
mcrypt:string mcrypt_ecb(int cipher, string key, string data, int mode, string iv)
mcrypt:string mcrypt_cbc(int cipher, string key, string data, int mode, string iv)
mcrypt:string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)
mcrypt:string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)
mcrypt:string mcrypt_create_iv(int size, int source)
mcrypt:string mcrypt_get_cipher_name(int cipher)
mcrypt:int mcrypt_get_key_size(int cipher)
mcrypt:int mcrypt_get_block_size(int cipher)
mcrypt:string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)
mcrypt:string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)
mcrypt:string mcrypt_cbc(int cipher, string key, string data, int mode [, string iv])
mcrypt:string mcrypt_ecb(int cipher, string key, string data, int mode)
mhash:int mhash_count()
mhash:int mhash_get_block_size(int hash)
mhash:string mhash_get_hash_name(int hash)
mhash:string mhash(int hash, string data)
msql:int msql_connect([string hostname[
msql:int msql_pconnect([string hostname[
msql:int msql_close([int link_identifier])
msql:int msql_select_db(string database_name [, int link_identifier])
msql:int msql_create_db(string database_name [, int link_identifier])
msql:int msql_drop_db(string database_name [, int link_identifier])
msql:int msql_query(string query [, int link_identifier])
msql:int msql_db_query(string database_name, string query [, int link_identifier])
msql:int msql_list_dbs([int link_identifier])
msql:int msql_list_tables(string database_name [, int link_identifier])
msql:int msql_list_fields(string database_name, string table_name [, int link_identifier])
msql:string msql_error([int link_identifier])
msql:int msql_result(int query, int row [, mixed field])
msql:int msql_num_rows(int query)
msql:int msql_num_fields(int query)
msql:array msql_fetch_row(int query)
msql:object msql_fetch_object(int query [, int result_type])
msql:array msql_fetch_array(int query [, int result_type])
msql:int msql_data_seek(int query, int row_number)
msql:object msql_fetch_field(int query [, int field_offset])
msql:int msql_field_seek(int query, int field_offset)
msql:string msql_field_name(int query, int field_index)
msql:string msql_field_table(int query, int field_offset)
msql:int msql_field_len(int query, int field_offet)
msql:string msql_field_type(int query, int field_offset)
msql:string msql_field_flags(int query, int field_offset)
msql:int msql_free_result(int query)
msql:int msql_affected_rows(int query)
mssql:int mssql_connect([string servername [, string username [, string password]]])
mssql:int mssql_pconnect([string servername [, string username [, string password]]])
mssql:int mssql_close([int connectionid])
mssql:bool mssql_select_db(string database_name [, int conn_id])
mssql:int mssql_query(string query [, int conn_id])
mssql:int mssql_free_result(string result_index)
mssql:string mssql_get_last_message(void)
mssql:int mssql_num_rows(int mssql_result_index)
mssql:int mssql_num_fields(int mssql_result_index)
mssql:array mssql_fetch_row(int result_id)
mssql:object mssql_fetch_object(int result_id)
mssql:array mssql_fetch_array(int result_id)
mssql:int mssql_data_seek(int result_id, int offset)
mssql:object mssql_fetch_field(int result_id [, int offset])
mssql:int mssql_field_length(int result_id [, int offset])
mssql:string mssql_field_name(int result_id [, int offset])
mssql:string mssql_field_type(int result_id [, int offset])
mssql:bool mssql_field_seek(int result_id, int offset)
mssql:string mssql_result(int result_id, int row, mixed field)
mssql:void mssql_min_error_severity(int severity)
mssql:void mssql_min_message_severity(int severity)
mysql:int mysql_connect([string hostname])
mysql:int mysql_pconnect([string hostname])
mysql:int mysql_close([int link_identifier])
mysql:int mysql_select_db(string database_name [, int link_identifier])
mysql:int mysql_create_db(string database_name [, int link_identifier])
mysql:int mysql_drop_db(string database_name [, int link_identifier])
mysql:int mysql_query(string query [, int link_identifier])
mysql:int mysql_db_query(string database_name, string query [, int link_identifier])
mysql:int mysql_list_dbs([int link_identifier])
mysql:int mysql_list_tables(string database_name [, int link_identifier])
mysql:int mysql_list_fields(string database_name, string table_name [, int link_identifier])
mysql:string mysql_error([int link_identifier])
mysql:int mysql_errno([int link_identifier])
mysql:int mysql_affected_rows([int link_identifier])
mysql:char mysql_escape_string([char string])
mysql:int mysql_insert_id([int link_identifier])
mysql:int mysql_result(int result, int row [, mixed field])
mysql:int mysql_num_rows(int result)
mysql:int mysql_num_fields(int result)
mysql:array mysql_fetch_row(int result)
mysql:object mysql_fetch_object(int result [, int result_type])
mysql:array mysql_fetch_array(int result [, int result_type])
mysql:array mysql_fetch_assoc(int result)
mysql:int mysql_data_seek(int result, int row_number)
mysql:array mysql_fetch_lengths(int result)
mysql:object mysql_fetch_field(int result [, int field_offset])
mysql:int mysql_field_seek(int result, int field_offset)
mysql:string mysql_field_name(int result, int field_index)
mysql:string mysql_field_table(int result, int field_offset)
mysql:int mysql_field_len(int result, int field_offet)
mysql:string mysql_field_type(int result, int field_offset)
mysql:string mysql_field_flags(int result, int field_offset)
mysql:int mysql_free_result(int result)
oci8:int ocidefinebyname(int stmt, string name, mixed &var [, int type])
oci8:int ocibindbyname(int stmt, string name, mixed &var, int maxlength [, int type])
oci8:string ocifreedesc(object lob)
oci8:string ocisavelob(object lob)
oci8:string ocisavelobfile(object lob)
oci8:string ociloadlob(object lob)
oci8:void ociwritelobtofile(object lob [, string filename] [, int start] [, int length])
oci8:string ocinewdescriptor(int connection [, int type])
oci8:string ocirollback(int conn)
oci8:string ocicommit(int conn)
oci8:string ocicolumnname(int stmt, int col)
oci8:int ocicolumnsize(int stmt, int col)
oci8:int ocicolumnscale(int stmt, int col)
oci8:int ocicolumnprecision(int stmt, int col)
oci8:mixed ocicolumntype(int stmt, int col)
oci8:mixed ocicolumntyperaw(int stmt, int col)
oci8:int ocicolumnisnull(int stmt, int col)
oci8:void ociinternaldebug(int onoff)
oci8:int ociexecute(int stmt [, int mode])
oci8:int ocicancel(int stmt)
oci8:int ocifetch(int stmt)
oci8:int ocifetchinto(int stmt, array &output [, int mode])
oci8:int ocifetchstatement(int stmt, array &output)
oci8:int ocifreestatement(int stmt)
oci8:int ocilogoff(int conn)
oci8:int ocinlogon(string user, string pass [, string db])
oci8:int ocilogon(string user, string pass [, string db])
oci8:int ociplogon(string user, string pass [, string db])
oci8:array ocierror([int stmt|conn|global])
oci8:int ocinumcols(int stmt)
oci8:int ociparse(int conn, string query)
oci8:int ocisetprefetch(int conn, string query)
oci8:int ocinewcursor(int conn)
oci8:string ociresult(int stmt, mixed column)
oci8:string ociserverversion(int conn)
oci8:int ocistatementtype(int stmt)
oci8:int ocirowcount(int stmt)
odbc:void odbc_close_all(void)
odbc:int odbc_binmode(int result_id, int mode)
odbc:int odbc_longreadlen(int result_id, int length)
odbc:int odbc_prepare(int connection_id, string query)
odbc:int odbc_execute(int result_id [, array parameters_array])
odbc:string odbc_cursor(int result_id)
odbc:int odbc_exec(int connection_id, string query [, int flags])
odbc:object odbc_fetch_object(int result [, int rownumber])
odbc:array odbc_fetch_array(int result [, int rownumber])
odbc:int odbc_fetch_into(int result_id [, int rownumber], array result_array)
odbc:int odbc_fetch_row(int result_id [, int row_number])
odbc:string odbc_result(int result_id, mixed field)
odbc:int odbc_result_all(int result_id [, string format])
odbc:int odbc_free_result(int result_id)
odbc:int odbc_connect(string DSN, string user, string password [, int cursor_option])
odbc:int odbc_pconnect(string DSN, string user, string password [, int cursor_option])
odbc:void odbc_close(int connection_id)
odbc:int odbc_num_rows(int result_id)
odbc:int odbc_num_fields(int result_id)
odbc:string odbc_field_name(int result_id, int field_number)
odbc:string odbc_field_type(int result_id, int field_number)
odbc:int odbc_field_len(int result_id, int field_number)
odbc:int odbc_field_scale(int result_id, int field_number)
odbc:int odbc_field_num(int result_id, string field_name)
odbc:int odbc_autocommit(int connection_id [, int OnOff])
odbc:int odbc_commit(int connection_id)
odbc:int odbc_rollback(int connection_id)
odbc:int odbc_setoption(int conn_id|result_id, int which, int option, int value)
odbc:int odbc_tables(int connection_id [, string qualifier, string owner, string name, string table_types])
odbc:int odbc_columns(int connection_id, string qualifier, string owner, string table_name, string column_name)
odbc:int odbc_columnprivileges(int connection_id, string catalog, string schema, string table, string column)
odbc:int odbc_foreignkeys(int connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)
odbc:int odbc_gettypeinfo(int connection_id [, int data_type])
odbc:int odbc_primarykeys(int connection_id, string qualifier, string owner, string table)
odbc:int odbc_procedurecolumns(int connection_id [, string qualifier, string owner, string proc, string column])
odbc:int odbc_procedures(int connection_id [, string qualifier, string owner, string name])
odbc:int odbc_specialcolumns(int connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)
odbc:int odbc_statistics(int connection_id, string qualifier, string owner, string name, int unique, int accuracy)
odbc:int odbc_tableprivileges(int connection_id, string qualifier, string owner, string name)
oracle:int ora_logon(string user, string password)
oracle:int ora_plogon(string user, string password)
oracle:int ora_logoff(int connection)
oracle:int ora_open(int connection)
oracle:int ora_close(int cursor)
oracle:int ora_commitoff(int connection)
oracle:int ora_commiton(int connection)
oracle:int ora_commit(int connection)
oracle:int ora_rollback(int connection)
oracle:int ora_parse(int cursor, string sql_statement [, int defer])
oracle:int ora_bind(int cursor, string php_variable_name, string sql_parameter_name, int length [, int type])
oracle:int ora_exec(int cursor)
oracle:int ora_numcols(int cursor)
oracle:int ora_numrows(int cursor)
oracle:int ora_do(int connection, int cursor)
oracle:int ora_fetch(int cursor)
oracle:int ora_fetch_into(int cursor, array result [, int flags])
oracle:string ora_columnname(int cursor, int column)
oracle:string ora_columntype(int cursor, int column)
oracle:int ora_columnsize(int cursor, int column)
oracle:mixed ora_getcolumn(int cursor, int column)
oracle:string ora_error(int cursor_or_connection)
oracle:int ora_errorcode(int cursor_or_connection)
ovrimos:int ovrimos_connect(string host, string db, string user, string password)
ovrimos:void ovrimos_close(int connection)
ovrimos:void ovrimos_close_all()
ovrimos:int ovrimos_longreadlen(int result_id, int length)
ovrimos:int ovrimos_prepare(int connection_id, string query)
ovrimos:int ovrimos_execute(int result_id [, array parameters_array])
ovrimos:string ovrimos_cursor(int result_id)
ovrimos:int ovrimos_exec(int connection_id, string query)
ovrimos:int ovrimos_fetch_into(int result_id, array result_array [, string how, [int rownumber]])
ovrimos:int ovrimos_fetch_row(int result_id [, int how, [int row_number]])
ovrimos:string ovrimos_result(int result_id, mixed field)
ovrimos:int ovrimos_result_all(int result_id [, string format])
ovrimos:int ovrimos_free_result(int result_id)
ovrimos:int ovrimos_num_rows(int result_id)
ovrimos:int ovrimos_num_fields(int result_id)
ovrimos:string ovrimos_field_name(int result_id, int field_number)
ovrimos:string ovrimos_field_type(int result_id, int field_number)
ovrimos:int ovrimos_field_len(int result_id, int field_number)
ovrimos:int ovrimos_field_num(int result_id, string field_name)
ovrimos:int ovrimos_autocommit(int connection_id, int OnOff)
ovrimos:int ovrimos_commit(int connection_id)
ovrimos:int ovrimos_rollback(int connection_id)
ovrimos:int ovrimos_setoption(int conn_id|result_id, int which, int option, int value)
pcre:int preg_match(string pattern, string subject [, array subpatterns])
pcre:int preg_match_all(string pattern, string subject, array subpatterns [, int order])
pcre:string preg_replace(string|array regex, string|array replace, string|array subject [, int limit])
pcre:array preg_split(string pattern, string subject [, int limit [, int flags]])
pcre:string preg_quote(string str, string delim_char)
pcre:array preg_grep(string regex, array input)
pdf:bool pdf_set_info(int pdfdoc, string fieldname, string value)
pdf:bool pdf_set_info_creator(int pdfdoc, string creator)
pdf:bool pdf_set_info_title(int pdfdoc, string title)
pdf:bool pdf_set_info_subject(int pdfdoc, string subject)
pdf:bool pdf_set_info_author(int pdfdoc, string author)
pdf:bool pdf_set_info_keywords(int pdfdoc, string keywords)
pdf:int pdf_open([int filedesc])
pdf:void pdf_close(int pdfdoc)
pdf:void pdf_begin_page(int pdfdoc, double width, double height)
pdf:void pdf_end_page(int pdfdoc)
pdf:void pdf_show(int pdfdoc, string text)
pdf:void pdf_show_xy(int pdfdoc, string text, double x-koor, double y-koor)
pdf:int pdf_show_boxed(int pdfdoc, string text, double x-koor, double y-koor, double width, double height, string mode, [string feature])
pdf:void pdf_set_font(int pdfdoc, string font, double size, string encoding [, int embed])
pdf:int pdf_get_font(int pdfdoc)
pdf:string pdf_get_fontname(int pdfdoc)
pdf:double pdf_get_fontsize(int pdfdoc)
pdf:void pdf_set_leading(int pdfdoc, double distance)
pdf:void pdf_set_text_rendering(int pdfdoc, int mode)
pdf:void pdf_set_horiz_scaling(int pdfdoc, double scale)
pdf:void pdf_set_text_rise(int pdfdoc, double value)
pdf:void pdf_set_text_matrix(int pdfdoc, arry matrix)
pdf:void pdf_set_text_pos(int pdfdoc, double x, double y)
pdf:void pdf_set_char_spacing(int pdfdoc, double space)
pdf:void pdf_set_word_spacing(int pdfdoc, double space)
pdf:void pdf_continue_text(int pdfdoc, string text)
pdf:double pdf_stringwidth(int pdfdoc, string text)
pdf:void pdf_save(int pdfdoc)
pdf:void pdf_restore(int pdfdoc)
pdf:void pdf_translate(int pdfdoc, double x, double y)
pdf:void pdf_scale(int pdfdoc, double x-scale, double y-scale)
pdf:void pdf_rotate(int pdfdoc, double angle)
pdf:void pdf_skew(int pdfdoc, double xangle, double yangle)
pdf:void pdf_setflat(int pdfdoc, double value)
pdf:void pdf_setlinejoin(int pdfdoc, int value)
pdf:void pdf_setlinecap(int pdfdoc, int value)
pdf:void pdf_setmiterlimit(int pdfdoc, double value)
pdf:void pdf_setlinewidth(int pdfdoc, double width)
pdf:void pdf_setdash(int pdfdoc, double white, double black)
pdf:void pdf_moveto(int pdfdoc, double x, double y)
pdf:void pdf_curveto(int pdfdoc, double x1, double y1, double x2, double y2, double x3, double y3)
pdf:void pdf_lineto(int pdfdoc, double x, double y)
pdf:void pdf_circle(int pdfdoc, double x, double y, double radius)
pdf:void pdf_arc(int pdfdoc, double x, double y, double radius, double start, double end)
pdf:void pdf_rect(int pdfdoc, double x, double y, double width, double height)
pdf:void pdf_closepath(int pdfdoc)
pdf:void pdf_closepath_stroke(int pdfdoc)
pdf:void pdf_stroke(int pdfdoc)
pdf:void pdf_fill(int pdfdoc)
pdf:void pdf_fill_stroke(int pdfdoc)
pdf:void pdf_closepath_fill_stroke(int pdfdoc)
pdf:void pdf_endpath(int pdfdoc)
pdf:void pdf_clip(int pdfdoc)
pdf:void pdf_set_parameter(int pdfdoc, string key, string value)
pdf:string pdf_get_parameter(int pdfdoc, string key, mixed modifier)
pdf:void pdf_set_value(int pdfdoc, string key, double value)
pdf:double pdf_get_value(int pdfdoc, string key, double modifier)
pdf:void pdf_setgray_fill(int pdfdoc, double value)
pdf:void pdf_setgray_stroke(int pdfdoc, double value)
pdf:void pdf_setgray(int pdfdoc, double value)
pdf:void pdf_setrgbcolor_fill(int pdfdoc, double red, double green, double blue)
pdf:void pdf_setrgbcolor_stroke(int pdfdoc, double red, double green, double blue)
pdf:void pdf_setrgbcolor(int pdfdoc, double red, double green, double blue)
pdf:int pdf_add_outline(int pdfdoc, string text [, int parent, int open]);
pdf:void pdf_set_transition(int pdfdoc, int transition)
pdf:void pdf_set_duration(int pdfdoc, double duration)
pdf:int pdf_open_gif(int pdf, string giffile)
pdf:int pdf_open_jpeg(int pdf, string jpegfile)
pdf:int pdf_open_png(int pdf, string pngfile)
pdf:int pdf_open_tiff(int pdf, string tifffile)
pdf:int pdf_open_image_file(int pdf, string type, string file)
pdf:int pdf_open_memory_image(int pdf, int image)
pdf:void pdf_close_image(int pdfimage)
pdf:void pdf_place_image(int pdf, int pdfimage, double x, double y, double scale)
pdf:void pdf_get_image_width(int pdf, int pdfimage)
pdf:void pdf_get_image_height(int pdf, int pdfimage)
pdf:void pdf_add_weblink(int pdfdoc, double llx, double lly, double urx, double ury, string url)
pdf:void pdf_add_pdflink(int pdfdoc, double llx, double lly, double urx, double ury, string filename, int page, string dest)
pdf:void pdf_set_border_style(int pdfdoc, string style, double width)
pdf:void pdf_set_border_color(int pdfdoc, double red, double green, double blue)
pdf:void pdf_set_border_dash(int pdfdoc, double black, double white)
pdf:void pdf_add_annotation(int pdfdoc, double xll, double yll, double xur, double xur, string title, string text)
pfpro:string pfpro_version()
pfpro:void pfpro_init()
pfpro:void pfpro_cleanup()
pfpro:string pfpro_process_raw(string parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])
pfpro:array pfpro_process(array parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])
pgsql:int pg_connect([string connection_string] | [string host, string port [, string options [, string tty,]] string database)
pgsql:int pg_pconnect([string connection_string] | [string host, string port [, string options [, string tty,]] string database)
pgsql:bool pg_close([int connection])
pgsql:string pg_dbname([int connection])
pgsql:string pg_errormessage([int connection])
pgsql:string pg_options([int connection])
pgsql:int pg_port([int connection])
pgsql:string pg_tty([int connection])
pgsql:string pg_host([int connection])
pgsql:int pg_exec([int connection,] string query)
pgsql:int pg_end_copy([int connection])
pgsql:int pg_put_line([int connection,] string query)
pgsql:int pg_numrows(int result)
pgsql:int pg_numfields(int result)
pgsql:int pg_cmdtuples(int result)
pgsql:string pg_fieldname(int result, int field_number)
pgsql:int pg_fieldsize(int result, int field_number)
pgsql:string pg_fieldtype(int result, int field_number)
pgsql:int pg_fieldnum(int result, string field_name)
pgsql:mixed pg_result(int result, int row_number, mixed field_name)
pgsql:array pg_fetch_row(int result, int row)
pgsql:array pg_fetch_array(int result, int row [, int result_type])
pgsql:object pg_fetch_object(int result, int row [, int result_type])
pgsql:int pg_fieldprtlen(int result, int row, mixed field_name_or_number)
pgsql:int pg_fieldisnull(int result, int row, mixed field_name_or_number)
pgsql:int pg_freeresult(int result)
pgsql:int pg_getlastoid(int result)
pgsql:bool pg_trace(string filename [, string mode [, resource connection]])
pgsql:bool pg_untrace([int connection])
pgsql:int pg_locreate(int connection)
pgsql:void pg_lounlink([int connection,] int large_obj_id)
pgsql:int pg_loopen([int connection,] int objoid, string mode)
pgsql:void pg_loclose(int fd)
pgsql:string pg_loread(int fd, int len)
pgsql:int pg_lowrite(int fd, string buf)
pgsql:void pg_loreadall(int fd)
pgsql:int pg_loimport(string filename [, resource connection])
pgsql:bool pg_loexport(int objoid, string filename [, resource connection])
pgsql:int pg_set_client_encoding([int connection,] string encoding)
pgsql:string pg_client_encoding([int connection])
posix:int posix_kill(int pid, int sig)
posix:long posix_getpid(void)
posix:long posix_getppid(void)
posix:long posix_getuid(void)
posix:long posix_getgid(void)
posix:long posix_geteuid(void)
posix:long posix_getegid(void)
posix:long posix_setuid(long uid)
posix:long posix_setgid(long uid)
posix:long posix_seteuid(long uid)
posix:long posix_setegid(long uid)
posix:long posix_getgroups(void)
posix:string posix_getlogin(void)
posix:long posix_getpgrp(void)
posix:long posix_setsid(void)
posix:long posix_setpgid(long pid, long pgid)
posix:long posix_getpgid(void)
posix:long posix_getsid(void)
posix:array posix_uname(void)
posix:array posix_times(void)
posix:string posix_ctermid(void)
posix:string posix_ttyname(int fd)
posix:bool posix_isatty(int fd)
posix:string posix_getcwd(void)
posix:string posix_mkfifo(void)
posix:array posix_getgrnam(string groupname)
posix:array posix_getgrgid(long gid)
posix:array posix_getpwnam(string groupname)
posix:array posix_getpwuid(long uid)
posix:long posix_getrlimit(void)
pspell:int pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])
pspell:int pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])
pspell:int pspell_new_config(int config)
pspell:int pspell_check(int pspell, string word)
pspell:array pspell_suggest(int pspell, string word)
pspell:int pspell_store_replacement(int pspell, string misspell, string correct)
pspell:int pspell_add_to_personal(int pspell, string word)
pspell:int pspell_add_to_session(int pspell, string word)
pspell:int pspell_clear_session(int pspell)
pspell:int pspell_save_wordlist(int pspell)
pspell:int pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])
pspell:int pspell_config_runtogether(int conf, bool runtogether)
pspell:int pspell_config_mode(int conf, long mode)
pspell:int pspell_config_ignore(int conf, int ignore)
pspell:int pspell_config_personal(int conf, string personal)
pspell:int pspell_config_repl(int conf, string repl)
pspell:int pspell_config_save_repl(int conf, bool save)
readline:string readline([string prompt])
readline:mixed readline_info([string varname] [, string newvalue])
readline:void readline_add_history([string prompt])
readline:void readline_clear_history(void)
readline:array readline_list_history(void)
readline:int readline_read_history([string filename] [, int from] [,int to])
readline:int readline_write_history([string filename])
readline:void readline_completion_function(string funcname)
recode:string recode_string(string request, string str)
recode:bool recode_file(string request, resource input, resource output)
sablot:resource xslt_create(void)
sablot:bool xslt_run(resource xh, string xslt_file, string data_file[, string result[, array xslt_params[, array xslt_args]]])
sablot:bool xslt_openlog(resource xh, string logfile[, int loglevel])
sablot:bool xslt_closelog(resource xh)
sablot:string xslt_fetch_result(resource xh[, string result_name])
sablot:void xslt_free(resource xh)
sablot:void xslt_set_sax_handler(resource xh, array handlers)
sablot:mixed xslt_error([int xh])
sablot:int xslt_errno([int xh])
session:void session_set_cookie_params(int lifetime [, string path [, string domain]])
session:array session_get_cookie_params(void)
session:string session_name([string newname])
session:string session_module_name([string newname])
session:void session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)
session:string session_save_path([string newname])
session:string session_id([string newid])
session:string session_cache_limiter([string new_cache_limiter])
session:bool session_register(mixed var_names [, mixed ...])
session:bool session_unregister(string varname)
session:bool session_is_registered(string varname)
session:string session_encode(void)
session:bool session_decode(string data)
session:bool session_start(void)
session:bool session_destroy(void)
session:void session_unset(void)
shmop:int shm_open (int key, int flags, int mode, int size)
shmop:string shm_read (int shmid, int start, int count)
shmop:void shm_close (int shmid)
shmop:int shm_size (int shmid)
shmop:int shm_write (int shmid, string data, int offset)
shmop:bool shm_delete (int shmid)
create_stubs:{{{ proto " types[i] " " funcs[i] "("
skeleton:string confirm_extname_compiled(string arg)
snmp:string snmpget(string host, string community, string object_id [, int timeout [, int retries]])
snmp:array snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])
snmp:array snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])
snmp:bool snmp_get_quick_print(void)
snmp:void snmp_set_quick_print(int quick_print)
snmp:int snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])
sockets:resource fd_alloc(void)
sockets:void fd_dealloc(void)
sockets:bool fd_set(int fd, resource set)
sockets:bool fd_clear(int fd, resource set)
sockets:bool fd_isset(int fd, resource set)
sockets:void fd_zero(resource set)
sockets:int select(int max_fd, resource readfds, resource writefds, resource exceptfds, int tv_sec, int tv_usec)
sockets:int open_listen_sock(int port)
sockets:int accept_connect(int fd)
sockets:bool set_nonblock(int fd)
sockets:bool listen(int fd, int backlog)
sockets:bool close(int fd)
sockets:int write(int fd, string buf, int length)
sockets:int read(int fd, string &buf, int length)
sockets:int getsockname(int fd, string &addr, int &port)
sockets:int gethostbyname(string name, string &addr)
sockets:int getpeername(int fd, string &addr, int &port)
sockets:int gethostbyaddr(string addr, string &name)
sockets:int socket(int domain, int type, int protocol)
sockets:int connect(int sockfd, string addr [, int port])
sockets:string strerror(int errno)
sockets:int bind(int sockfd, string addr [, int port])
sockets:resource build_iovec(int num_vectors [, int ...])
sockets:string fetch_iovec(resource iovec_id, int iovec_position)
sockets:bool set_iovec(resource iovec_id, int iovec_position, string new_val)
sockets:bool add_iovec(resource iovec_id, int iov_len)
sockets:bool delete_iovec(resource iovec_id, int iov_pos)
sockets:bool free_iovec(resource iovec_id)
sockets:int readv(int fd, resource iovec_id)
sockets:int writev(int fd, resource iovec_id)
sockets:int recv(int fd, string buf, int len, int flags)
sockets:int send(int fd, string buf, int len, int flags)
sockets:int recvfrom(int fd, string &buf, int len, int flags, string &name [, int &port])
sockets:int sendto(int fd, string buf, int len, int flags, string addr [, int port])
sockets:int recvmsg(int fd, resource iovec, array &control, int &controllen, int &flags, string &addr [, int &port])
sockets:int sendmsg(int fd, resource iovec, int flags, string addr [, int port])
sockets:int getsockopt(int fd, int level, int optname, array|int &optval)
sockets:int setsockopt(int fd, int level, int optname, int|array optval)
sockets:int socketpair(int domain, int type, int protocol, array &fds)
sockets:int shutdown(int fd, int how)
array:int krsort(array array_arg [, int sort_flags])
array:int ksort(array array_arg [, int sort_flags])
array:int count(mixed var)
array:void natsort(array array_arg)
array:void natcasesort(array array_arg)
array:void asort(array array_arg [, int sort_flags])
array:void arsort(array array_arg [, int sort_flags])
array:void sort(array array_arg [, int sort_flags])
array:void rsort(array array_arg [, int sort_flags])
array:void usort(array array_arg, string cmp_function)
array:void uasort(array array_arg, string cmp_function)
array:void uksort(array array_arg, string cmp_function)
array:mixed end(array array_arg)
array:mixed prev(array array_arg)
array:mixed next(array array_arg)
array:mixed reset(array array_arg)
array:mixed current(array array_arg)
array:mixed key(array array_arg)
array:mixed min(mixed arg1 [, mixed arg2 [, mixed ...]])
array:mixed max(mixed arg1 [, mixed arg2 [, mixed ...]])
array:int array_walk(array input, string funcname [, mixed userdata])
array:bool in_array(mixed needle, array haystack [, bool strict])
array:void extract(array var_array, int extract_type [, string prefix])
array:array compact(mixed var_names [, mixed ...])
array:array range(int low, int high)
array:int shuffle(array array_arg)
array:int array_push(array stack, mixed var [, mixed ...])
array:mixed array_pop(array stack)
array:mixed array_shift(array stack)
array:int array_unshift(array stack, mixed var [, mixed ...])
array:array array_splice(array input, int offset [, int length [, array replacement]])
array:array array_slice(array input, int offset [, int length])
array:array array_merge(array arr1, array arr2 [, array ...])
array:array array_merge_recursive(array arr1, array arr2 [, array ...])
array:array array_keys(array input [, mixed search_value])
array:array array_values(array input)
array:array array_count_values(array input)
array:array array_reverse(array input [, bool preserve keys])
array:array array_pad(array input, int pad_size, mixed pad_value)
array:array array_flip(array input)
array:array array_unique(array input)
array:array array_intersect(array arr1, array arr2 [, array ...])
array:array array_diff(array arr1, array arr2 [, array ...])
array:bool array_multisort(array ar1 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array ar2 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])
array:mixed array_rand(array input [, int num_req])
assert:int assert(string|bool assertion)
assert:mixed assert_options(int what [, mixed value])
base64:string base64_encode(string str)
base64:string base64_decode(string str)
basic_functions:int ip2long(string ip_address)
basic_functions:string long2ip(int proper_address)
basic_functions:string getenv(string varname)
basic_functions:void putenv(string setting)
basic_functions:int intval(mixed var [, int base])
basic_functions:double doubleval(mixed var)
basic_functions:string strval(mixed var)
basic_functions:void flush(void)
basic_functions:void sleep(int seconds)
basic_functions:void usleep(int micro_seconds)
basic_functions:string gettype(mixed var)
basic_functions:int settype(string var, string type)
basic_functions:string get_current_user(void)
basic_functions:string get_cfg_var(string option_name)
basic_functions:int set_magic_quotes_runtime(int new_setting)
basic_functions:int get_magic_quotes_runtime(void)
basic_functions:int get_magic_quotes_gpc(void)
basic_functions:bool is_resource(mixed var)
basic_functions:bool is_bool(mixed var)
basic_functions:bool is_long(mixed var)
basic_functions:bool is_double(mixed var)
basic_functions:bool is_string(mixed var)
basic_functions:bool is_array(mixed var)
basic_functions:bool is_object(mixed var)
basic_functions:bool is_numeric(mixed value)
basic_functions:int error_log(string message, int message_type [, string destination] [, string extra_headers])
basic_functions:mixed call_user_func(string function_name [, mixed parmeter] [, mixed ...])
basic_functions:mixed call_user_method(string method_name, object object [, mixed parameter] [, mixed ...])
basic_functions:void register_shutdown_function(string function_name)
basic_functions:void highlight_file(string file_name)
basic_functions:void highlight_string(string string)
basic_functions:string ini_get(string varname)
basic_functions:string ini_set(string varname, string newvalue)
basic_functions:string ini_restore(string varname)
basic_functions:string print_r(mixed var)
basic_functions:int connection_aborted(void)
basic_functions:int connection_timeout(void)
basic_functions:int connection_status(void)
basic_functions:int ignore_user_abort(boolean value)
basic_functions:int getservbyname(string service, string protocol)
basic_functions:string getservbyport(int port, string protocol)
basic_functions:int getprotobyname(string name)
basic_functions:string getprotobynumber(int proto)
basic_functions:array get_loaded_extensions(void)
basic_functions:bool extension_loaded(string extension_name)
basic_functions:array get_extension_funcs(string extension_name)
basic_functions:void register_tick_function(string function_name [, mixed arg [, ... ]])
basic_functions:void unregister_tick_function(string function_name)
basic_functions:boolean is_uploaded_file(string path)
basic_functions:boolean move_uploaded_file(string path, string new_path)
browscap:object get_browser(string browser_name)
crc32:string crc32(string str)
crypt:string crypt(string str [, string salt])
cyr_convert:string convert_cyr_string(string str, string from, string to)
datetime:int time(void)
datetime:int mktime(int hour, int min, int sec, int mon, int day, int year)
datetime:int gmmktime(int hour, int min, int sec, int mon, int day, int year)
datetime:string date(string format [, int timestamp])
datetime:string gmdate(string format [, int timestamp])
datetime:array localtime([int timestamp [, bool associative_array]])
datetime:array getdate([int timestamp])
datetime:bool checkdate(int month, int day, int year)
datetime:string strftime(string format [, int timestamp])
datetime:string gmstrftime(string format [, int timestamp])
datetime:int strtotime(string time, int now)
dir:int opendir(string path)
dir:class dir(string directory)
dir:void closedir([int dir_handle])
dir:int chdir(string directory)
dir:string getcwd(void)
dir:void rewinddir([int dir_handle])
dir:string readdir([int dir_handle])
dl:int dl(string extension_filename)
dns:string gethostbyaddr(string ip_address)
dns:string gethostbyname(string hostname)
dns:array gethostbynamel(string hostname)
dns:int checkdnsrr(string host [, string type])
dns:int getmxrr(string hostname, array mxhosts [, array weight])
exec:int exec(string command [, array output [, int return_value]])
exec:int system(string command [, int return_value])
exec:void passthru(string command [, int return_value])
exec:string escapeshellcmd(string command)
exec:string escapeshellarg(string arg)
exec:string shell_exec(string cmd)
file:bool flock(int fp, int operation [, int wouldblock])
file:array get_meta_tags(string filename [, int use_include_path])
file:array file(string filename [, int use_include_path])
file:string tempnam(string dir, string prefix)
file:int tmpfile(void)
file:int fopen(string filename, string mode [, int use_include_path])
file:int fclose(int fp)
file:int popen(string command, string mode)
file:int pclose(int fp)
file:int feof(int fp)
file:int set_socket_blocking(int socket_descriptor, int mode)
file:bool socket_set_timeout(int socket_descriptor, int seconds, int microseconds)
file:array socket_get_status(resource socket_descriptor)
file:string fgets(int fp, int length)
file:string fgetc(int fp)
file:string fgetss(int fp, int length [, string allowable_tags])
file:mixed fscanf(string str, string format [, string ...])
file:int fwrite(int fp, string str [, int length])
file:int fflush(int fp)
file:int set_file_buffer(int fp, int buffer)
file:int rewind(int fp)
file:int ftell(int fp)
file:int fseek(int fp, int offset [, int whence])
file:int mkdir(string pathname, int mode)
file:int rmdir(string dirname)
file:int readfile(string filename [, int use_include_path])
file:int umask([int mask])
file:int fpassthru(int fp)
file:int rename(string old_name, string new_name)
file:int unlink(string filename)
file:int ftruncate (int fp, int size)
file:int fstat(int fp)
file:int copy(string source_file, string destination_file)
file:int fread(int fp, int length)
file:array fgetcsv(int fp, int length)
file:string realpath(string path)
filestat:double diskfreespace(string path)
filestat:bool chgrp(string filename, mixed group)
filestat:bool chown (string filename, mixed user)
filestat:bool chmod(string filename, int mode)
filestat:bool touch(string filename [, int time])
filestat:void clearstatcache(void)
filestat:int fileperms(string filename)
filestat:int fileinode(string filename)
filestat:int filesize(string filename)
filestat:int fileowner(string filename)
filestat:nt filegroup(string filename)
filestat:int fileatime(string filename)
filestat:int filemtime(string filename)
filestat:int filectime(string filename)
filestat:string filetype(string filename)
filestat:int is_writable(string filename)
filestat:int is_readable(string filename)
filestat:int is_executable(string filename)
filestat:int is_file(string filename)
filestat:int is_dir(string filename)
filestat:int is_link(string filename)
filestat:bool file_exists(string filename)
filestat:array lstat(string filename)
filestat:array stat(string filename)
formatted_print:string sprintf(string format [, mixed arg1 [, mixed ...]])
formatted_print:int printf(string format [, mixed arg1 [, mixed ...]])
fsock:int fsockopen(string hostname, int port [, int errno [, string errstr [, double timeout]]])
fsock:int pfsockopen(string hostname, int port [, int errno [, string errstr [, double timeout]]])
head:void header(string header)
head:void setcookie(string name [, string value [, int expires [, string path [, string domain [, string secure]]]]])
head:int headers_sent(void)
html:string htmlspecialchars(string string [, int quote_style])
html:string htmlentities(string string [, int quote_style])
html:array get_html_translation_table([int table [, int quote_style]])
image:array getimagesize(string imagefile [, array info])
info:void phpinfo([int what])
info:string phpversion(void)
info:void phpcredits([int flag])
info:string php_logo_guid(void)
info:string php_egg_logo_guid(void)
info:string zend_logo_guid(void)
info:string php_sapi_name(void)
info:string php_uname(void)
iptc:array iptcembed(string iptcdata, string jpeg_file_name [, int spool])
iptc:array iptcparse(string iptcdata)
lcg:double lcg_value()
levenshtein:int levenshtein(string str1, string str2)
link:string readlink(string filename)
link:int linkinfo(string filename)
link:int symlink(string target, string link)
link:int link(string target, string link)
mail:int ezmlm_hash(string addr)
mail:int mail(string to, string subject, string message [, string additional_headers])
math:int abs(int number)
math:double ceil(double number)
math:double floor(double number)
math:double round(double number [, int precision])
math:double sin(double number)
math:double cos(double number)
math:double tan(double number)
math:double asin(double number)
math:double acos(double number)
math:double atan(double number)
math:double atan2(double y, double x)
math:double pi(void)
math:double pow(double base, double exponent)
math:double exp(double number)
math:double log(double number)
math:double log10(double number)
math:double sqrt(double number)
math:double deg2rad(double number)
math:double rad2deg(double number)
math:int bindec(string binary_number)
math:int hexdec(string hexadecimal_number)
math:int octdec(string octal_number)
math:string decbin(int decimal_number)
math:string decoct(int decimal_number)
math:string dechex(int decimal_number)
math:string base_convert(string number, int frombase, int tobase)
math:string number_format(double number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])
md5:string md5(string str)
metaphone:string metaphone(string text, int phones)
microtime:string microtime(void)
microtime:array gettimeofday(void)
microtime:array getrusage([int who])
output:void ob_start(void)
output:void ob_end_flush(void)
output:void ob_end_clean(void)
output:string ob_get_contents(void)
output:string ob_get_length(void)
output:void ob_implicit_flush([int flag])
pack:string pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])
pack:array unpack(string format, string input)
pageinfo:int getmyuid(void)
pageinfo:int getmypid(void)
pageinfo:int getmyinode(void)
pageinfo:int getlastmod(void)
rand:void srand(int seed)
rand:void mt_srand(int seed)
rand:int rand([int min, int max])
rand:int mt_rand([int min, int max])
rand:int getrandmax(void)
rand:int mt_getrandmax(void)
quot_print:string quoted_printable_decode(string str)
reg:int ereg(string pattern, string string [, array registers])
reg:int eregi(string pattern, string string [, array registers])
reg:string ereg_replace(string pattern, string replacement, string string)
reg:string eregi_replace(string pattern, string replacement, string string])
reg:array split(string pattern, string string [, int limit])
reg:array spliti(string pattern, string string [, int limit])
reg:string sql_regcase(string string)
soundex:string soundex(string str)
string:string bin2hex(string data)
string:int strspn(string str, string mask)
string:int strcspn(string str, string mask)
string:string rtrim(string str)
string:string chop(string str)
string:string trim(string str)
string:string ltrim(string str)
string:string wordwrap(string str [, int width [, string break [, int cut]]])
string:array explode(string separator, string str [, int limit])
string:string join(array src, string glue)
string:string implode(string glue, array src)
string:string strtok([string str,] string token)
string:string strtoupper(string str)
string:string strtolower(string str)
string:string basename(string path)
string:string dirname(string path)
string:array pathinfo(string path)
string:string stristr(string haystack, string needle)
string:string strstr(string haystack, string needle)
string:string strchr(string haystack, string needle)
string:int strpos(string haystack, string needle [, int offset])
string:int strrpos(string haystack, string needle)
string:string strrchr(string haystack, string needle)
string:string chunk_split(string str [, int chunklen [, string ending]])
string:string substr(string str, int start [, int length])
string:string substr_replace(string str, string repl, int start [, int length])
string:string quotemeta(string str)
string:int ord(string character)
string:string chr(int ascii)
string:string ucfirst(string str)
string:string ucwords(string str)
string:string strtr(string str, string from, string to)
string:string strrev(string str)
string:int similar_text(string str1, string str2 [, double percent])
string:string addcslashes(string str, string charlist)
string:string addslashes(string str)
string:string stripcslashes(string str)
string:string stripslashes(string str)
string:string str_replace(string needle, string str, string haystack)
string:string hebrev(string str [, int max_chars_per_line])
string:string hebrevc(string str [, int max_chars_per_line])
string:string nl2br(string str)
string:string strip_tags(string str [, string allowable_tags])
string:string setlocale(string category, string locale)
string:void parse_str(string encoded_string, [array result])
string:string str_repeat(string input, int mult)
string:mixed count_chars(string input [, int mode])
string:int strnatcmp(string s1, string s2)
string:int strnatcasecmp(string s1, string s2)
string:int substr_count(string haystack, string needle)
string:string str_pad(string input, int pad_length [, string pad_string [, int pad_type]])
string:mixed sscanf(string str, string format [, string ...])
syslog:void define_syslog_variables(void)
syslog:int openlog(string ident, int option, int facility)
syslog:int closelog(void)
syslog:int syslog(int priority, string message)
uniqid:string uniqid(string prefix, [bool more_entropy])
url:array parse_url(string url)
url:string urlencode(string str)
url:string urldecode(string str)
url:string rawurlencode(string str)
url:string rawurldecode(string str)
var:void var_dump(mixed var)
var:string serialize(mixed variable)
var:mixed unserialize(string variable_representation)
swf:void swf_openfile(string name, double xsize, double ysize, double framerate, double r, double g, double b)
swf:void swf_closefile(void)
swf:void swf_labelframe(string name)
swf:void swf_showframe(void)
swf:void swf_setframe(int frame_number)
swf:int swf_getframe(void)
swf:void swf_mulcolor(double r, double g, double b, double a)
swf:void swf_addcolor(double r, double g, double b, double a)
swf:void swf_placeobject(int objid, int depth)
swf:void swf_modifyobject(int depth, int how)
swf:void swf_removeobject(int depth)
swf:int swf_nextid(void)
swf:void swf_startdoaction(void)
swf:void swf_enddoaction(void)
swf:void swf_actiongotoframe(int frame_number)
swf:void swf_actiongeturl(string url, string target)
swf:void swf_actionnextframe(void)
swf:void swf_actionprevframe(void)
swf:void swf_actionplay(void)
swf:void swf_actionstop(void)
swf:void swf_actiontogglequality(void)
swf:void swf_actionwaitforframe(int frame, int skipcount)
swf:void swf_actionsettarget(string target)
swf:void swf_actiongotolabel(string label)
swf:void swf_defineline(int objid, double x1, double y1, double x2, double y2, double width)
swf:void swf_definerect(int objid, double x1, double y1, double x2, double y2, double width)
swf:void swf_definepoly(int obj_id, array coords, int npoints, double width)
swf:void swf_startshape(int objid)
swf:void swf_shapelinesolid(double r, double g, double b, double a, double width)
swf:void swf_shapefilloff(void)
swf:void swf_shapefillsolid(double r, double g, double b, double a)
swf:void swf_shapefillbitmapclip(int bitmapid)
swf:void swf_shapefillbitmaptile(int bitmapid)
swf:void swf_shapemoveto(double x, double y)
swf:void swf_shapelineto(double x, double y)
swf:void swf_shapecurveto(double x1, double y1, double x2, double y2)
swf:void swf_shapecurveto3(double x1, double y1, double x2, double y2, double x3, double y3)
swf:void swf_shapearc(double x, double y, double r, double ang1, double ang2)
swf:void swf_endshape(void)
swf:void swf_definefont(int fontid, string name)
swf:void swf_setfont(int fontid)
swf:void swf_fontsize(double height)
swf:void swf_fontslant(double slant)
swf:void swf_fonttracking(track)
swf:array swf_getfontinfo(void)
swf:void swf_definetext(int objid, string str, int docCenter)
swf:void swf_textwidth(string str)
swf:void swf_definebitmap(int objid, string imgname)
swf:array swf_getbitmapinfo(int bitmapid)
swf:void swf_startsymbol(int objid)
swf:void swf_endsymbol(void)
swf:void swf_startbutton(int objid, int type)
swf:void swf_addbuttonrecord(int state, int objid, int depth)
swf:void swf_oncondition(int transitions)
swf:void swf_endbutton(void)
swf:void swf_viewport(double xmin, double xmax, double ymin, double ymax)
swf:void swf_ortho2(double xmin, double xmax, double ymin, double ymax)
swf:void swf_ortho(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)
swf:void swf_polarview(double dist, double azimuth, double incidence, double twist)
swf:void swf_perspective(double fovy, double aspect, double near, double far)
swf:void swf_lookat(double vx, double vy, double vz, double px, double py, double pz, double twist)
swf:void swf_pushmatrix(void)
swf:void swf_popmatrix(void)
swf:void swf_scale(double x, double y, double z)
swf:void swf_translate(double x, double y, double z)
swf:void swf_rotate(double angle, string axis)
swf:void swf_posround(int doit)
sybase_db:int sybase_connect([string host [, string user [, string password [, string charset]]]])
sybase_db:int sybase_pconnect([string host [, string user [, string password [, string charset]]]])
sybase_db:bool sybase_close([int link_id])
sybase_db:bool sybase_select_db(string database [, int link_id])
sybase_db:int sybase_query(string query [, int link_id])
sybase_db:bool sybase_free_result(int result)
sybase_db:string sybase_get_last_message(void)
sybase_db:int sybase_num_rows(int result)
sybase_db:int sybase_num_fields(int result)
sybase_db:array sybase_fetch_row(int result)
sybase_db:object sybase_fetch_object(int result)
sybase_db:array sybase_fetch_array(int result)
sybase_db:bool sybase_data_seek(int result, int offset)
sybase_db:object sybase_fetch_field(int result [, int offset])
sybase_db:bool sybase_field_seek(int result, int offset)
sybase_db:string sybase_result(int result, int row, mixed field)
sybase_db:void sybase_min_error_severity(int severity)
sybase_db:void sybase_min_message_severity(int severity)
sybase_ct:int sybase_connect([string host [, string user [, string password [, string charset]]]])
sybase_ct:int sybase_pconnect([string host [, string user [, string password [, string charset]]]])
sybase_ct:bool sybase_close([int link_id])
sybase_ct:bool sybase_select_db(string database [, int link_id])
sybase_ct:int sybase_query(string query [, int link_id])
sybase_ct:bool sybase_free_result(int result)
sybase_ct:int sybase_num_rows(int result)
sybase_ct:int sybase_num_fields(int result)
sybase_ct:array sybase_fetch_row(int result)
sybase_ct:object sybase_fetch_object(int result)
sybase_ct:array sybase_fetch_array(int result)
sybase_ct:bool sybase_data_seek(int result, int offset)
sybase_ct:object sybase_fetch_field(int result [, int offset])
sybase_ct:bool sybase_field_seek(int result, int offset)
sybase_ct:string sybase_result(int result, int row, mixed field)
sybase_ct:int sybase_affected_rows([int link_id])
sybase_ct:void sybase_min_client_severity(int severity)
sybase_ct:void sybase_min_server_severity(int severity)
sysvsem:int sem_get(int key [, int max_acquire [, int perm]])
sysvsem:int sem_acquire(int id)
sysvsem:int sem_release(int id)
sysvshm:int shm_attach(int key [, int memsize [, int perm]])
sysvshm:int shm_detach(int shm_identifier)
sysvshm:int shm_remove(int shm_identifier)
sysvshm:int shm_put_var(int shm_identifier, int variable_key, mixed variable)
sysvshm:mixed shm_get_var(int id, int variable_key)
sysvshm:int shm_remove_var(int id, int variable_key)
wddx:string wddx_serialize_value(mixed var [, string comment])
wddx:string wddx_serialize_vars(mixed var_name [, mixed ...])
wddx:int wddx_packet_start([string comment])
wddx:string wddx_packet_end(int packet_id)
wddx:int wddx_add_vars(int packet_id [, mixed var_names [, mixed ...]])
wddx:mixed wddx_deserialize(string packet)
xml:int xml_parser_create(void)
xml:int xml_set_object(int pind, object &obj)
xml:int xml_set_element_handler(int pind, string shdl, string ehdl)
xml:int xml_set_character_data_handler(int pind, string hdl)
xml:int xml_set_processing_instruction_handler(int pind, string hdl)
xml:int xml_set_default_handler(int pind, string hdl)
xml:int xml_set_unparsed_entity_decl_handler(int pind, string hdl)
xml:int xml_set_notation_decl_handler(int pind, string hdl)
xml:int xml_set_external_entity_ref_handler(int pind, string hdl)
xml:int xml_parse(int pind, string data [, int isFinal])
xml:int xml_parse_into_struct(int pind, string data, array &struct, array &index)
xml:int xml_get_error_code(int pind)
xml:string xml_error_string(int code)
xml:int xml_get_current_line_number(int pind)
xml:int xml_get_current_column_number(int pind)
xml:int xml_get_current_byte_index(int pind)
xml:int xml_parser_free(int pind)
xml:int xml_parser_set_option(int pind, int option, mixed value)
xml:int xml_parser_get_option(int pind, int option)
xml:string utf8_encode(string data)
xml:string utf8_decode(string data)
yaz:int yaz_connect(string zurl [, string user [, string group, string pass]])
yaz:int yaz_close(int id)
yaz:int yaz_search(int id, string type, string query)
yaz:int yaz_wait()
yaz:int yaz_errno(int id)
yaz:string yaz_error(int id)
yaz:string yaz_addinfo(int id)
yaz:int yaz_hits(int id)
yaz:string yaz_record(int id, int pos, string type)
yaz:int yaz_syntax(int id, string syntax)
yaz:int yaz_element(int id, string elementsetname)
yaz:int yaz_range(int id, int start, int number)
yp:string yp_get_default_domain(void)
yp:int yp_order(string domain, string map)
yp:string yp_master(string domain, string map)
yp:string yp_match(string domain, string map, string key)
yp:array yp_first(string domain, string map)
yp:array yp_next(string domain, string map, string key)
zlib:array gzfile(string filename [, int use_include_path])
zlib:int gzopen(string filename, string mode [, int use_include_path])
zlib:int gzclose(int zp)
zlib:int gzeof(int zp)
zlib:string gzgets(int zp, int length)
zlib:string gzgetc(int zp)
zlib:string gzgetss(int zp, int length [, string allowable_tags])
zlib:int gzwrite(int zp, string str [, int length])
zlib:int gzputs(int zp, string str [, int length])
zlib:int gzrewind(int zp)
zlib:int gztell(int zp)
zlib:int gzseek(int zp, int offset)
zlib:int readgzfile(string filename [, int use_include_path])
zlib:int gzpassthru(int zp)
zlib:string gzread(int zp, int length)
zlib:string gzcompress(string data [, int level])
zlib:string gzuncompress(string data, int length)
configuration-parser:void parse_ini_file(string filename)
main:void set_time_limit(int seconds)
configuration-parser:void parse_ini_file(string filename)
apache:string apache_note(string note_name [, string note_value])
apache:int virtual(string filename)
apache:array getallheaders(void)
apache:class apache_lookup_uri(string URI)
