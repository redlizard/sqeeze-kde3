dnl =======================================================
dnl FILE: ./admin/configure.in.min
dnl =======================================================

dnl    This file is part of the KDE libraries/packages
dnl    Copyright (C) 2001 Stephan Kulow (coolo@kde.org)
 
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU Library General Public
dnl    License as published by the Free Software Foundation; either
dnl    version 2 of the License, or (at your option) any later version.
 
dnl    This library is distributed in the hope that it will be useful,
dnl    but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    Library General Public License for more details.
 
dnl    You should have received a copy of the GNU Library General Public License
dnl    along with this library; see the file COPYING.LIB.  If not, write to
dnl    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
dnl    Boston, MA 02110-1301, USA.

# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT(acinclude.m4) dnl a source file from your sub dir

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_SYSTEM 
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(kdevelop, 3.5.2) dnl searches for some needed programs

AM_MAINTAINER_MODE

KDE_SET_PREFIX

dnl generate the config header
AM_CONFIG_HEADER(config.h) dnl at the distribution this done

dnl Checks for programs.
AC_CHECK_COMPILERS
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
KDE_PROG_LIBTOOL

dnl for NLS support. Call them in this order!
dnl WITH_NLS is for the po files
AM_KDE_WITH_NLS

KDE_USE_QT(3.3.0)
AC_PATH_KDE
dnl =======================================================
dnl FILE: configure.in.in
dnl =======================================================

#MIN_CONFIG(3.3.0)

dnl PACKAGE set before
KDEV_CHECK_KDE_VERSION
KDE_NEED_FLEX

KDEV_CHECK_DOCBASE
#KDEV_CHECK_SCRIPTING
#KDEV_CHECK_JAVA
#KDEV_CHECK_CSHARP
#KDEV_CHECK_SVN
#KDEV_CHECK_QEDITOR
KDEV_CHECK_BDB
#KDEV_PATH_PYTHONDOCDIR
#KDEV_PATH_PHPDOCDIR
#KDEV_PATH_GNUSTEPDOCDIR
#KDEV_PATH_GTKDOCDIR
KDEV_PATH_QTDOC
KDEV_PATH_KDELIBSDOXY
KDEV_PATH_KDELIBSDOC

AC_CHECK_FUNCS([mkfifo], [HAVE_MKFIFO=1], [HAVE_MKFIFO=0])

dnl  **********
dnl  Check which programming languages support should be compiled
dnl  **********

AC_ARG_ENABLE(ada, AC_HELP_STRING([--disable-ada], [disable programming language support for Ada]), [ada=${enableval}], [ada=yes])
AM_CONDITIONAL(include_ada, test "$ada" = "yes")

AC_ARG_ENABLE(bash, AC_HELP_STRING([--disable-bash], [disable programming language support for bash]), [bash=${enableval}], [bash=yes])
AM_CONDITIONAL(include_bash, test "$bash" = "yes")

AC_ARG_ENABLE(cpp, AC_HELP_STRING([--disable-cpp], [disable programming language support for C and C++]), [cpp=${enableval}], [cpp=yes])
AM_CONDITIONAL(include_cpp, test "$cpp" = "yes")

AC_ARG_ENABLE(fortran, AC_HELP_STRING([--disable-fortran], [disable programming language support for Fortran]), [fortran=${enableval}], [fortran=yes])
AM_CONDITIONAL(include_fortran, test "$fortran" = "yes")

AC_ARG_ENABLE(java, AC_HELP_STRING([--disable-java], [disable programming language support for Java]), [java=${enableval}], [java=yes])
AM_CONDITIONAL(include_java, test "$java" = "yes")

AC_ARG_ENABLE(csharp, AC_HELP_STRING([--disable-csharp], [disable programming language support for C#]), [csharp=${enableval}], [csharp=yes])
AM_CONDITIONAL(include_csharp, test "$csharp" = "yes")

AC_ARG_ENABLE(pascal, AC_HELP_STRING([--disable-pascal], [disable programming language support for Pascal]), [pascal=${enableval}], [pascal=yes])
AM_CONDITIONAL(include_pascal, test "$pascal" = "yes")

AC_ARG_ENABLE(perl, AC_HELP_STRING([--disable-perl], [disable programming language support for perl]), [perl=${enableval}], [perl=yes])
AM_CONDITIONAL(include_perl, test "$perl" = "yes")

AC_ARG_ENABLE(php, AC_HELP_STRING([--disable-php], [disable programming language support for PHP]), [php=${enableval}], [php=yes])
AM_CONDITIONAL(include_php, test "$php" = "yes")

AC_ARG_ENABLE(python, AC_HELP_STRING([--disable-python], [disable programming language support for Python]), [python=${enableval}], [python=yes])
AM_CONDITIONAL(include_python, test "$python" = "yes")

AC_ARG_ENABLE(ruby, AC_HELP_STRING([--disable-ruby], [disable programming language support for ruby]), [ruby=${enableval}], [ruby=yes])
AM_CONDITIONAL(include_ruby, test "$ruby" = "yes")

AC_ARG_ENABLE(sql, AC_HELP_STRING([--disable-sql], [disable programming language support for SQL]), [sql=${enableval}], [sql=yes])
AM_CONDITIONAL(include_sql, test "$sql" = "yes")

dnl  **********
dnl  Check which build tools support should be compiled
dnl  **********

AC_ARG_ENABLE(antproject, AC_HELP_STRING([--disable-antproject], [disable build tool support for ant]), [antproject=${enableval}], [antproject=yes])
AM_CONDITIONAL(include_ant, test "$antproject" = "yes")

AC_ARG_ENABLE(autoproject, AC_HELP_STRING([--disable-autoproject], [disable build tool support for autotools]), [autoproject=${enableval}], [autoproject=yes])
AM_CONDITIONAL(include_autoproject, test "$autoproject" = "yes")

AC_ARG_ENABLE(customproject, AC_HELP_STRING([--disable-customproject], [disable build tool support for custom makefiles]), [customproject=${enableval}], [customproject=yes])
AM_CONDITIONAL(include_customproject, test "$customproject" = "yes")

AC_ARG_ENABLE(scriptproject, AC_HELP_STRING([--disable-scriptproject], [disable build tool support for script]), [scriptproject=${enableval}], [scriptproject=yes])
AM_CONDITIONAL(include_scriptproject, test "$scriptproject" = "yes")

AC_ARG_ENABLE(trollproject, AC_HELP_STRING([--disable-trollproject], [disable build tool support for qmake]), [trollproject=${enableval}], [trollproject=yes])
AM_CONDITIONAL(include_trollproject, test "$trollproject" = "yes")


dnl  **********
dnl  Check which version control systems support should be compiled
dnl  **********

dnl cervisia is currently disabled
dnl AC_ARG_ENABLE(cervisia, AC_HELP_STRING([--disable-cervisia], [disable vcs support for cervisia]), [with_cervisia=${enableval}], [with_cervisia=yes])

AC_ARG_ENABLE(clearcase, AC_HELP_STRING([--disable-clearcase], [disable vcs support for clearcase]), [with_clearcase=${enableval}], [with_clearcase=yes])
AM_CONDITIONAL(include_clearcase, test "$with_clearcase" = "yes")

AC_ARG_ENABLE(cvs, AC_HELP_STRING([--disable-cvs], [disable vcs support for cvs]), [with_cvs=${enableval}], [with_cvs=yes])
AM_CONDITIONAL(include_cvsclient, test "$with_cvs" = "yes")

dnl  This one is automatic and depends is cervisia is installed or not
KDE_CHECK_HEADER(cvsservice_stub.h, [cvsservice_stub_h="found"], [cvsservice_stub_h="none"])
AM_CONDITIONAL(include_cvsservice, test "$cvsservice_stub_h" = "found")

AC_ARG_ENABLE(perforce, AC_HELP_STRING([--disable-perforce], [disable vcs support for perforce]), [with_perforce=${enableval}], [with_perforce=yes])
AM_CONDITIONAL(include_perforce, test "$with_perforce" = "yes")

dnl  **********
dnl  Check which embedded support should be compiled
dnl  **********

AC_ARG_ENABLE(vba, AC_HELP_STRING([--enable-vba], [enable visualboy advance support]), [with_vba=${enableval}], [with_vba=no])
AM_CONDITIONAL(include_vba, test "$with_vba" = "yes")


AC_PATH_PROG(DOT_FOUND, dot, no)
AC_CHECK_PROG(gmake_prog, gmake, gmake, make)
AC_CHECK_PROGS(TAR, gnutar gtar tar, [AM_MISSING_PROG(tar)])
AC_CHECK_PROG(GZIP_COMMAND, gzip, gzip)
AC_DEFINE_UNQUOTED(MAKE_COMMAND, "$gmake_prog", [GNU make command])

CXXFLAGS="$CXXFLAGS $KDE_DEFAULT_CXXFLAGS"
case $host_os in
hpux11*)
    CPPFLAGS="$CPPFLAGS -D_PROTOTYPES"
    ;;
esac

AC_CHECK_FILE([$qt_includes/qassistantclient.h], [],[AC_MSG_ERROR([The qassistantclient.h header from Qt3 is needed to build kdevelop, on some systems this header is in a separate package called qt3-apps-dev])])

KDE_INIT_DOXYGEN([KDevelop], [Version $VERSION])
dnl =======================================================
dnl FILE: ./languages/ada/configure.in.in
dnl =======================================================

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(sstream)
AC_LANG_RESTORE
dnl =======================================================
dnl FILE: ./vcs/subversion/configure.in.in
dnl =======================================================

SVN_SUBDIR=""

AC_ARG_ENABLE(subversion, AC_HELP_STRING([--disable-subversion], [disable vcs support for subversion]), [with_subversion=${enableval}], [with_subversion=check])



if test "x$with_subversion" != xno; then

    APR_CONFIGS="/usr/bin/apr-config /usr/bin/apr-1-config /usr/local/bin/apr-config /usr/local/apr/bin/apr-config"
    SVN_SUBDIR="svn"
    AC_ARG_WITH(apr-config,
                [[  --with-apr-config=FILE    Use the given path to apr-config when determining
                 APR configuration; defaults to "apr-config"]],
                 [
                  if test "$withval" != "yes" -a "$withval" != ""; then
                      APR_CONFIGS=$withval
                  fi
                  ])
    AC_MSG_CHECKING([for APR])
    APR_CONFIG=""
    for VALUE in $APR_CONFIGS ; do
        if test -x "$VALUE"; then
            if $VALUE --cflags > /dev/null; then
                APR_CONFIG="$VALUE"
                break
            fi
        fi
    done
    if test -n "$APR_CONFIG" ; then
        AC_MSG_RESULT([$APR_CONFIG])
        APR_CPPFLAGS="`$APR_CONFIG --cppflags`"
        APR_INCLUDE="`$APR_CONFIG --includes`"
        APR_LIBS="`$APR_CONFIG --link-ld --libs`"
    else
        AC_MSG_RESULT([not found])
        SVN_SUBDIR=
    fi

    dnl
    dnl APR util
    dnl

    APU_CONFIGS="/usr/bin/apu-config /usr/bin/apu-1-config /usr/local/bin/apu-config /usr/local/apu/bin/apu-config"
    AC_ARG_WITH(apu-config,
                [[  --with-apu-config=FILE    Use the given path to apu-config when determining
                 APR util configuration; defaults to "apu-config"]],
                 [
                  if test "$withval" != "yes" -a "$withval" != ""; then
                      APU_CONFIGS=$withval
                  fi
                  ])
    AC_MSG_CHECKING([for APR util])
    APU_CONFIG=""
    for VALUE in $APU_CONFIGS ; do
        if test -x $VALUE
        then
            if $VALUE --includes > /dev/null; then
                APU_CONFIG=$VALUE
                break
            fi
        fi
    done
    if test -n "$APU_CONFIG"; then
        AC_MSG_RESULT([found])
        APR_INCLUDE="$APR_INCLUDE `$APU_CONFIG --includes`"
        APR_LIBS="$APR_LIBS `$APU_CONFIG --link-ld --libs`"
    else
        AC_MSG_RESULT([not found])
        SVN_SUBDIR=
    fi

    dnl Search for subversion libraries
    dnl svn-config was removed at current subversion release.


    SVN_INCLUDES="/usr/local/include /usr/include /usr/include/subversion-1 /usr/local/include/subversion-1"
    AC_ARG_WITH(svn-include,
                [[  --with-svn-include=DIR   Use the given path to the subversion headers.]],
                [
                 if test "$withval" != "yes" -a "$withval" != ""; then
                     SVN_INCLUDES=$withval
                 fi
                 ])
    AC_MSG_CHECKING([for Subversion headers])
    SVN_INCLUDE=""
    for VALUE in $SVN_INCLUDES ; do
        if test -f $VALUE/svn_types.h ; then
            SVN_INCLUDE="-I$VALUE"
            break
        fi
    done
    if test $SVN_INCLUDE ; then
        AC_MSG_RESULT([found])
    else
        AC_MSG_RESULT([not found])
        SVN_SUBDIR=
    fi
    SVN_LIBS="/usr/local/lib /usr/lib /usr/lib64"
    AC_ARG_WITH(svn-lib,
                [[  --with-svn-lib=DIR  Use the given path to the subversion libraries.]],
                [
                 if test "$withval" != "yes" -a "$withval" != ""; then
                     SVN_LIBS=$withval
                 fi
                 ])
    AC_MSG_CHECKING([for Subversion libraries])
    SVN_LIB=""
    for VALUE in $SVN_LIBS ; do
        if ls $VALUE/libsvn_client-1.* 1>/dev/null 2>&1; then
            SVN_LIB="-L$VALUE"
            break
        fi
    done
    if test $SVN_LIB ; then
        AC_MSG_RESULT([found])
    else
        AC_MSG_RESULT([not found])
        SVN_SUBDIR=
    fi
    SVN_LIB="$SVN_LIB $APR_LIBS -lsvn_client-1"
    SVN_INCLUDE="$SVN_INCLUDE $APR_INCLUDE"
    SVN_CPPFLAGS="$APR_CPPFLAGS $SVN_CPPFLAGS"

    if test "x$with_subversion" != xcheck && test -z "$SVN_SUBDIR"; then
        AC_MSG_ERROR([--enable-subversion was given, but test for subversion failed. Please install subversion headers and libraries and its dependencies (APR and APU utils)])
    fi
fi

AM_CONDITIONAL(include_subversion, test -n "$SVN_SUBDIR")

AC_SUBST(SVN_INCLUDE)
AC_SUBST(SVN_LIB)
AC_SUBST(SVN_CPPFLAGS)
AM_CONDITIONAL(include_kioslave_svn, test -n "$SVN_SUBDIR")
KDE_CREATE_SUBDIRSLIST
AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ buildtools/Makefile ])
AC_CONFIG_FILES([ buildtools/ada/Makefile ])
AC_CONFIG_FILES([ buildtools/ant/Makefile ])
AC_CONFIG_FILES([ buildtools/autotools/Makefile ])
AC_CONFIG_FILES([ buildtools/custommakefiles/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/base/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/parsers/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/parsers/autotools/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/parsers/autotools/tests/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/parsers/qmake/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/parsers/qmake/tests/Makefile ])
AC_CONFIG_FILES([ buildtools/lib/widgets/Makefile ])
AC_CONFIG_FILES([ buildtools/pascal/Makefile ])
AC_CONFIG_FILES([ buildtools/qmake/Makefile ])
AC_CONFIG_FILES([ buildtools/script/Makefile ])
AC_CONFIG_FILES([ doc/Makefile ])
AC_CONFIG_FILES([ doc/extras/Makefile ])
AC_CONFIG_FILES([ doc/extras/w3c/Makefile ])
AC_CONFIG_FILES([ doc/kde_app_devel/Makefile ])
AC_CONFIG_FILES([ doc/kdearch/Makefile ])
AC_CONFIG_FILES([ doc/kdevelop/Makefile ])
AC_CONFIG_FILES([ doc/std/Makefile ])
AC_CONFIG_FILES([ doc/tools/Makefile ])
AC_CONFIG_FILES([ editors/Makefile ])
AC_CONFIG_FILES([ editors/editor-chooser/Makefile ])
AC_CONFIG_FILES([ embedded/Makefile ])
AC_CONFIG_FILES([ embedded/visualboyadvance/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/designer/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/designer/pics/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/plugins/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/shared/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/src/Makefile ])
AC_CONFIG_FILES([ kdevdesigner/uilib/Makefile ])
AC_CONFIG_FILES([ languages/Makefile ])
AC_CONFIG_FILES([ languages/ada/Makefile ])
AC_CONFIG_FILES([ languages/ada/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/ada/app_templates/adahello/Makefile ])
AC_CONFIG_FILES([ languages/ada/doc/Makefile ])
AC_CONFIG_FILES([ languages/ada/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/bash/Makefile ])
AC_CONFIG_FILES([ languages/bash/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/bash/app_templates/bashhello/Makefile ])
AC_CONFIG_FILES([ languages/bash/doc/Makefile ])
AC_CONFIG_FILES([ languages/cpp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/automakeempty/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/chello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/chello_gba/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/clanlib/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cmakelibc/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cmakelibcpp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cmakeqt3app/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cmakesimple/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cmakesimplec/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cppcurseshello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cpphello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/cppsdlhello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/dcopservice/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/generichello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/gnome2mmapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/gtk2mmapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kateplugin/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kateplugin2/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kcmodule/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kconfig35/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kde4app/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kdedcop/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kdevlang/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kdevpart/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kdevpart2/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kfileplugin/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/khello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/khello2/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kicker/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kioslave/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kmake/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kmod/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kofficepart/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/konqnavpanel/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kpartapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kpartplugin/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kscons_kmdi/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kscons_kxt/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kscreensaver/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/kxt/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/makefileempty/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/noatunui/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/noatunvisual/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/opieapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/opieapplet/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/opieinput/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/opiemenu/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/opienet/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/opietoday/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/prc-tool/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qmakeapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qmakeempty/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qmakesimple/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qt4hello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qt4makeapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qtopia4app/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/qtopiaapp/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/win32gui/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/win32hello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/app_templates/wxhello/Makefile ])
AC_CONFIG_FILES([ languages/cpp/compiler/Makefile ])
AC_CONFIG_FILES([ languages/cpp/compiler/gccoptions/Makefile ])
AC_CONFIG_FILES([ languages/cpp/debugger/Makefile ])
AC_CONFIG_FILES([ languages/cpp/debugger/mi/Makefile ])
AC_CONFIG_FILES([ languages/cpp/doc/Makefile ])
AC_CONFIG_FILES([ languages/cpp/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/cpp/newclass_templates/Makefile ])
AC_CONFIG_FILES([ languages/cpp/pcsimporter/Makefile ])
AC_CONFIG_FILES([ languages/cpp/pcsimporter/customimporter/Makefile ])
AC_CONFIG_FILES([ languages/cpp/pcsimporter/kdelibsimporter/Makefile ])
AC_CONFIG_FILES([ languages/cpp/pcsimporter/qt4importer/Makefile ])
AC_CONFIG_FILES([ languages/cpp/pcsimporter/qtimporter/Makefile ])
AC_CONFIG_FILES([ languages/cpp/subclassing_template/Makefile ])
AC_CONFIG_FILES([ languages/cpp/templates/Makefile ])
AC_CONFIG_FILES([ languages/csharp/Makefile ])
AC_CONFIG_FILES([ languages/csharp/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/csharp/doc/Makefile ])
AC_CONFIG_FILES([ languages/csharp/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/fortran/Makefile ])
AC_CONFIG_FILES([ languages/fortran/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/fortran/app_templates/fortranhello/Makefile ])
AC_CONFIG_FILES([ languages/fortran/compiler/Makefile ])
AC_CONFIG_FILES([ languages/fortran/compiler/pgioptions/Makefile ])
AC_CONFIG_FILES([ languages/fortran/doc/Makefile ])
AC_CONFIG_FILES([ languages/fortran/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/java/Makefile ])
AC_CONFIG_FILES([ languages/java/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/java/app_templates/javahello/Makefile ])
AC_CONFIG_FILES([ languages/java/app_templates/kappjava/Makefile ])
AC_CONFIG_FILES([ languages/java/app_templates/superwaba/Makefile ])
AC_CONFIG_FILES([ languages/java/doc/Makefile ])
AC_CONFIG_FILES([ languages/java/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/java/newclass_templates/Makefile ])
AC_CONFIG_FILES([ languages/kjssupport/Makefile ])
AC_CONFIG_FILES([ languages/kjssupport/subclassing_template/Makefile ])
AC_CONFIG_FILES([ languages/kjssupport/template/Makefile ])
AC_CONFIG_FILES([ languages/lib/Makefile ])
AC_CONFIG_FILES([ languages/lib/debugger/Makefile ])
AC_CONFIG_FILES([ languages/lib/designer_integration/Makefile ])
AC_CONFIG_FILES([ languages/lib/interfaces/Makefile ])
AC_CONFIG_FILES([ languages/pascal/Makefile ])
AC_CONFIG_FILES([ languages/pascal/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/pascal/app_templates/fpcgtk/Makefile ])
AC_CONFIG_FILES([ languages/pascal/app_templates/fpchello/Makefile ])
AC_CONFIG_FILES([ languages/pascal/app_templates/fpcsharedlib/Makefile ])
AC_CONFIG_FILES([ languages/pascal/app_templates/pascalhello/Makefile ])
AC_CONFIG_FILES([ languages/pascal/compiler/Makefile ])
AC_CONFIG_FILES([ languages/pascal/compiler/dccoptions/Makefile ])
AC_CONFIG_FILES([ languages/pascal/compiler/fpcoptions/Makefile ])
AC_CONFIG_FILES([ languages/pascal/doc/Makefile ])
AC_CONFIG_FILES([ languages/pascal/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/perl/Makefile ])
AC_CONFIG_FILES([ languages/perl/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/perl/app_templates/perlhello/Makefile ])
AC_CONFIG_FILES([ languages/perl/doc/Makefile ])
AC_CONFIG_FILES([ languages/perl/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/php/Makefile ])
AC_CONFIG_FILES([ languages/php/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/php/app_templates/phphello/Makefile ])
AC_CONFIG_FILES([ languages/php/data/Makefile ])
AC_CONFIG_FILES([ languages/php/doc/Makefile ])
AC_CONFIG_FILES([ languages/php/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/python/Makefile ])
AC_CONFIG_FILES([ languages/python/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/python/app_templates/pyqt/Makefile ])
AC_CONFIG_FILES([ languages/python/app_templates/pythonhello/Makefile ])
AC_CONFIG_FILES([ languages/python/app_templates/pytk/Makefile ])
AC_CONFIG_FILES([ languages/python/doc/Makefile ])
AC_CONFIG_FILES([ languages/python/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/ruby/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/dcopservice/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/kapp/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/kxt/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/qtruby/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/qtruby4app/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/qtrubyapp/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/rails/Makefile ])
AC_CONFIG_FILES([ languages/ruby/app_templates/rubyhello/Makefile ])
AC_CONFIG_FILES([ languages/ruby/debugger/Makefile ])
AC_CONFIG_FILES([ languages/ruby/doc/Makefile ])
AC_CONFIG_FILES([ languages/ruby/file_templates/Makefile ])
AC_CONFIG_FILES([ languages/sql/Makefile ])
AC_CONFIG_FILES([ languages/sql/app_templates/Makefile ])
AC_CONFIG_FILES([ languages/sql/app_templates/sqlsimple/Makefile ])
AC_CONFIG_FILES([ languages/sql/doc/Makefile ])
AC_CONFIG_FILES([ lib/Makefile ])
AC_CONFIG_FILES([ lib/antlr/Makefile ])
AC_CONFIG_FILES([ lib/antlr/antlr/Makefile ])
AC_CONFIG_FILES([ lib/antlr/src/Makefile ])
AC_CONFIG_FILES([ lib/astyle/Makefile ])
AC_CONFIG_FILES([ lib/catalog/Makefile ])
AC_CONFIG_FILES([ lib/cppparser/Makefile ])
AC_CONFIG_FILES([ lib/interfaces/Makefile ])
AC_CONFIG_FILES([ lib/interfaces/extensions/Makefile ])
AC_CONFIG_FILES([ lib/interfaces/extensions/dcop/Makefile ])
AC_CONFIG_FILES([ lib/interfaces/external/Makefile ])
AC_CONFIG_FILES([ lib/interfaces/extras/Makefile ])
AC_CONFIG_FILES([ lib/util/Makefile ])
AC_CONFIG_FILES([ lib/widgets/Makefile ])
AC_CONFIG_FILES([ lib/widgets/propeditor/Makefile ])
AC_CONFIG_FILES([ mimetypes/Makefile ])
AC_CONFIG_FILES([ parts/Makefile ])
AC_CONFIG_FILES([ parts/abbrev/Makefile ])
AC_CONFIG_FILES([ parts/appwizard/Makefile ])
AC_CONFIG_FILES([ parts/appwizard/common/Makefile ])
AC_CONFIG_FILES([ parts/appwizard/imports/Makefile ])
AC_CONFIG_FILES([ parts/appwizard/licenses/Makefile ])
AC_CONFIG_FILES([ parts/astyle/Makefile ])
AC_CONFIG_FILES([ parts/bookmarks/Makefile ])
AC_CONFIG_FILES([ parts/classview/Makefile ])
AC_CONFIG_FILES([ parts/ctags2/Makefile ])
AC_CONFIG_FILES([ parts/diff/Makefile ])
AC_CONFIG_FILES([ parts/distpart/Makefile ])
AC_CONFIG_FILES([ parts/documentation/Makefile ])
AC_CONFIG_FILES([ parts/documentation/data/Makefile ])
AC_CONFIG_FILES([ parts/documentation/interfaces/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/chm/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/custom/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/devhelp/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/djvu/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/doxygen/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/kdevtoc/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/pdb/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/pdf/Makefile ])
AC_CONFIG_FILES([ parts/documentation/plugins/qt/Makefile ])
AC_CONFIG_FILES([ parts/documentation/protocols/Makefile ])
AC_CONFIG_FILES([ parts/documentation/protocols/chm/Makefile ])
AC_CONFIG_FILES([ parts/documentation/tools/Makefile ])
AC_CONFIG_FILES([ parts/documentation/tools/htdig/Makefile ])
AC_CONFIG_FILES([ parts/doxygen/Makefile ])
AC_CONFIG_FILES([ parts/filecreate/Makefile ])
AC_CONFIG_FILES([ parts/filecreate/file-templates/Makefile ])
AC_CONFIG_FILES([ parts/filelist/Makefile ])
AC_CONFIG_FILES([ parts/fileselector/Makefile ])
AC_CONFIG_FILES([ parts/fileview/Makefile ])
AC_CONFIG_FILES([ parts/filter/Makefile ])
AC_CONFIG_FILES([ parts/fullscreen/Makefile ])
AC_CONFIG_FILES([ parts/grepview/Makefile ])
AC_CONFIG_FILES([ parts/konsole/Makefile ])
AC_CONFIG_FILES([ parts/openwith/Makefile ])
AC_CONFIG_FILES([ parts/outputviews/Makefile ])
AC_CONFIG_FILES([ parts/partexplorer/Makefile ])
AC_CONFIG_FILES([ parts/quickopen/Makefile ])
AC_CONFIG_FILES([ parts/regexptest/Makefile ])
AC_CONFIG_FILES([ parts/replace/Makefile ])
AC_CONFIG_FILES([ parts/scripting/Makefile ])
AC_CONFIG_FILES([ parts/snippet/Makefile ])
AC_CONFIG_FILES([ parts/texttools/Makefile ])
AC_CONFIG_FILES([ parts/tipofday/Makefile ])
AC_CONFIG_FILES([ parts/tools/Makefile ])
AC_CONFIG_FILES([ parts/uimode/Makefile ])
AC_CONFIG_FILES([ parts/valgrind/Makefile ])
AC_CONFIG_FILES([ parts/vcsmanager/Makefile ])
AC_CONFIG_FILES([ pics/Makefile ])
AC_CONFIG_FILES([ pics/mini/Makefile ])
AC_CONFIG_FILES([ pics/misc/Makefile ])
AC_CONFIG_FILES([ pics/toolbar/Makefile ])
AC_CONFIG_FILES([ src/Makefile ])
AC_CONFIG_FILES([ src/kconf_update/Makefile ])
AC_CONFIG_FILES([ src/newui/Makefile ])
AC_CONFIG_FILES([ src/profileengine/Makefile ])
AC_CONFIG_FILES([ src/profileengine/editor/Makefile ])
AC_CONFIG_FILES([ src/profileengine/lib/Makefile ])
AC_CONFIG_FILES([ src/profiles/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/AdaIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/CandCppIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/CandCppIDE/CIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/CandCppIDE/CppIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/CandCppIDE/CppIDE/KDECppIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/FortranIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/HaskellIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/JavaIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/CompiledLanguageIDE/PascalIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/DatabaseIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/ScriptingLanguageIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/ScriptingLanguageIDE/PHPIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/ScriptingLanguageIDE/PerlIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/ScriptingLanguageIDE/PythonIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/ScriptingLanguageIDE/RubyIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/IDE/ScriptingLanguageIDE/ShellIDE/Makefile ])
AC_CONFIG_FILES([ src/profiles/KDevAssistant/Makefile ])
AC_CONFIG_FILES([ vcs/Makefile ])
AC_CONFIG_FILES([ vcs/clearcase/Makefile ])
AC_CONFIG_FILES([ vcs/clearcase/integrator/Makefile ])
AC_CONFIG_FILES([ vcs/cvsservice/Makefile ])
AC_CONFIG_FILES([ vcs/cvsservice/integrator/Makefile ])
AC_CONFIG_FILES([ vcs/perforce/Makefile ])
AC_CONFIG_FILES([ vcs/perforce/integrator/Makefile ])
AC_CONFIG_FILES([ vcs/subversion/Makefile ])
AC_CONFIG_FILES([ vcs/subversion/integrator/Makefile ])
AC_OUTPUT
if test "x$with_subversion" = xcheck && test -z "$SVN_SUBDIR"; then
  echo ""
  echo "You're missing Subversion libraries (1.x)"
  echo "KDE will not be able to browse Subversion repositories without it,"
  echo "consider installing it."
  echo "Look at kioslave/svn/README for more information"
  echo ""
  all_tests=bad
fi
if test "$DOT_FOUND" = "no"; then
  echo ""
  echo "You're missing the dot program."
  echo "It is still possible to run and use KDevelop without it, but you will "
  echo "not be able to use the new graphical classbrowser. In order to get "
  echo "a dot copy, go to www.graphviz.org and download the graphviz package."
fi

if test -z "$kdelibs_doxydir"; then
  echo ""
  echo "You have no kdelibs documentation generated by Doxygen installed."
  echo "You should install Doxygen from www.doxygen.org, reconfigure"
  echo "and rebuild the kdelibs sources. You should 'make apidox' and"
  echo "'make install' in your kdelibs build dir, and then rerun this"
  echo "configure script."
fi

if test -n "$VCSCOMPAT" -a -z "$SVN_SUBDIR"; then
  echo ""
  echo "You're missing Subversion libraries (1.x)"
  echo "KDevelop subversion support will not work without it,"
  echo "consider installing it."
  echo ""
fi
# Check if KDE_SET_PREFIX was called, and --prefix was passed to configure
if test -n "$kde_libs_prefix" -a -n "$given_prefix"; then
  # And if so, warn when they don't match
  if test "$kde_libs_prefix" != "$given_prefix"; then
    # And if kde doesn't know about the prefix yet
    echo ":"`kde-config --path exe`":" | grep ":$given_prefix/bin/:" 2>&1 >/dev/null
    if test $? -ne 0; then
      echo ""
      echo "Warning: you chose to install this package in $given_prefix,"
      echo "but KDE was found in $kde_libs_prefix."
      echo "For this to work, you will need to tell KDE about the new prefix, by ensuring"
      echo "that KDEDIRS contains it, e.g. export KDEDIRS=$given_prefix:$kde_libs_prefix"
      echo "Then restart KDE."
      echo ""
    fi
  fi
fi

if test x$GXX = "xyes" -a x$kde_have_gcc_visibility = "xyes" -a x$kde_cv_val_qt_gcc_visibility_patched = "xno"; then
  echo ""
  echo "Your GCC supports symbol visibility, but the patch for Qt supporting visibility"
  echo "was not included. Therefore, GCC symbol visibility support remains disabled."
  echo ""
  echo "For better performance, consider including the Qt visibility supporting patch"
  echo "located at:"
  echo ""
  echo "http://bugs.kde.org/show_bug.cgi?id=109386"
  echo ""
  echo "and recompile all of Qt and KDE. Note, this is entirely optional and"
  echo "everything will continue to work just fine without it."
  echo ""
fi

if test "$all_tests" = "bad"; then
  if test ! "$cache_file" = "/dev/null"; then
    echo ""
    echo "Please remove the file $cache_file after changing your setup"
    echo "so that configure will find the changes next time."
    echo ""
  fi
else
  echo ""
  echo "Good - your configure finished. Start make now"
  echo ""
fi
