//
// C++ Implementation: pixmaps
//
// Author: Remi Villatel <maxilys@tele2.fr>, (C) 2006
//
// Copyright: See COPYING file that comes with this distribution
//
//
#include "pixmaps.h"
#include "serenityhandler.h"

#include <kdecoration.h>

#include <qapplication.h>
#include <qimage.h>
#include <qpainter.h>
#include <qpixmap.h>
#include <qwidget.h>

// Static declarations for linking.

QPixmap* Pixmaps::active_help_normal = 0;
QPixmap* Pixmaps::active_max_normal = 0;
QPixmap* Pixmaps::active_min_normal = 0;
QPixmap* Pixmaps::active_close_normal = 0;
QPixmap* Pixmaps::active_sticky_normal = 0;
QPixmap* Pixmaps::active_above_normal = 0;
QPixmap* Pixmaps::active_below_normal = 0;
QPixmap* Pixmaps::active_menu_normal = 0;

QPixmap* Pixmaps::active_help_hover = 0;
QPixmap* Pixmaps::active_max_hover = 0;
QPixmap* Pixmaps::active_min_hover = 0;
QPixmap* Pixmaps::active_close_hover = 0;
QPixmap* Pixmaps::active_sticky_hover = 0;
QPixmap* Pixmaps::active_above_hover = 0;
QPixmap* Pixmaps::active_below_hover = 0;
QPixmap* Pixmaps::active_menu_hover = 0;

QPixmap* Pixmaps::active_help_sunken = 0;
QPixmap* Pixmaps::active_max_sunken = 0;
QPixmap* Pixmaps::active_min_sunken = 0;
QPixmap* Pixmaps::active_close_sunken = 0;
QPixmap* Pixmaps::active_sticky_sunken = 0;
QPixmap* Pixmaps::active_above_sunken = 0;
QPixmap* Pixmaps::active_below_sunken = 0;
QPixmap* Pixmaps::active_menu_sunken = 0;

QPixmap* Pixmaps::inactive_help_normal = 0;
QPixmap* Pixmaps::inactive_max_normal = 0;
QPixmap* Pixmaps::inactive_min_normal = 0;
QPixmap* Pixmaps::inactive_close_normal = 0;
QPixmap* Pixmaps::inactive_sticky_normal = 0;
QPixmap* Pixmaps::inactive_above_normal = 0;
QPixmap* Pixmaps::inactive_below_normal = 0;
QPixmap* Pixmaps::inactive_menu_normal = 0;

QPixmap* Pixmaps::inactive_help_hover = 0;
QPixmap* Pixmaps::inactive_max_hover = 0;
QPixmap* Pixmaps::inactive_min_hover = 0;
QPixmap* Pixmaps::inactive_close_hover = 0;
QPixmap* Pixmaps::inactive_sticky_hover = 0;
QPixmap* Pixmaps::inactive_above_hover = 0;
QPixmap* Pixmaps::inactive_below_hover = 0;
QPixmap* Pixmaps::inactive_menu_hover = 0;

QPixmap* Pixmaps::inactive_help_sunken = 0;
QPixmap* Pixmaps::inactive_max_sunken = 0;
QPixmap* Pixmaps::inactive_min_sunken = 0;
QPixmap* Pixmaps::inactive_close_sunken = 0;
QPixmap* Pixmaps::inactive_sticky_sunken = 0;
QPixmap* Pixmaps::inactive_above_sunken = 0;
QPixmap* Pixmaps::inactive_below_sunken = 0;
QPixmap* Pixmaps::inactive_menu_sunken = 0;

bool Pixmaps::pixmapsCreated = false;

static int serene_help[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x80,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x80,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_max[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0xC0,0xFF,0xFF,0xC0,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0xC0,0xFF,0xFF,0xC0,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_min[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_close[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0x40,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,
	0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,
	0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_sticky[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0xC0,0x80,0x80,0xC0,0xFF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,0x00,
	0x00,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0x00,
	0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0xC0,0x80,0x80,0xC0,0xFF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_above[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,
	0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0x40,0x80,0xFF,0xFF,0x80,0x40,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x40,0xFF,0xFF,0x40,0x00,0x80,0xFF,0xFF,0x80,0x00,0x40,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_below[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x40,0xFF,0xFF,0x40,0x00,0x80,0xFF,0xFF,0x80,0x00,0x40,0xFF,0xFF,0x40,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0x40,0x80,0xFF,0xFF,0x80,0x40,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0x00,0x00,
	0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int serene_menu[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0x00,0xC0,0xFF,0x40,0x00,0x00,0x40,0xFF,0xC0,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,0xFF,0xFF,0x80,0x00,0x40,0xFF,0xFF,0xC0,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x80,0x40,0xFF,0xFF,0xC0,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0xFF,0x40,0x00,0xFF,0xFF,0xC0,0xFF,0xFF,0xC0,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xC0,0xFF,0xFF,0xC0,0x00,0x00,0x00,
	0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0x80,0x40,0xFF,0xFF,0xC0,0x00,0x00,
	0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0x80,0x00,0x40,0xFF,0xFF,0xC0,0x00,
	0x00,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xC0,0xFF,0x40,0x00,0x00,0x40,0xFF,0xC0,0x00,
	0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0xC0,0x80,0x80,0xC0,0xFF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

static int trinar_help[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0xFF,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_max[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_min[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_close[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_sticky[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x68,0x68,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,
	0x00,0xE7,0xFF,0xFF,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0xFF,0xFF,0xE7,0x00,
	0x00,0xE7,0xFF,0xFF,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0xFF,0xFF,0xE7,0x00,
	0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0x68,0x68,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_above[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_below[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int trinar_menu[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0x00,
	0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xE7,0xE7,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

static int powder_help[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xBF,0xFF,0xFF,0xBF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xBF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_max[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x28,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0xA0,0xA0,0xA0,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x78,0xA0,0xA0,0xA0,0xA0,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_min[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x78,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x78,0x00,
	0x00,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0xA0,0x00,
	0x00,0xA0,0xA0,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0xA0,0xA0,0x00,
	0x00,0xA0,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xA0,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xFF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xA0,0xA0,0x00,
	0x00,0xFF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xFF,0x00,0x00,0x00,0x28,0xA0,0xA0,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xA0,0xA0,0xA0,0xA0,0xA0,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x28,0xA0,0xA0,0xA0,0xA0,0x78,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_close[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,
	0x00,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,
	0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xA8,0xA8,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xB8,0xB8,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xA8,0xB8,0xA0,0xA0,0xB8,0xA8,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xA8,0xB8,0xA0,0xA0,0xB8,0xA8,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xB8,0xB8,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xA8,0xA8,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,
	0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_sticky[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x28,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x28,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x40,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x28,0xFF,0xFF,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xFF,0xFF,0x28,0x00,
	0x00,0x80,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x80,0x00,
	0x00,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,
	0x00,0x80,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x80,0x00,
	0x00,0x28,0xFF,0xFF,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xFF,0xFF,0x28,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x40,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x28,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x28,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_above[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xD0,0xD0,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x50,0x50,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0xFF,0xD0,0x00,0x00,0xD0,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xFF,0xFF,0x50,0x00,0x00,0x50,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xFF,0xD0,0x00,0x00,0x00,0x00,0xD0,0xFF,0x80,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0x50,0x00,0x00,0x00,0x00,0x50,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0xFF,0x80,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0xFF,0xFF,0x00,0x00,
	0x00,0x80,0xFF,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0xFF,0x80,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_below[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
	0x00,0x80,0xFF,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0xFF,0x80,0x00,
	0x00,0x00,0xFF,0xFF,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0x50,0x00,0x00,0x00,0x00,0x50,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xFF,0xD0,0x00,0x00,0x00,0x00,0xD0,0xFF,0x80,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xFF,0xFF,0x50,0x00,0x00,0x50,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0xFF,0xD0,0x00,0x00,0xD0,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x50,0x50,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xD0,0xD0,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int powder_menu[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xBF,0xFF,0x80,0x00,
	0x00,0x00,0x00,0x58,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xBF,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x58,0xB0,0x84,0xB0,0x00,0xFF,0xFF,0x00,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x84,0xB0,0x84,0x00,0xFF,0xFF,0xBF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0xB0,0x84,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x58,0xB0,0x2C,0x00,0x00,0xFF,0xFF,0xBF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x84,0xB0,0xB0,0x00,0x00,0x00,0xFF,0xFF,0x00,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x84,0xB0,0xB0,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xBF,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x58,0xB0,0x2C,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0xBF,0xFF,0x80,0x00,
	0x00,0x00,0x00,0xB0,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x2C,0x00,0x00,0x00,
	0x00,0x00,0x00,0x84,0xB0,0x84,0x2C,0x00,0x00,0x2C,0x84,0xB0,0x84,0x00,0x00,0x00,
	0x00,0x00,0x58,0xB0,0x84,0xB0,0xB0,0xB0,0xB0,0xB0,0xB0,0x84,0xB0,0x58,0x00,0x00,
	0x00,0x00,0x00,0x58,0x00,0x00,0x58,0xB0,0xB0,0x58,0x00,0x00,0x58,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

static int porcelain_help[] = {
	0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x80,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0x80,
	0x80,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x00,0x00,0x40,0x80,0x80,0x80,0x80,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x00,0x00,0x00,0x00,0x80,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x00,0x00,0x00,0x00,0x80,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0x80,
	0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xBF,0x80,0x80,0x80,0x40,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0xFF,0x40,0x00,0x00,0x40,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0xFF,0x40,0x00,0x00,0x40,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00
};
static int porcelain_max[] = {
	0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x40,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0x40,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,
	0x80,0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x40,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0x40,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00
};
static int porcelain_min[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x40,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x40,0x00,
	0x40,0xFF,0xBF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xBF,0xFF,0x40,
	0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0x80,
	0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,0x00
};
static int porcelain_close[] = {
	0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xBF,0x00,
	0x40,0xFF,0x40,0x40,0xBF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xBF,0x40,0x40,0xFF,0x40,
	0x80,0xFF,0x40,0x00,0x00,0xBF,0xFF,0x40,0x40,0xFF,0xBF,0x00,0x00,0x40,0xFF,0x80,
	0x00,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,
	0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,
	0x00,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0x00,
	0x80,0xFF,0x40,0x00,0x00,0xBF,0xFF,0x40,0x40,0xFF,0xBF,0x00,0x00,0x40,0xFF,0x80,
	0x40,0xFF,0x40,0x40,0xBF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xBF,0x40,0x40,0xFF,0x40,
	0x00,0xBF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00,0x00
};
static int porcelain_sticky[] = {
	0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x40,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,
	0x00,0xBF,0xFF,0x40,0x00,0x40,0xBF,0xFF,0xFF,0xBF,0x40,0x00,0x40,0xFF,0xBF,0x00,
	0x40,0xFF,0xBF,0x00,0x40,0xFF,0xFF,0x80,0x80,0xFF,0xFF,0x40,0x00,0xBF,0xFF,0x40,
	0x80,0xFF,0x40,0x00,0xBF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xBF,0x00,0x40,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0xFF,0x80,0x00,0x00,0x00,0x00,0x80,0xFF,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x00,0x00,0xFF,0x80,0x00,0x00,0x00,0x00,0x80,0xFF,0x00,0x00,0xFF,0x80,
	0x80,0xFF,0x40,0x00,0xBF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xBF,0x00,0x40,0xFF,0x80,
	0x40,0xFF,0xBF,0x00,0x40,0xFF,0xFF,0x80,0x80,0xFF,0xFF,0x40,0x00,0xBF,0xFF,0x40,
	0x00,0xBF,0xFF,0x40,0x00,0x40,0xBF,0xFF,0xFF,0xBF,0x40,0x00,0x40,0xFF,0xBF,0x00,
	0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x40,0xBF,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0x00,0x00,0x00
};
static int porcelain_above[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xBF,0xBF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0xFF,0x80,0x00,0x00,0x80,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x40,0x40,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xFF,0x80,0x00,0xBF,0xBF,0x00,0x80,0xFF,0x80,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0x00,0x40,0xFF,0xFF,0x40,0x00,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0x80,0x00,0xBF,0x80,0x80,0xBF,0x00,0x80,0xFF,0x80,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0x00,0x40,0xFF,0x00,0x00,0xFF,0x40,0x00,0xFF,0xFF,0x00,0x00,
	0x00,0x80,0xFF,0x80,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x80,0xFF,0x80,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0xFF,0xFF,0x00,
	0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,
	0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,
	0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00
};
static int porcelain_below[] = {
	0x00,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x00,
	0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,
	0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,
	0x00,0xFF,0xFF,0x00,0x00,0x40,0x80,0x80,0x80,0x80,0x40,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0x80,0xFF,0x80,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,0x80,0xFF,0x80,0x00,
	0x00,0x00,0xFF,0xFF,0x00,0x40,0xFF,0x00,0x00,0xFF,0x40,0x00,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x80,0xFF,0x80,0x00,0xBF,0x80,0x80,0xBF,0x00,0x80,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0x00,0x40,0xFF,0xFF,0x40,0x00,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xFF,0x80,0x00,0xBF,0xBF,0x00,0x80,0xFF,0x80,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x40,0x40,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x80,0xFF,0x80,0x00,0x00,0x80,0xFF,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xBF,0xBF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int porcelain_menu[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00,0x00,
	0x00,0xBF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xBF,0x00,
	0x40,0xFF,0x40,0x40,0xBF,0xFF,0x40,0x00,0x00,0x40,0xFF,0xBF,0x40,0x40,0xFF,0x40,
	0x80,0xFF,0x40,0x00,0x00,0xBF,0xFF,0x40,0x40,0xFF,0xBF,0x00,0x00,0x40,0xFF,0x80,
	0x00,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0x00,
	0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0xBF,0xBF,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,
	0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xBF,0x00,0x00,0xBF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xBF,0xBF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

static int classic_help[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0xFF,0xFF,0xBF,0x40,0x00,0x00,0x40,0xBF,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x80,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x40,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xBF,0xFF,0xFF,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xBF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_max[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0x80,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_min[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,
	0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
	0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_close[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xBF,0xDF,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xDF,0xBF,0x00,0x00,
	0x00,0x00,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x00,0x00,0x20,0xDF,0xFF,0xDF,0x00,0x00,
	0x00,0x00,0x20,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x20,0xDF,0xFF,0xDF,0x20,0x00,0x00,
	0x00,0x00,0x00,0x20,0xDF,0xFF,0xDF,0x20,0x20,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x20,0xDF,0xFF,0xDF,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x20,0xDF,0xFF,0xFF,0xDF,0x20,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x20,0xDF,0xFF,0xFF,0xDF,0x20,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x20,0xDF,0xFF,0xDF,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x20,0xDF,0xFF,0xDF,0x20,0x20,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x00,
	0x00,0x00,0x20,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x20,0xDF,0xFF,0xDF,0x20,0x00,0x00,
	0x00,0x00,0xDF,0xFF,0xDF,0x20,0x00,0x00,0x00,0x00,0x20,0xDF,0xFF,0xDF,0x00,0x00,
	0x00,0x00,0xBF,0xDF,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xDF,0xBF,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_sticky[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xDF,0xFF,0xFF,0xDF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xA0,0x20,0x00,0x00,0x20,0xA0,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,0x00,
	0x00,0x80,0xFF,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xFF,0x80,0x00,
	0x00,0xDF,0xFF,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xFF,0xDF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,
	0x00,0xDF,0xFF,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xFF,0xDF,0x00,
	0x00,0x80,0xFF,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xFF,0x80,0x00,
	0x00,0x00,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0xA0,0x20,0x00,0x00,0x20,0xA0,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xDF,0xFF,0xFF,0xDF,0x80,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_above[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,0x00,0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x40,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x40,0x00,
	0x00,0x40,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x40,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_below[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x40,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x40,0x00,
	0x00,0x40,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x40,0x00,
	0x00,0x00,0x40,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,
	0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,0x00,0x00,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x80,0x80,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
static int classic_menu[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0xBF,0xBF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0xBF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
	0x00,0xFF,0xFF,0xFF,0xBF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
	0x00,0xFF,0xFF,0xFF,0xBF,0x00,0xFF,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0xFF,0x00,
	0x00,0xFF,0xFF,0xBF,0x00,0x00,0xFF,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0xFF,0x00,
	0x00,0xBF,0xBF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0xFF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

void Pixmaps::createPixmaps()
{
	if (pixmapsCreated)
		return;

	QPalette pal = QApplication::palette();
	SerenityHandler::set_ground(pal.color(QPalette::Active, QColorGroup::Background));
	SerenityHandler::set_pen(pal.color(QPalette::Active, QColorGroup::Foreground));
	SerenityHandler::set_hilite(pal.color(QPalette::Active, QColorGroup::Highlight));

	static int* alias_pix[8];
	if (SerenityHandler::symbolTheme() == 4)
	{
		alias_pix[0] = classic_help;
		alias_pix[1] = classic_max;
		alias_pix[2] = classic_min;
		alias_pix[3] = classic_close;
		alias_pix[4] = classic_sticky;
		alias_pix[5] = classic_above;
		alias_pix[6] = classic_below;
		alias_pix[7] = classic_menu;
	}
	else if (SerenityHandler::symbolTheme() == 3)
	{
		alias_pix[0] = trinar_help;
		alias_pix[1] = trinar_max;
		alias_pix[2] = trinar_min;
		alias_pix[3] = trinar_close;
		alias_pix[4] = trinar_sticky;
		alias_pix[5] = trinar_above;
		alias_pix[6] = trinar_below;
		alias_pix[7] = trinar_menu;
	}
	else if (SerenityHandler::symbolTheme() == 2)
	{
		alias_pix[0] = porcelain_help;
		alias_pix[1] = porcelain_max;
		alias_pix[2] = porcelain_min;
		alias_pix[3] = porcelain_close;
		alias_pix[4] = porcelain_sticky;
		alias_pix[5] = porcelain_above;
		alias_pix[6] = porcelain_below;
		alias_pix[7] = porcelain_menu;
	}
	else if (SerenityHandler::symbolTheme() == 1)
	{
		alias_pix[0] = powder_help;
		alias_pix[1] = powder_max;
		alias_pix[2] = powder_min;
		alias_pix[3] = powder_close;
		alias_pix[4] = powder_sticky;
		alias_pix[5] = powder_above;
		alias_pix[6] = powder_below;
		alias_pix[7] = powder_menu;
	}
	else	// (SerenityHandler::symbolTheme() == 0)
	{
		alias_pix[0] = serene_help;
		alias_pix[1] = serene_max;
		alias_pix[2] = serene_min;
		alias_pix[3] = serene_close;
		alias_pix[4] = serene_sticky;
		alias_pix[5] = serene_above;
		alias_pix[6] = serene_below;
		alias_pix[7] = serene_menu;
	}

	bool indexWide[] = 
	{
		SerenityHandler::helpWide(), 
		SerenityHandler::maxWide(), 
		SerenityHandler::minWide(), 
		SerenityHandler::closeWide(), 
		SerenityHandler::stickyWide(), 
		SerenityHandler::aboveWide(), 
		SerenityHandler::belowWide(), 
		SerenityHandler::menuWide()
	};

	int buttonSize = SerenityHandler::buttonSize();
	int buttonStyle = SerenityHandler::buttonStyle();

	// MXLS: Palette
	QColor aFont = KDecoration::options()->color(KDecoration::ColorFont, true);
	QColor iFont = KDecoration::options()->color(KDecoration::ColorFont, false);
	QColor aTitlebar = KDecoration::options()->color(KDecoration::ColorTitleBar, true);
	QColor iTitlebar = KDecoration::options()->color(KDecoration::ColorTitleBar, false);
	QColor winGround = SerenityHandler::std_ground();

	// Lotsa work to do.
	// Zero...
	static QPixmap* active_normal[8];
	static QPixmap* active_hover[8];
	static QPixmap* active_sunken[8];
	static QPixmap* inactive_normal[8];
	static QPixmap* inactive_hover[8];
	static QPixmap* inactive_sunken[8];
	// Forty eight!
	static QPainter an_painter, ah_painter, as_painter,
			in_painter, ih_painter, is_painter;
	static QRect an_rect, ah_rect, as_rect,
			in_rect, ih_rect, is_rect;
	QColor glow;
	int currentWidth;
	//
	int atR, atG, atB;		// Active title text color
	aFont.getRgb(&atR, &atG, &atB);
	int itR, itG, itB;		// Inactive title text color
	iFont.getRgb(&itR, &itG, &itB);
	//
	// Zero...
	QColor aButton, iButton;
	for (int btn=0 ; btn<8 ; btn++)
	{
		aButton = SerenityHandler::buttonNormalColor(btn, true);
		iButton = SerenityHandler::buttonNormalColor(btn, false);
		glow = SerenityHandler::hoverColor(btn);
		currentWidth = indexWide[btn] ? buttonSize*3/2 : buttonSize;
		if (currentWidth & 1)	// Odd size
			currentWidth++;
		//
		active_normal[btn] = new QPixmap(currentWidth, buttonSize);
		an_rect = active_normal[btn]->rect();
		an_painter.begin(active_normal[btn]);
		//
		inactive_normal[btn] = new QPixmap(currentWidth, buttonSize);
		in_rect = inactive_normal[btn]->rect();
		in_painter.begin(inactive_normal[btn]);
		//
		if (buttonStyle == 1)
		{
			titleFillGround(&an_painter, an_rect, 
					SerenityHandler::std_ground(), 
					aTitlebar, 
					SerenityHandler::titleStyle());
			titleFillGround(&in_painter, in_rect, 
					SerenityHandler::std_ground(), 
					iTitlebar, 
					SerenityHandler::titleStyle());
		}
		else if (buttonStyle == 2)
		{
			renderFlatArea(&an_painter, an_rect, aButton, true);
			renderFlatArea(&in_painter, in_rect, iButton, false);
		}
		else if (buttonStyle == 3)
		{
			an_painter.fillRect(an_rect, aButton);
			renderCarving(&an_painter, an_rect, aButton, true);
			in_painter.fillRect(in_rect, iButton);
			renderCarving(&in_painter, in_rect, iButton, false);
		}
		else
		{
			renderSurface(&an_painter, an_rect, aButton, 
					Qt::blue, 0, true);
			renderSurface(&in_painter, in_rect, iButton, 
					Qt::blue, 0, false);
		}
		//
		active_hover[btn] = new QPixmap(currentWidth, buttonSize);
		ah_rect = active_hover[btn]->rect();
		ah_painter.begin(active_hover[btn]);
		//
		inactive_hover[btn] = new QPixmap(currentWidth, buttonSize);
		ih_rect = inactive_hover[btn]->rect();
		ih_painter.begin(inactive_hover[btn]);
		//
		renderSurface(&ah_painter, ah_rect, aButton, glow, 1, true);
		renderSurface(&ih_painter, ih_rect, iButton, glow, 1, false);
		//
		active_sunken[btn] = new QPixmap(currentWidth, buttonSize);
		as_rect = active_sunken[btn]->rect();
		as_painter.begin(active_sunken[btn]);
		//
		inactive_sunken[btn] = new QPixmap(currentWidth, buttonSize);
		is_rect = inactive_sunken[btn]->rect();
		is_painter.begin(inactive_sunken[btn]);
		//
		renderSurface(&as_painter, as_rect, aButton, 
			SerenityHandler::sunkenColor(btn), 2, true);
		renderSurface(&is_painter, is_rect, iButton, 
			SerenityHandler::sunkenColor(btn), 2, false);
		int ofX = (currentWidth - 16)/2;
		int ofY = (buttonSize-16)/2;
		QImage* temp_icon = new QImage(16, 16, 32);
		QImage* temp_ground = new QImage();
		//
		if ( (btn == 7) && (SerenityHandler::styledMenu() == false) )
		{
			// No icon there but keep the button background.
		}
		else
		{
			int aR, aG, aB;
			int iR, iG, iB;
			QColor c;
			if ( (SerenityHandler::hidePolicy() == 0)
			|| ((btn == 7) && (SerenityHandler::hiddenMenu() == false)) 
			|| ((btn == 3) && (SerenityHandler::hiddenCloser() == false)) )
			{
				c = SerenityHandler::symbolNormalColor(btn, true);
				c.getRgb(&aR, &aG, &aB);
				c = SerenityHandler::symbolNormalColor(btn, false);
				c.getRgb(&iR, &iG, &iB);
				*temp_ground = active_normal[btn]->convertToImage();
				*temp_ground = temp_ground->convertDepth(32);
				bitBlt(temp_icon, 0, 0, temp_ground, ofX, ofY, 16, 16, 0);
				unicity(alias_pix[btn], *temp_icon, aR, aG, aB);
				bitBlt(active_normal[btn], ofX, ofY, temp_icon, 0, 0, 16, 16, 0);
				*temp_ground = inactive_normal[btn]->convertToImage();
				*temp_ground = temp_ground->convertDepth(32);
				bitBlt(temp_icon, 0, 0, temp_ground, ofX, ofY, 16, 16, 0);
				unicity(alias_pix[btn], *temp_icon, iR, iG, iB);
				bitBlt(inactive_normal[btn], ofX, ofY, temp_icon, 0, 0, 16, 16, 0);
			}
			//
			QColor aFont = KDecoration::options()->color(KDecoration::ColorFont, true);
			QColor iFont = KDecoration::options()->color(KDecoration::ColorFont, false);
			c = SerenityHandler::colorMix(aFont, glow, 192);
			c.getRgb(&aR, &aG, &aB);
			c = SerenityHandler::colorMix(iFont, glow, 192);
			c.getRgb(&iR, &iG, &iB);
			*temp_ground = active_hover[btn]->convertToImage();
			*temp_ground = temp_ground->convertDepth(32);
			bitBlt(temp_icon, 0, 0, temp_ground, ofX, ofY, 16, 16, 0);
			unicity(alias_pix[btn], *temp_icon, aR, aG, aB);
			bitBlt(active_hover[btn], ofX, ofY, temp_icon, 0, 0, 16, 16, 0);
			*temp_ground = inactive_hover[btn]->convertToImage();
			*temp_ground = temp_ground->convertDepth(32);
			bitBlt(temp_icon, 0, 0, temp_ground, ofX, ofY, 16, 16, 0);
			unicity(alias_pix[btn], *temp_icon, iR, iG, iB);
			bitBlt(inactive_hover[btn], ofX, ofY, temp_icon, 0, 0, 16, 16, 0);
			//
			aFont.getRgb(&aR, &aG, &aB);
			iFont.getRgb(&iR, &iG, &iB);
			*temp_ground = active_sunken[btn]->convertToImage();
			*temp_ground = temp_ground->convertDepth(32);
			bitBlt(temp_icon, 0, 0, temp_ground, ofX, ofY, 16, 16, 0);
			unicity(alias_pix[btn], *temp_icon, aR, aG, aB);
			bitBlt(active_sunken[btn], ofX, ofY, temp_icon, 0, 0, 16, 16, 0);
			*temp_ground = inactive_sunken[btn]->convertToImage();
			*temp_ground = temp_ground->convertDepth(32);
			bitBlt(temp_icon, 0, 0, temp_ground, ofX, ofY, 16, 16, 0);
			unicity(alias_pix[btn], *temp_icon, iR, iG, iB);
			bitBlt(inactive_sunken[btn], ofX, ofY, temp_icon, 0, 0, 16, 16, 0);
		}
		an_painter.end();
		in_painter.end();
		ah_painter.end();
		ih_painter.end();
		as_painter.end();
		is_painter.end();
		delete temp_icon;
		delete temp_ground;
	}
	// Forty eight... This is the (almost) the end.
	// Zero...
	active_help_normal = active_normal[0];
	active_max_normal = active_normal[1];
	active_min_normal = active_normal[2];
	active_close_normal = active_normal[3];
	active_sticky_normal = active_normal[4];
	active_above_normal = active_normal[5];
	active_below_normal = active_normal[6];
	active_menu_normal = active_normal[7];
	// Eight...
	active_help_hover = active_hover[0];
	active_max_hover = active_hover[1];
	active_min_hover = active_hover[2];
	active_close_hover = active_hover[3];
	active_sticky_hover = active_hover[4];
	active_above_hover = active_hover[5];
	active_below_hover = active_hover[6];
	active_menu_hover = active_hover[7];
	// Sixteen...
	active_help_sunken = active_sunken[0];
	active_max_sunken = active_sunken[1];
	active_min_sunken = active_sunken[2];
	active_close_sunken = active_sunken[3];
	active_sticky_sunken = active_sunken[4];
	active_above_sunken = active_sunken[5];
	active_below_sunken = active_sunken[6];
	active_menu_sunken = active_sunken[7];
	// Twenty four...
	inactive_help_normal = inactive_normal[0];
	inactive_max_normal = inactive_normal[1];
	inactive_min_normal = inactive_normal[2];
	inactive_close_normal = inactive_normal[3];
	inactive_sticky_normal = inactive_normal[4];
	inactive_above_normal = inactive_normal[5];
	inactive_below_normal = inactive_normal[6];
	inactive_menu_normal = inactive_normal[7];
	// Thirty two...
	inactive_help_hover = inactive_hover[0];
	inactive_max_hover = inactive_hover[1];
	inactive_min_hover = inactive_hover[2];
	inactive_close_hover = inactive_hover[3];
	inactive_sticky_hover = inactive_hover[4];
	inactive_above_hover = inactive_hover[5];
	inactive_below_hover = inactive_hover[6];
	inactive_menu_hover = inactive_hover[7];
	// Forty...
	inactive_help_sunken = inactive_sunken[0];
	inactive_max_sunken = inactive_sunken[1];
	inactive_min_sunken = inactive_sunken[2];
	inactive_close_sunken = inactive_sunken[3];
	inactive_sticky_sunken = inactive_sunken[4];
	inactive_above_sunken = inactive_sunken[5];
	inactive_below_sunken = inactive_sunken[6];
	inactive_menu_sunken = inactive_sunken[7];
	// Forty eight. We're done!
}

void Pixmaps::deletePixmaps()
{
	delete active_help_normal;
	active_help_normal = 0;
	delete active_max_normal;
	active_max_normal = 0;
	delete active_min_normal;
	active_min_normal = 0;
	delete active_close_normal;
	active_close_normal = 0;
	delete active_sticky_normal;
	active_sticky_normal = 0;
	delete active_above_normal;
	active_above_normal = 0;
	delete active_below_normal;
	active_below_normal = 0;
	delete active_menu_normal;
	active_menu_normal = 0;
	
	delete active_help_hover;
	active_help_hover = 0;
	delete active_max_hover;
	active_max_hover = 0;
	delete active_min_hover;
	active_min_hover = 0;
	delete active_close_hover;
	active_close_hover = 0;
	delete active_sticky_hover;
	active_sticky_hover = 0;
	delete active_above_hover;
	active_above_hover = 0;
	delete active_below_hover;
	active_below_hover = 0;
	delete active_menu_hover;
	active_menu_hover = 0;
	
	delete active_help_sunken;
	active_help_sunken = 0;
	delete active_max_sunken;
	active_max_sunken = 0;
	delete active_min_sunken;
	active_min_sunken = 0;
	delete active_close_sunken;
	active_close_sunken = 0;
	delete active_sticky_sunken;
	active_sticky_sunken = 0;
	delete active_above_sunken;
	active_above_sunken = 0;
	delete active_below_sunken;
	active_below_sunken = 0;
	delete active_menu_sunken;
	active_menu_sunken = 0;

	delete inactive_help_normal;
	inactive_help_normal = 0;
	delete inactive_max_normal;
	inactive_max_normal = 0;
	delete inactive_min_normal;
	inactive_min_normal = 0;
	delete inactive_close_normal;
	inactive_close_normal = 0;
	delete inactive_sticky_normal;
	inactive_sticky_normal = 0;
	delete inactive_above_normal;
	inactive_above_normal = 0;
	delete inactive_below_normal;
	inactive_below_normal = 0;
	delete inactive_menu_normal;
	inactive_menu_normal = 0;
	
	delete inactive_help_hover;
	inactive_help_hover = 0;
	delete inactive_max_hover;
	inactive_max_hover = 0;
	delete inactive_min_hover;
	inactive_min_hover = 0;
	delete inactive_close_hover;
	inactive_close_hover = 0;
	delete inactive_sticky_hover;
	inactive_sticky_hover = 0;
	delete inactive_above_hover;
	inactive_above_hover = 0;
	delete inactive_below_hover;
	inactive_below_hover = 0;
	delete inactive_menu_hover;
	inactive_menu_hover = 0;
	
	delete inactive_help_sunken;
	inactive_help_sunken = 0;
	delete inactive_max_sunken;
	inactive_max_sunken = 0;
	delete inactive_min_sunken;
	inactive_min_sunken = 0;
	delete inactive_close_sunken;
	inactive_close_sunken = 0;
	delete inactive_sticky_sunken;
	inactive_sticky_sunken = 0;
	delete inactive_above_sunken;
	inactive_above_sunken = 0;
	delete inactive_below_sunken;
	inactive_below_sunken = 0;
	delete inactive_menu_sunken;
	inactive_menu_sunken = 0;

	pixmapsCreated = false;
}

void Pixmaps::unicity(int* pattern, QImage& work, int rr, int gg, int bb)
{
	int x, y, aa, zz;
	int z = 0;
	uint pxl;
	for (y=0; y<16; y++)
	{
		uint *line = (uint*)work.scanLine(y);	// work is 32-bit QImage.
		for (x=0; x<16; x++)
		{
			aa = pattern[z];	// Pattern is (16*16) * 256 levels
			//
			if (aa == 255)	// Replace background with color.
			{
				line[x] = qRgb(rr, gg, bb);
			}
			else if (aa != 0)			// Otherwise mix.
			{
				pxl = line[x];
				zz = 255-aa;
				line[x] = qRgb( (qRed(pxl)*zz + rr*aa) / 255, 
						(qGreen(pxl)*zz + gg*aa) / 255, 
						(qBlue(pxl)*zz + bb*aa) / 255 );
			}
			// else keep background.
			z++;
		}
	}
}

void Pixmaps::renderGradient(QPainter* p, 
				const QRect &r, 
				const QColor &startColor, 
				const QColor &endColor, 
				const int direction, 
				const bool convex)
{
	if ( (r.width() <= 0) || (r.height() <= 0) )
		return;
	
	int width = r.width();
	int height = r.height();
	
	QColor first, last;
	if (convex)
	{
		first = startColor;
		last = endColor;
	}
	else	// Exchange colors.
	{
		first = endColor;
		last = startColor;
	}
	
	int fR, fG, fB;		// first RGB components
	first.getRgb(&fR, &fG, &fB);
	int lR, lG, lB;		// last RGB components
	last.getRgb(&lR, &lG, &lB);
	//
	int rr = fR*1000;	// Start color
	int gg = fG*1000;
	int bb = fB*1000;
	//
	// Where to draw our gradient.
	QImage* result = new QImage(width, height, 32);
	//
	int deltaR, deltaG, deltaB;
	register int x, y;
	unsigned int* line;
	if (direction == VerticalGradient)
	{
		deltaR = ((lR-fR)*1000)/height;
		deltaG = ((lG-fG)*1000)/height;
		deltaB = ((lB-fB)*1000)/height;
		for (y = 0; y < height; y++)
		{
			line = (unsigned int*)(result->scanLine(y));
			int color = qRgb(rr/1000, gg/1000, bb/1000);
			for (x = 0; x < width; x++)
			{
				line[x] = color;
			}
			rr += deltaR;
			gg += deltaG;
			bb += deltaB;
		}
	}
	else
	{
		deltaR = ((lR-fR)*1000)/width;
		deltaG = ((lG-fG)*1000)/width;
		deltaB = ((lB-fB)*1000)/width;
		line = (unsigned int*)(result->scanLine(0));
		for (x = 0; x < width; x++)
		{
			line[x] = qRgb(rr/1000, gg/1000, bb/1000);
			rr += deltaR;
			gg += deltaG;
			bb += deltaB;
		}
		unsigned int* src;
		unsigned int* dst;
		for (y = 1; y < height; y++)
		{
			src = line;
			dst = (unsigned int*)(result->scanLine(y));
			for (x = 0; x < width; x++)
			{
				*dst++ = *src++;
			}
		}
	}
	//
	p->drawImage(r.left(), r.top(), *result);
	delete result;
}

void Pixmaps::renderDiagonalGradient(QPainter* p, 
					const QRect &r, 
					const QColor &startColor, 
					const QColor &middleColor, 
					const QColor &endColor, 
					const bool convex)
{
	if ( (r.width() < 2) || (r.height() < 2) )
		return;
	
	int width = r.width();
	int height = r.height();
	
	QColor first, last;
	if (convex)
	{
		first = startColor;
		last = endColor;
	}
	else	// Exchange colors.
	{
		first = endColor;
		last = startColor;
	}
	
	int fR, fG, fB;		// first RGB components
	first.getRgb(&fR, &fG, &fB);
	int mR, mG, mB;		// middle RGB components
	middleColor.getRgb(&mR, &mG, &mB);
	int lR, lG, lB;		// last RGB components
	last.getRgb(&lR, &lG, &lB);
	//
	int ldR = ((mR-fR)*1000)/height;	// On the left,
	int ldG = ((mG-fG)*1000)/height;	// color goes 
	int ldB = ((mB-fB)*1000)/height;	// from "first" to "middleColor".
	int rdR = ((lR-mR)*1000)/height;	// On the right,
	int rdG = ((lG-mG)*1000)/height;	// color goes 
	int rdB = ((lB-mB)*1000)/height;	// from "middleColor" to "last".
	//
	int leftR = fR*1000;	// top left color
	int leftG = fG*1000;
	int leftB = fB*1000;
	int rightR = mR*1000;	// top right color
	int rightG = mG*1000;
	int rightB = mB*1000;
	//
	// Where to draw our gradient.
	QImage* result = new QImage(width, height, 32);
	//
	register int x, y;
	int rr, gg, bb;
	int deltaR, deltaG, deltaB;
	unsigned int* line;
	for (y = 0; y < height; y++)
	{
		rr = leftR;
		gg = leftG;
		bb = leftB;
		deltaR = (rightR-leftR)/width;	// Horizontal delta(s)
		deltaG = (rightG-leftG)/width;
		deltaB = (rightB-leftB)/width;
		line = (unsigned int*)(result->scanLine(y));
		for (x = 0; x < width; x++)
		{
			line[x] = qRgb(rr/1000, gg/1000, bb/1000);
			rr += deltaR;
			gg += deltaG;
			bb += deltaB;
		}
		leftR += ldR;	// Left vertical delta(s)
		leftG += ldG;
		leftB += ldB;
		rightR += rdR;	// Right vertical delta(s)
		rightG += rdG;
		rightB += rdB;
	}
	//
	p->drawImage(r.left(), r.top(), *result);
	delete result;
}

// void Pixmaps::renderQuadriGradient(QPainter* p, 
// 					const QRect &r, 
// 					const QColor &topLeft, 
// 					const QColor &topRight, 
// 					const QColor &bottomLeft, 
// 					const QColor &bottomRight)
// {
// 	if ( (r.width() < 2) || (r.height() < 2) )
// 		return;
// 	
// 	int width = r.width();
// 	int height = r.height();
// 	
// 	int tlR, tlG, tlB;	// top left RGB components
// 	topLeft.getRgb(&tlR, &tlG, &tlB);
// 	int trR, trG, trB;	// top right RGB components
// 	topRight.getRgb(&trR, &trG, &trB);
// 	int blR, blG, blB;	// bottom left RGB components
// 	bottomLeft.getRgb(&blR, &blG, &blB);
// 	int brR, brG, brB;	// bottom right RGB components
// 	bottomRight.getRgb(&brR, &brG, &brB);
// 	//
// 	int lvdR = ((blR-tlR)*1000)/height;	// On the left,
// 	int lvdG = ((blG-tlG)*1000)/height;	// color goes 
// 	int lvdB = ((blB-tlB)*1000)/height;	// from "topLeft" to "bottomLeft".
// 	int rvdR = ((brR-trR)*1000)/height;	// On the right,
// 	int rvdG = ((brG-trG)*1000)/height;	// color goes 
// 	int rvdB = ((brB-trB)*1000)/height;	// from "topRight" to "bottomRight".
// 	//
// 	int leftR = tlR*1000;	// top left color
// 	int leftG = tlG*1000;
// 	int leftB = tlB*1000;
// 	int rightR = trR*1000;	// top right color
// 	int rightG = trG*1000;
// 	int rightB = trB*1000;
// 	//
// 	// Where to draw our gradient.
// 	QImage* result = new QImage(width, height, 32);
// 	//
// 	register int x, y;
// 	int rr, gg, bb;
// 	int deltaR, deltaG, deltaB;
// 	unsigned int* line;
// 	for (y = 0; y < height; y++)
// 	{
// 		rr = leftR;
// 		gg = leftG;
// 		bb = leftB;
// 		deltaR = (rightR-leftR)/width;	// Horizontal delta(s)
// 		deltaG = (rightG-leftG)/width;
// 		deltaB = (rightB-leftB)/width;
// 		line = (unsigned int*)(result->scanLine(y));
// 		for (x = 0; x < width; x++)
// 		{
// 			line[x] = qRgb(rr/1000, gg/1000, bb/1000);
// 			rr += deltaR;
// 			gg += deltaG;
// 			bb += deltaB;
// 		}
// 		leftR += lvdR;	// Left vertical delta(s)
// 		leftG += lvdG;
// 		leftB += lvdB;
// 		rightR += rvdR;	// Right vertical delta(s)
// 		rightG += rvdG;
// 		rightB += rvdB;
// 	}
// 	//
// 	p->drawImage(r.left(), r.top(), *result);
// 	delete result;
// }

void Pixmaps::renderZenGradient(QPainter* p, 
					const QRect &r, 
					const QColor &startColor, 
					const QColor &middleColor, 
					const QColor &endColor, 
					const bool convex)
{
	if ( (r.width() < 4) || (r.height() < 4) )
		return;
	
	int left, top, right, bottom;
	r.coords(&left, &top, &right, &bottom);
	int width, height;
	r.rect(&left, &top, &width, &height);
	
	QColor first, last;
	if (convex)
	{
		first = startColor;
		last = endColor;
	}
	else	// Exchange colors.
	{
		first = endColor;
		last = startColor;
	}
	
	int hSize = (width <= 14) ? 4 : 7;
	int vSize = height/2;
	//
	int hTwice = hSize*2;
	int vTwice = vSize*2;
	//
	int x1, y1, x2, y2;
	x1 = left+hSize;
	y1 = top+vSize;
	x2 = right-hSize+1;
	y2 = bottom-vSize+1;
	//
	if ( (width > hTwice) || (height > vTwice) )
	{
		p->fillRect(x1, y1, width-hTwice, height-vTwice, QBrush(middleColor));
	}
	if (width > hTwice)
	{
		renderGradient(p, QRect(x1, top, width-hTwice, vSize),
				first, middleColor, VerticalGradient);
		renderGradient(p, QRect(x1, y2, width-hTwice, vSize),
				middleColor, last, VerticalGradient);
	}
	if (height > vTwice)
	{
		renderGradient(p, QRect(left, y1, hSize, height-vTwice),
				first, middleColor, HorizontalGradient);
		renderGradient(p, QRect(x2, y1, hSize, height-vTwice),
				middleColor, last, HorizontalGradient);
	}
	renderDiagonalGradient(p, QRect(left, top, hSize, vSize), 
				first, first, middleColor);
	renderDiagonalGradient(p, QRect(x2, top, hSize, vSize), 
				first, middleColor, last);
	renderDiagonalGradient(p, QRect(left, y2, hSize, vSize), 
				first, middleColor, last);
	renderDiagonalGradient(p, QRect(x2, y2, hSize, vSize), 
				middleColor, last, last);
}

void Pixmaps::renderSurface(QPainter *p,
				QRect r,
				QColor surfaceColor,
				QColor highlightColor,
				uint flags,
				bool active)
{
	const int SRN_DOWN = 144;	// Sunken effect
	const int SRN_OVER = SerenityHandler::purerHover() ? 128 : 192;	// Hover effect
	//
	bool highlight = flags&1;	// Is_Highlight == 1
	bool sunken = flags&2;		// Is_Sunken == 2
	bool convex = true;
	int contrast = SerenityHandler::gradientContrast();

	QColor baseColor = surfaceColor;
	if (sunken)
	{
		if (! SerenityHandler::alternateSinking() )
			convex = false;
		baseColor = SerenityHandler::colorMix(baseColor, highlightColor, SRN_DOWN);
	}
	else if (highlight)
	{
		baseColor = SerenityHandler::colorMix(baseColor, highlightColor, SRN_OVER);
	}

	// Some useful values
	int left, top, right, bottom;
	r.coords(&left, &top, &right, &bottom);
	int width, height;
	r.rect(&left, &top, &width, &height);
	
	// Re-calculated base colors and surface
	QColor borderTop = sunken ? darker(baseColor, contrast*5) 
				: brighter(baseColor, contrast*4);
	QColor borderBottom = sunken ? brighter(baseColor, contrast*4)
				: darker(baseColor, contrast*5);
	QColor gradientTop = brighter(baseColor, contrast*3);
	QColor gradientBottom = darker(baseColor, contrast*3);
	
	// Draw surface
	if (SerenityHandler::globalStyle() == 1)
	{
		renderZenGradient(p, QRect(left+1, top+1, width-2, height-2),
					gradientTop, baseColor, gradientBottom, 
					convex);
	}
	else if (SerenityHandler::globalStyle() == 2)
	{
		p->fillRect( QRect(left+1, top+1, width-2, height-2), QBrush(baseColor) );
	}
	else	// globalStyle() == 0
	{
		renderDiagonalGradient(p, QRect(left+1, top+1, width-2, height-2),
					gradientTop, baseColor, gradientBottom, 
					convex);
	}
	// Draw sides
	//
	QRect leftBorder = QRect(left, top+2, 1, height-4);
	QRect rightBorder = QRect(right, top+2, 1, height-4);
	QRect topBorder = QRect(left+2, top, width-4, 1);
	QRect bottomBorder = QRect(left+2, bottom, width-4, 1);
	QColor tbTop = SerenityHandler::titleGroundTop(active); 
	QColor tbBottom = SerenityHandler::titleGroundBottom(active); 

	// The borders in between the corners
	if (SerenityHandler::globalStyle() != 1)
	{
		renderGradient(p, topBorder,
				borderTop, tbTop, HorizontalGradient);
		renderGradient(p, leftBorder, 
				borderTop, tbBottom, VerticalGradient);
		renderGradient(p, rightBorder,
				tbTop, borderBottom, VerticalGradient);
		renderGradient(p, bottomBorder,
				tbBottom, borderBottom, HorizontalGradient);
	}
	else
	{
		p->setPen(borderTop);
		p->drawLine(topBorder.left(), topBorder.y(), 
				topBorder.right(), topBorder.y());
		p->drawLine(leftBorder.x(), leftBorder.top(), 
				leftBorder.x(), leftBorder.bottom());
		p->setPen(borderBottom);
		p->drawLine(rightBorder.x(), rightBorder.top(), 
				rightBorder.x(), rightBorder.bottom());
		p->drawLine(bottomBorder.left(), bottomBorder.y(), 
				bottomBorder.right(), bottomBorder.y());
	}

	// The antialiased corners
	// Top left
	p->setPen(borderTop);
	p->drawPoint(left+1, top+1);
	p->setPen( SerenityHandler::colorMix(tbTop, borderTop) );
	p->drawPoint(left+1, top);
	p->drawPoint(left, top+1);
	// Top right
	p->setPen( SerenityHandler::colorMix(tbTop, baseColor) );
	p->drawPoint(right-1, top);
	p->drawPoint(right, top+1);
	// Bottom left
	p->setPen( SerenityHandler::colorMix(tbBottom, baseColor) );
	p->drawPoint(left+1, bottom);
	p->drawPoint(left, bottom-1);
	// Bottom Right
	p->setPen(borderBottom);
	p->drawPoint(right-1, bottom-1);
	p->setPen( SerenityHandler::colorMix(tbBottom, borderBottom) );
	p->drawPoint(right-1, bottom);
	p->drawPoint(right, bottom-1);
	// Fill the corners
	p->setPen(tbTop);
	p->drawPoint(left, top);
	p->drawPoint(right, top);
	p->setPen(tbBottom);
	p->drawPoint(left, bottom);
	p->drawPoint(right, bottom);
}

void Pixmaps::renderFlatArea(QPainter* p,
			 	QRect r,
			 	QColor surfaceColor,
				bool active)
{
	// Some useful values
	int left, top, right, bottom;
	r.coords(&left, &top, &right, &bottom);
	
	QColor tbTop = SerenityHandler::titleGroundTop(active); 
	QColor tbBottom = SerenityHandler::titleGroundBottom(active); 
	
	p->fillRect(r, QBrush(surfaceColor) );
	// Round corners
	p->setPen( SerenityHandler::colorMix(tbTop, surfaceColor) );
	p->drawPoint(left+1, top);
	p->drawPoint(left, top+1);
	p->drawPoint(right-1, top);
	p->drawPoint(right, top+1);
	p->setPen( SerenityHandler::colorMix(tbBottom, surfaceColor) );
	p->drawPoint(left+1, bottom);
	p->drawPoint(left, bottom-1);
	p->drawPoint(right-1, bottom);
	p->drawPoint(right, bottom-1);
	// Fill the corners
	p->setPen(tbTop);
	p->drawPoint(left, top);
	p->drawPoint(right, top);
	p->setPen(tbBottom);
	p->drawPoint(left, bottom);
	p->drawPoint(right, bottom);
}

void Pixmaps::renderCarving(QPainter* p,
				QRect r,
				QColor contour,
				bool active)
{
	int contrast = SerenityHandler::gradientContrast();
	//
	QRect inner(r);
	inner.addCoords(1, 1, -1, -1);
	int left, top, right, bottom;
	inner.coords(&left, &top, &right, &bottom);
	int width = inner.width()-2;
	int height = inner.height()-2;
	//
	QColor gradLight = brighter(contour, contrast*4);
	QColor gradDark = darker(contour, contrast*5);
	//
	renderGradient(p, QRect(left+1, top, width, 1),
			gradLight, contour, HorizontalGradient);
	renderGradient(p, QRect(left, top+1, 1, height), 
			gradLight, contour, VerticalGradient);
	renderGradient(p, QRect(right, top+1, 1, height),
			contour, gradDark, VerticalGradient);
	renderGradient(p, QRect(left+1, bottom, width, 1),
			contour, gradDark, HorizontalGradient);
	//
	QColor tbTop = SerenityHandler::titleGroundTop(active); 
	QColor tbBottom = SerenityHandler::titleGroundBottom(active); 
	gradLight = brighter(tbBottom, contrast*4);
	gradDark = darker(tbTop, contrast*5);
	//
	p->setPen( SerenityHandler::colorMix(tbTop, contour) );
	p->drawPoint(right, top);
	p->setPen( SerenityHandler::colorMix(tbBottom, contour) );
	p->drawPoint(left, bottom);
	//
	r.coords(&left, &top, &right, &bottom);
	width = r.width()-4;
	height = r.height()-4;
	//
	renderGradient(p, QRect(left+2, top, width, 1),
			gradDark, tbTop, HorizontalGradient);
	renderGradient(p, QRect(left, top+2, 1, height), 
			gradDark, tbBottom, VerticalGradient);
	renderGradient(p, QRect(right, top+2, 1, height),
			tbTop, gradLight, VerticalGradient);
	renderGradient(p, QRect(left+2, bottom, width, 1),
			tbBottom, gradLight, HorizontalGradient);
	// The antialiased corners
	// Top left
	p->setPen(gradDark);
	p->drawPoint(left+1, top+1);
	p->setPen( SerenityHandler::colorMix(tbTop, gradDark) );
	p->drawPoint(left+1, top);
	p->drawPoint(left, top+1);
	// Top right
	p->setPen(tbTop);
	p->drawPoint(right-1, top);
	p->drawPoint(right, top+1);
	// Bottom left
	p->setPen(tbBottom);
	p->drawPoint(left+1, bottom);
	p->drawPoint(left, bottom-1);
	// Bottom Right
	p->setPen(gradLight);
	p->drawPoint(right-1, bottom-1);
	p->setPen( SerenityHandler::colorMix(tbBottom, gradLight) );
	p->drawPoint(right-1, bottom);
	p->drawPoint(right, bottom-1);
	// Fill the corners
	p->setPen(tbTop);
	p->drawPoint(left, top);
	p->drawPoint(right, top);
	p->setPen(tbBottom);
	p->drawPoint(left, bottom);
	p->drawPoint(right, bottom);
}

void Pixmaps::titleFillGround(QPainter* p,
				QRect r,
				QColor ground,
				QColor titlebar,
				int style)
{
	if (style == 1)
	{
		p->fillRect(r, QBrush(titlebar));
	}
	else if (style == 2)
	{
		int hh = r.height()/2;
		QRect work(0, 0, r.width(), hh);
		p->fillRect(work, QBrush(titlebar));
		work.moveTop(hh);
		p->fillRect(work, QBrush(ground));
	}
	else if (style == 3)
	{
		int hh = r.height()/2;
		int bs = SerenityHandler::borderSize();
		QRect work(0, -bs, r.width(), hh+bs);
		renderGradient(p, work,
				brighter(ground, SerenityHandler::gradientContrast()*3), 
				ground, VerticalGradient);
		work = QRect(0, hh, r.width(), hh);
		p->fillRect(work, QBrush(ground));
	}
	else if (style == -1)
	{
		p->fillRect(r, QBrush(titlebar));
	}
	else
	{
		p->fillRect(r, QBrush(ground));
	}
}

QColor Pixmaps::brighter(const QColor baseColor, const int factor)
{
	/// MXLS: Brighter means brighter, never darker!
	if (factor <= 0)
		return baseColor;
	int hue, sat, val;
	baseColor.getHsv(&hue, &sat, &val);
	if ((val == 0) || (hue == -1))
	{
		val += (255*factor)/100;
		if (val > 255)
			return Qt::white;
		else
			return QColor(val, val, val);
	}
 	/// Inspired by Qt3's "qcolor.cpp"
	val += (val*factor)/100;
	if (val > 255)				// Overflow
	{
		sat -= val-255;			// Adjust saturation
		if (sat < 0) sat = 0;
		val = 255;
	}
	QColor result;
	result.setHsv(hue, sat, val);
	return result;
}

QColor Pixmaps::darker(const QColor baseColor, const int factor)
{
	/// MXLS: Darker means darker, never brighter!
	if (factor <= 0)
		return baseColor;
	/// Inspired by Qt3's "qcolor.cpp"
	int hue, sat, val;
	baseColor.getHsv(&hue, &sat, &val);
	val -= (val*factor)/100;
	if (val < 0)				// Overflow
	{
		val = 0;
	}
	QColor result;
	result.setHsv(hue, sat, val);
	return result;
}
