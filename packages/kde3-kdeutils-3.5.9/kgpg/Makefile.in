# Makefile.in generated by automake 1.10.1 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@


VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = kgpg$(EXEEXT)
subdir = kgpg
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in AUTHORS \
	ChangeLog INSTALL
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(appsdir)" \
	"$(DESTDIR)$(autostartdir)" "$(DESTDIR)$(kde_kcfgdir)" \
	"$(DESTDIR)$(picsdir)" "$(DESTDIR)$(servicedir)" \
	"$(DESTDIR)$(xdg_appsdir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_kgpg_OBJECTS = kgpgoptions.$(OBJEXT) listkeys.$(OBJEXT) \
	popuppublic.$(OBJEXT) kgpgview.$(OBJEXT) kgpg.$(OBJEXT) \
	main.$(OBJEXT) keygener.$(OBJEXT) kgpginterface.$(OBJEXT) \
	keyservers.$(OBJEXT) kgpgeditor.$(OBJEXT) \
	detailedconsole.$(OBJEXT) kgpglibrary.$(OBJEXT) \
	keyinfowidget.$(OBJEXT)
#>- kgpg_OBJECTS = $(am_kgpg_OBJECTS)
#>+ 9
kgpg_final_OBJECTS = kgpg.all_cpp.o 
kgpg_nofinal_OBJECTS = kgpgoptions.$(OBJEXT) listkeys.$(OBJEXT) \
	popuppublic.$(OBJEXT) kgpgview.$(OBJEXT) kgpg.$(OBJEXT) \
	main.$(OBJEXT) keygener.$(OBJEXT) kgpginterface.$(OBJEXT) \
	keyservers.$(OBJEXT) kgpgeditor.$(OBJEXT) \
	detailedconsole.$(OBJEXT) kgpglibrary.$(OBJEXT) \
	keyinfowidget.$(OBJEXT) dcopiface_skel.$(OBJEXT) keyserver.$(OBJEXT) searchres.$(OBJEXT) kgpgwizard.$(OBJEXT) keyproperties.$(OBJEXT) conf_encryption.$(OBJEXT) conf_decryption.$(OBJEXT) conf_gpg.$(OBJEXT) groupedit.$(OBJEXT) kgpgrevokewidget.$(OBJEXT) newkey.$(OBJEXT) adduid.$(OBJEXT) keyexport.$(OBJEXT) sourceselect.$(OBJEXT) conf_servers.$(OBJEXT) conf_ui2.$(OBJEXT) conf_misc.$(OBJEXT) kgpgsettings.$(OBJEXT)
@KDE_USE_FINAL_FALSE@kgpg_OBJECTS = $(kgpg_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@kgpg_OBJECTS = $(kgpg_final_OBJECTS)
am__DEPENDENCIES_1 =
kgpg_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
#>- kgpg_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
#>- 	$(kgpg_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
kgpg_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) \
	$(kgpg_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
#>- 	$(LDFLAGS) -o $@
#>+ 3
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(kgpg_SOURCES)
DIST_SOURCES = $(kgpg_SOURCES)
#>- RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
#>- 	html-recursive info-recursive install-data-recursive \
#>- 	install-dvi-recursive install-exec-recursive \
#>- 	install-html-recursive install-info-recursive \
#>- 	install-pdf-recursive install-ps-recursive install-recursive \
#>- 	installcheck-recursive installdirs-recursive pdf-recursive \
#>- 	ps-recursive uninstall-recursive
#>+ 7
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive nmcheck-recursive bcheck-recursive
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
appsDATA_INSTALL = $(INSTALL_DATA)
autostartDATA_INSTALL = $(INSTALL_DATA)
kde_kcfgDATA_INSTALL = $(INSTALL_DATA)
picsDATA_INSTALL = $(INSTALL_DATA)
serviceDATA_INSTALL = $(INSTALL_DATA)
xdg_appsDATA_INSTALL = $(INSTALL_DATA)
DATA = $(apps_DATA) $(autostart_DATA) $(kde_kcfg_DATA) $(pics_DATA) \
	$(service_DATA) $(xdg_apps_DATA)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
ARTSCCONFIG = @ARTSCCONFIG@
AUTOCONF = @AUTOCONF@
AUTODIRS = @AUTODIRS@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CONF_FILES = @CONF_FILES@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOPIDLNG = @DCOPIDLNG@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DOXYGEN = @DOXYGEN@
DOXYGEN_PROJECT_NAME = @DOXYGEN_PROJECT_NAME@
DOXYGEN_PROJECT_NUMBER = @DOXYGEN_PROJECT_NUMBER@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_PERMISSIVE_FLAG = @ENABLE_PERMISSIVE_FLAG@
EXEEXT = @EXEEXT@
F77 = @F77@
FFLAGS = @FFLAGS@
FRAMEWORK_COREAUDIO = @FRAMEWORK_COREAUDIO@
GMSGFMT = @GMSGFMT@
GREP = @GREP@
HAVE_GCC_VISIBILITY = @HAVE_GCC_VISIBILITY@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KCFG_DEPENDENCIES = @KCFG_DEPENDENCIES@
KCONFIG_COMPILER = @KCONFIG_COMPILER@
KDECONFIG = @KDECONFIG@
KDE_CHECK_PLUGIN = @KDE_CHECK_PLUGIN@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_HAS_DOXYGEN = @KDE_HAS_DOXYGEN@
KDE_HAVE_DOT = @KDE_HAVE_DOT@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS = @KDE_MT_LDFLAGS@
KDE_MT_LIBS = @KDE_MT_LIBS@
KDE_NO_UNDEFINED = @KDE_NO_UNDEFINED@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
KDE_USE_FPIE = @KDE_USE_FPIE@
KDE_USE_NMCHECK_FALSE = @KDE_USE_NMCHECK_FALSE@
KDE_USE_NMCHECK_TRUE = @KDE_USE_NMCHECK_TRUE@
KDE_USE_PIE = @KDE_USE_PIE@
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
KEYBOARD_LIBS = @KEYBOARD_LIBS@
LDFLAGS = @LDFLAGS@
LDFLAGS_AS_NEEDED = @LDFLAGS_AS_NEEDED@
LDFLAGS_NEW_DTAGS = @LDFLAGS_NEW_DTAGS@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBGMP = @LIBGMP@
LIBJPEG = @LIBJPEG@
LIBKVM = @LIBKVM@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBPYTHON = @LIBPYTHON@
LIBRESOLV = @LIBRESOLV@
LIBS = @LIBS@
LIBSM = @LIBSM@
LIBSNMP = @LIBSNMP@
LIBSOCKET = @LIBSOCKET@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBUTIL = @LIBUTIL@
LIBZ = @LIBZ@
LIB_DEVSTAT = @LIB_DEVSTAT@
LIB_KAB = @LIB_KAB@
LIB_KABC = @LIB_KABC@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDED = @LIB_KDED@
LIB_KDEPIM = @LIB_KDEPIM@
LIB_KDEPRINT = @LIB_KDEPRINT@
LIB_KDEUI = @LIB_KDEUI@
LIB_KDNSSD = @LIB_KDNSSD@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMPROXY = @LIB_KIMPROXY@
LIB_KIO = @LIB_KIO@
LIB_KJS = @LIB_KJS@
LIB_KNEWSTUFF = @LIB_KNEWSTUFF@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KUNITTEST = @LIB_KUNITTEST@
LIB_KUTILS = @LIB_KUTILS@
LIB_POLL = @LIB_POLL@
LIB_QPE = @LIB_QPE@
LIB_QT = @LIB_QT@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LIB_XEXT = @LIB_XEXT@
LIB_XRENDER = @LIB_XRENDER@
LIB_XSS = @LIB_XSS@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAKEKDEWIDGETS = @MAKEKDEWIDGETS@
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MSGFMT = @MSGFMT@
MY_LIBKNEWSTUFF = @MY_LIBKNEWSTUFF@
NOOPT_CFLAGS = @NOOPT_CFLAGS@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
PYTHONMODDIR = @PYTHONMODDIR@
QTDOCDIR = @QTDOCDIR@
QTE_NORTTI = @QTE_NORTTI@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TOPSUBDIRS = @TOPSUBDIRS@
UIC = @UIC@
UIC_TR = @UIC_TR@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
USE_THREADS = @USE_THREADS@
VERSION = @VERSION@
WOVERLOADED_VIRTUAL = @WOVERLOADED_VIRTUAL@
XGETTEXT = @XGETTEXT@
XMKMF = @XMKMF@
XMLLINT = @XMLLINT@
XMMS_INCLUDES = @XMMS_INCLUDES@
XMMS_LDFLAGS = @XMMS_LDFLAGS@
XMMS_LIBS = @XMMS_LIBS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
X_RPATH = @X_RPATH@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
all_includes = @all_includes@
all_libraries = @all_libraries@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_kcfgdir = @kde_kcfgdir@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = @kde_qtver@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
kdeinitdir = @kdeinitdir@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
x_includes = @x_includes@
x_libraries = @x_libraries@
xdg_appsdir = @xdg_appsdir@
xdg_directorydir = @xdg_directorydir@
xdg_menudir = @xdg_menudir@
SUBDIRS = icons
INCLUDES = $(all_includes)
#>- kgpg_SOURCES = kgpgoptions.cpp listkeys.cpp popuppublic.cpp kgpgview.cpp \
#>- 		kgpg.cpp main.cpp keygener.cpp kgpginterface.cpp keyservers.cpp keyserver.ui \
#>- 		searchres.ui kgpgeditor.cpp detailedconsole.cpp kgpglibrary.cpp kgpgwizard.ui \
#>- 		keyproperties.ui conf_encryption.ui conf_decryption.ui conf_gpg.ui dcopiface.skel \
#>- 		keyinfowidget.cpp groupedit.ui kgpgrevokewidget.ui newkey.ui adduid.ui 	keyexport.ui \
#>- 		sourceselect.ui kgpgsettings.kcfgc conf_servers.ui conf_ui2.ui conf_misc.ui
#>+ 6
kgpg_SOURCES=kgpgoptions.cpp listkeys.cpp popuppublic.cpp kgpgview.cpp \
		kgpg.cpp main.cpp keygener.cpp kgpginterface.cpp keyservers.cpp  \
		 kgpgeditor.cpp detailedconsole.cpp kgpglibrary.cpp  \
		     \
		keyinfowidget.cpp     	 \
		     dcopiface_skel.cpp keyserver.cpp searchres.cpp kgpgwizard.cpp keyproperties.cpp conf_encryption.cpp conf_decryption.cpp conf_gpg.cpp groupedit.cpp kgpgrevokewidget.cpp newkey.cpp adduid.cpp keyexport.cpp sourceselect.cpp conf_servers.cpp conf_ui2.cpp conf_misc.cpp kgpgsettings.cpp

kgpg_LDADD = $(LIB_KIO) $(LIB_KABC) -lkutils -lkdeprint
pics_DATA = kgpg_anim.gif kgpg_docked.png  kgpg_docked.gif kgpg_blank.png  kgpg_fill.png
picsdir = $(kde_datadir)/kgpg/pics
servicedir = $(kde_datadir)/konqueror/servicemenus
service_DATA = encryptfile.desktop encryptfolder.desktop
autostartdir = $(datadir)/autostart
autostart_DATA = kgpg.desktop
xdg_apps_DATA = kgpg.desktop
kde_kcfg_DATA = kgpg.kcfg
#>- METASOURCES = AUTO

# the library search path.
kgpg_LDFLAGS = $(all_libraries) $(KDE_RPATH)
appsdir = $(kde_datadir)/kgpg
apps_DATA = kgpg.rc listkeys.rc tips
KDE_ICON = kgpg
#>- all: all-recursive
#>+ 1
all: docs-am  all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
#>- 	@for dep in $?; do \
#>- 	  case '$(am__configure_deps)' in \
#>- 	    *$$dep*) \
#>- 	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
#>- 		&& exit 0; \
#>- 	      exit 1;; \
#>- 	  esac; \
#>- 	done; \
#>- 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  kgpg/Makefile'; \
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --foreign  kgpg/Makefile
#>+ 12
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  kgpg/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  kgpg/Makefile
	cd $(top_srcdir) && perl admin/am_edit kgpg/Makefile.in
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
kgpg$(EXEEXT): $(kgpg_OBJECTS) $(kgpg_DEPENDENCIES) 
	@rm -f kgpg$(EXEEXT)
	$(kgpg_LINK) $(kgpg_OBJECTS) $(kgpg_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/detailedconsole.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/keygener.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/keyinfowidget.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/keyservers.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kgpg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kgpgeditor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kgpginterface.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kgpglibrary.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kgpgoptions.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kgpgview.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/listkeys.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/popuppublic.Po@am__quote@

.cpp.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-appsDATA: $(apps_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(appsdir)" || $(MKDIR_P) "$(DESTDIR)$(appsdir)"
	@list='$(apps_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(appsDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(appsdir)/$$f'"; \
	  $(appsDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(appsdir)/$$f"; \
	done

uninstall-appsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(apps_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(appsdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(appsdir)/$$f"; \
	done
install-autostartDATA: $(autostart_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(autostartdir)" || $(MKDIR_P) "$(DESTDIR)$(autostartdir)"
	@list='$(autostart_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(autostartDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(autostartdir)/$$f'"; \
	  $(autostartDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(autostartdir)/$$f"; \
	done

uninstall-autostartDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(autostart_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(autostartdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(autostartdir)/$$f"; \
	done
install-kde_kcfgDATA: $(kde_kcfg_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(kde_kcfgdir)" || $(MKDIR_P) "$(DESTDIR)$(kde_kcfgdir)"
	@list='$(kde_kcfg_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(kde_kcfgDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(kde_kcfgdir)/$$f'"; \
	  $(kde_kcfgDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(kde_kcfgdir)/$$f"; \
	done

uninstall-kde_kcfgDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(kde_kcfg_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(kde_kcfgdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(kde_kcfgdir)/$$f"; \
	done
install-picsDATA: $(pics_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(picsdir)" || $(MKDIR_P) "$(DESTDIR)$(picsdir)"
	@list='$(pics_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(picsDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(picsdir)/$$f'"; \
	  $(picsDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(picsdir)/$$f"; \
	done

uninstall-picsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(pics_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(picsdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(picsdir)/$$f"; \
	done
install-serviceDATA: $(service_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(servicedir)" || $(MKDIR_P) "$(DESTDIR)$(servicedir)"
	@list='$(service_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(serviceDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(servicedir)/$$f'"; \
	  $(serviceDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(servicedir)/$$f"; \
	done

uninstall-serviceDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(service_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(servicedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(servicedir)/$$f"; \
	done
install-xdg_appsDATA: $(xdg_apps_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(xdg_appsdir)" || $(MKDIR_P) "$(DESTDIR)$(xdg_appsdir)"
	@list='$(xdg_apps_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(xdg_appsDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(xdg_appsdir)/$$f'"; \
	  $(xdg_appsDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(xdg_appsdir)/$$f"; \
	done

uninstall-xdg_appsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(xdg_apps_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(xdg_appsdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(xdg_appsdir)/$$f"; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) $(DATA)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(appsdir)" "$(DESTDIR)$(autostartdir)" "$(DESTDIR)$(kde_kcfgdir)" "$(DESTDIR)$(picsdir)" "$(DESTDIR)$(servicedir)" "$(DESTDIR)$(xdg_appsdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

#>- clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
#>+ 1
clean-am: clean-metasources clean-idl clean-ui clean-kcfg clean-bcheck clean-final  clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

#>- install-data-am: install-appsDATA install-autostartDATA \
#>- 	install-kde_kcfgDATA install-picsDATA install-serviceDATA \
#>- 	install-xdg_appsDATA
#>+ 3
install-data-am: install-kde-icons  install-appsDATA install-autostartDATA \
	install-kde_kcfgDATA install-picsDATA install-serviceDATA \
	install-xdg_appsDATA

install-dvi: install-dvi-recursive

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-info: install-info-recursive

install-man:

install-pdf: install-pdf-recursive

install-ps: install-ps-recursive

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

#>- uninstall-am: uninstall-appsDATA uninstall-autostartDATA \
#>- 	uninstall-binPROGRAMS uninstall-kde_kcfgDATA \
#>- 	uninstall-picsDATA uninstall-serviceDATA \
#>- 	uninstall-xdg_appsDATA
#>+ 4
uninstall-am: uninstall-kde-icons  uninstall-appsDATA uninstall-autostartDATA \
	uninstall-binPROGRAMS uninstall-kde_kcfgDATA \
	uninstall-picsDATA uninstall-serviceDATA \
	uninstall-xdg_appsDATA

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) install-am \
	install-strip

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-appsDATA install-autostartDATA \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-kde_kcfgDATA install-man install-pdf install-pdf-am \
	install-picsDATA install-ps install-ps-am install-serviceDATA \
	install-strip install-xdg_appsDATA installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am uninstall-appsDATA \
	uninstall-autostartDATA uninstall-binPROGRAMS \
	uninstall-kde_kcfgDATA uninstall-picsDATA \
	uninstall-serviceDATA uninstall-xdg_appsDATA


messages: rc.cpp
	$(PREPARETIPS) > tips.cpp
	LIST=`find . -name \*.h -o -name \*.hh -o -name \*.H -o -name \*.hxx -o -name \*.hpp -o -name \*.cpp -o -name \*.cc -o -name \*.cxx -o -name \*.ecpp -o -name \*.C`; \
	if test -n "$$LIST"; then \
	 $(XGETTEXT) $$LIST -o $(podir)/kgpg.pot; \
	fi
	rm -f tips.cpp
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 5
dcopiface.kidl: $(srcdir)/dcopiface.h $(DCOP_DEPENDENCIES)
	$(DCOPIDL) $(srcdir)/dcopiface.h > dcopiface.kidl || ( rm -f dcopiface.kidl ; false )
dcopiface_skel.cpp: dcopiface.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-stub dcopiface.kidl

#>+ 3
kgpglibrary.moc: $(srcdir)/kgpglibrary.h
	$(MOC) $(srcdir)/kgpglibrary.h -o kgpglibrary.moc

#>+ 2
mocs: kgpglibrary.moc

#>+ 3
keygener.moc: $(srcdir)/keygener.h
	$(MOC) $(srcdir)/keygener.h -o keygener.moc

#>+ 2
mocs: keygener.moc

#>+ 3
kgpg.moc: $(srcdir)/kgpg.h
	$(MOC) $(srcdir)/kgpg.h -o kgpg.moc

#>+ 2
mocs: kgpg.moc

#>+ 3
kgpgoptions.moc: $(srcdir)/kgpgoptions.h
	$(MOC) $(srcdir)/kgpgoptions.h -o kgpgoptions.moc

#>+ 2
mocs: kgpgoptions.moc

#>+ 3
kgpginterface.moc: $(srcdir)/kgpginterface.h
	$(MOC) $(srcdir)/kgpginterface.h -o kgpginterface.moc

#>+ 2
mocs: kgpginterface.moc

#>+ 3
kgpgeditor.moc: $(srcdir)/kgpgeditor.h
	$(MOC) $(srcdir)/kgpgeditor.h -o kgpgeditor.moc

#>+ 2
mocs: kgpgeditor.moc

#>+ 3
kgpgview.moc: $(srcdir)/kgpgview.h
	$(MOC) $(srcdir)/kgpgview.h -o kgpgview.moc

#>+ 2
mocs: kgpgview.moc

#>+ 3
listkeys.moc: $(srcdir)/listkeys.h
	$(MOC) $(srcdir)/listkeys.h -o listkeys.moc

#>+ 2
mocs: listkeys.moc

#>+ 3
keyservers.moc: $(srcdir)/keyservers.h
	$(MOC) $(srcdir)/keyservers.h -o keyservers.moc

#>+ 2
mocs: keyservers.moc

#>+ 3
popuppublic.moc: $(srcdir)/popuppublic.h
	$(MOC) $(srcdir)/popuppublic.h -o popuppublic.moc

#>+ 2
mocs: popuppublic.moc

#>+ 3
keyinfowidget.moc: $(srcdir)/keyinfowidget.h
	$(MOC) $(srcdir)/keyinfowidget.h -o keyinfowidget.moc

#>+ 2
mocs: keyinfowidget.moc

#>+ 3
clean-metasources:
	-rm -f  kgpglibrary.moc keygener.moc kgpg.moc kgpgoptions.moc kgpginterface.moc kgpgeditor.moc kgpgview.moc listkeys.moc keyservers.moc popuppublic.moc keyinfowidget.moc

#>+ 2
KDE_DIST=kgpg_docked.png listkeys.rc sourceselect.ui kgpg_blank.png conf_servers.ui conf_ui2.ui kgpglibrary.h kgpg.rc kgpg_docked.gif keyserver.ui conf_encryption.ui.h kgpgsettings_addons.h searchres.ui kgpg_anim.gif encryptfolder.desktop kgpg_fill.png kgpgrevokewidget.ui encryptfile.desktop hi22-app-kgpg.png kgpgwizard.ui kgpginterface.h listkeys.h tips newkey.ui.h conf_gpg.ui groupedit.ui hi48-app-kgpg.png kgpg.h kgpgoptions.h kgpg.kcfg kgpgrevokewidget.ui.h keyproperties.ui dcopiface.h conf_misc.ui adduid.ui keyservers.h kgpgview.h hi32-app-kgpg.png keygener.h Makefile.in keyinfowidget.h keyexport.ui.h conf_encryption.ui newkey.ui kgpgeditor.h kgpg.desktop hi16-app-kgpg.png conf_decryption.ui Makefile.am popuppublic.h detailedconsole.h kgpgsettings.kcfgc keyexport.ui 

#>+ 4
clean-idl:
	-rm -f \
	dcopiface_skel.cpp dcopiface_skel.h dcopiface.kidl 

#>+ 19
clean-ui:
	-rm -f \
	keyserver.cpp keyserver.h keyserver.moc \
	searchres.cpp searchres.h searchres.moc \
	kgpgwizard.cpp kgpgwizard.h kgpgwizard.moc \
	keyproperties.cpp keyproperties.h keyproperties.moc \
	conf_encryption.cpp conf_encryption.h conf_encryption.moc \
	conf_decryption.cpp conf_decryption.h conf_decryption.moc \
	conf_gpg.cpp conf_gpg.h conf_gpg.moc \
	groupedit.cpp groupedit.h groupedit.moc \
	kgpgrevokewidget.cpp kgpgrevokewidget.h kgpgrevokewidget.moc \
	newkey.cpp newkey.h newkey.moc \
	adduid.cpp adduid.h adduid.moc \
	keyexport.cpp keyexport.h keyexport.moc \
	sourceselect.cpp sourceselect.h sourceselect.moc \
	conf_servers.cpp conf_servers.h conf_servers.moc \
	conf_ui2.cpp conf_ui2.h conf_ui2.moc \
	conf_misc.cpp conf_misc.h conf_misc.moc 

#>+ 4
clean-kcfg:
	-rm -f \
	kgpgsettings.cpp kgpgsettings.h 

#>+ 2
docs-am:

#>+ 16
install-kde-icons:
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps
	$(INSTALL_DATA) $(srcdir)/hi32-app-kgpg.png $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/kgpg.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps
	$(INSTALL_DATA) $(srcdir)/hi48-app-kgpg.png $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps/kgpg.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/22x22/apps
	$(INSTALL_DATA) $(srcdir)/hi22-app-kgpg.png $(DESTDIR)$(kde_icondir)/hicolor/22x22/apps/kgpg.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps
	$(INSTALL_DATA) $(srcdir)/hi16-app-kgpg.png $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/kgpg.png

uninstall-kde-icons:
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/kgpg.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps/kgpg.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/22x22/apps/kgpg.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/kgpg.png

#>+ 15
force-reedit:
		@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  kgpg/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  kgpg/Makefile
	cd $(top_srcdir) && perl admin/am_edit kgpg/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-recursive

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
kgpg.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/kgpgoptions.cpp $(srcdir)/listkeys.cpp $(srcdir)/popuppublic.cpp $(srcdir)/kgpgview.cpp $(srcdir)/kgpg.cpp $(srcdir)/main.cpp $(srcdir)/keygener.cpp $(srcdir)/kgpginterface.cpp $(srcdir)/keyservers.cpp $(srcdir)/kgpgeditor.cpp $(srcdir)/detailedconsole.cpp $(srcdir)/kgpglibrary.cpp $(srcdir)/keyinfowidget.cpp dcopiface_skel.cpp keyserver.cpp searchres.cpp kgpgwizard.cpp keyproperties.cpp conf_encryption.cpp conf_decryption.cpp conf_gpg.cpp groupedit.cpp kgpgrevokewidget.cpp newkey.cpp adduid.cpp keyexport.cpp sourceselect.cpp conf_servers.cpp conf_ui2.cpp conf_misc.cpp kgpgsettings.cpp  keyserver.moc keygener.moc conf_misc.moc kgpgrevokewidget.moc searchres.moc listkeys.moc kgpgview.moc sourceselect.moc adduid.moc keyinfowidget.moc popuppublic.moc newkey.moc keyproperties.moc conf_gpg.moc keyexport.moc kgpglibrary.moc conf_decryption.moc kgpg.moc kgpgoptions.moc kgpginterface.moc kgpgeditor.moc conf_encryption.moc conf_servers.moc groupedit.moc keyservers.moc conf_ui2.moc kgpgwizard.moc
	@echo 'creating kgpg.all_cpp.cpp ...'; \
	rm -f kgpg.all_cpp.files kgpg.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> kgpg.all_cpp.final; \
	for file in kgpgoptions.cpp listkeys.cpp popuppublic.cpp kgpgview.cpp kgpg.cpp main.cpp keygener.cpp kgpginterface.cpp keyservers.cpp kgpgeditor.cpp detailedconsole.cpp kgpglibrary.cpp keyinfowidget.cpp dcopiface_skel.cpp keyserver.cpp searchres.cpp kgpgwizard.cpp keyproperties.cpp conf_encryption.cpp conf_decryption.cpp conf_gpg.cpp groupedit.cpp kgpgrevokewidget.cpp newkey.cpp adduid.cpp keyexport.cpp sourceselect.cpp conf_servers.cpp conf_ui2.cpp conf_misc.cpp kgpgsettings.cpp ; do \
	  echo "#include \"$$file\"" >> kgpg.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> kgpg.all_cpp.final; \
	done; \
	cat kgpg.all_cpp.final kgpg.all_cpp.files > kgpg.all_cpp.cpp; \
	rm -f kgpg.all_cpp.final kgpg.all_cpp.files

#>+ 3
clean-final:
	-rm -f kgpg.all_cpp.cpp

#>+ 3
final:
	$(MAKE) kgpg_OBJECTS="$(kgpg_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) kgpg_OBJECTS="$(kgpg_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) kgpg_OBJECTS="$(kgpg_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) kgpg_OBJECTS="$(kgpg_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 38
$(srcdir)/popuppublic.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
kgpgoptions.lo: kgpgoptions.moc 
$(srcdir)/keyservers.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
$(srcdir)/main.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
$(srcdir)/kgpglibrary.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
$(srcdir)/kgpginterface.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
$(srcdir)/listkeys.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
listkeys.lo: listkeys.moc 
kgpgview.o: kgpgview.moc 
kgpglibrary.o: kgpglibrary.moc 
$(srcdir)/keygener.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
kgpg.o: kgpg.moc 
nmcheck-am: nmcheck
$(srcdir)/keyinfowidget.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
keyservers.o: keyservers.moc 
listkeys.o: listkeys.moc 
keyinfowidget.lo: keyinfowidget.moc 
$(srcdir)/kgpg.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
$(srcdir)/kgpgview.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
popuppublic.o: popuppublic.moc 
$(srcdir)/detailedconsole.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
kgpg.lo: kgpg.moc 
kgpgeditor.o: kgpgeditor.moc 
kgpgeditor.lo: kgpgeditor.moc 
keyinfowidget.o: keyinfowidget.moc 
kgpginterface.o: kgpginterface.moc 
kgpgoptions.o: kgpgoptions.moc 
keygener.lo: keygener.moc 
kgpginterface.lo: kgpginterface.moc 
nmcheck: 
kgpglibrary.lo: kgpglibrary.moc 
$(srcdir)/kgpgoptions.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
popuppublic.lo: popuppublic.moc 
$(srcdir)/kgpgeditor.cpp: keyserver.h searchres.h kgpgwizard.h keyproperties.h conf_encryption.h conf_decryption.h conf_gpg.h groupedit.h kgpgrevokewidget.h newkey.h adduid.h keyexport.h sourceselect.h conf_servers.h conf_ui2.h conf_misc.h kgpgsettings.h 
keygener.o: keygener.moc 
keyservers.lo: keyservers.moc 
kgpgview.lo: kgpgview.moc 

#>+ 246
adduid.cpp: $(srcdir)/adduid.ui adduid.h adduid.moc
	rm -f adduid.cpp
	echo '#include <kdialog.h>' > adduid.cpp
	echo '#include <klocale.h>' >> adduid.cpp
	$(UIC) -tr ${UIC_TR} -i adduid.h $(srcdir)/adduid.ui > adduid.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" adduid.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_adduid,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> adduid.cpp ;\
	rm -f adduid.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "adduid.moc"' >> adduid.cpp; else rm -f adduid.cpp ; exit $$ret ; fi

adduid.h: $(srcdir)/adduid.ui
	rm -rf adduid.h;
	$(UIC) $(srcdir)/adduid.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> adduid.h ;
adduid.moc: adduid.h
	$(MOC) adduid.h -o adduid.moc

keyexport.cpp: $(srcdir)/keyexport.ui keyexport.h keyexport.moc
	rm -f keyexport.cpp
	echo '#include <kdialog.h>' > keyexport.cpp
	echo '#include <klocale.h>' >> keyexport.cpp
	$(UIC) -tr ${UIC_TR} -i keyexport.h $(srcdir)/keyexport.ui > keyexport.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" keyexport.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_keyexport,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> keyexport.cpp ;\
	rm -f keyexport.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "keyexport.moc"' >> keyexport.cpp; else rm -f keyexport.cpp ; exit $$ret ; fi

keyexport.h: $(srcdir)/keyexport.ui
	rm -rf keyexport.h;
	$(UIC) $(srcdir)/keyexport.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> keyexport.h ;
keyexport.moc: keyexport.h
	$(MOC) keyexport.h -o keyexport.moc

groupedit.cpp: $(srcdir)/groupedit.ui groupedit.h groupedit.moc
	rm -f groupedit.cpp
	echo '#include <kdialog.h>' > groupedit.cpp
	echo '#include <klocale.h>' >> groupedit.cpp
	$(UIC) -tr ${UIC_TR} -i groupedit.h $(srcdir)/groupedit.ui > groupedit.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" groupedit.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_groupedit,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> groupedit.cpp ;\
	rm -f groupedit.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "groupedit.moc"' >> groupedit.cpp; else rm -f groupedit.cpp ; exit $$ret ; fi

groupedit.h: $(srcdir)/groupedit.ui
	rm -rf groupedit.h;
	$(UIC) $(srcdir)/groupedit.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> groupedit.h ;
groupedit.moc: groupedit.h
	$(MOC) groupedit.h -o groupedit.moc

kgpgrevokewidget.cpp: $(srcdir)/kgpgrevokewidget.ui kgpgrevokewidget.h kgpgrevokewidget.moc
	rm -f kgpgrevokewidget.cpp
	echo '#include <kdialog.h>' > kgpgrevokewidget.cpp
	echo '#include <klocale.h>' >> kgpgrevokewidget.cpp
	$(UIC) -tr ${UIC_TR} -i kgpgrevokewidget.h $(srcdir)/kgpgrevokewidget.ui > kgpgrevokewidget.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" kgpgrevokewidget.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_kgpgrevokewidget,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> kgpgrevokewidget.cpp ;\
	rm -f kgpgrevokewidget.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "kgpgrevokewidget.moc"' >> kgpgrevokewidget.cpp; else rm -f kgpgrevokewidget.cpp ; exit $$ret ; fi

kgpgrevokewidget.h: $(srcdir)/kgpgrevokewidget.ui
	rm -rf kgpgrevokewidget.h;
	$(UIC) $(srcdir)/kgpgrevokewidget.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> kgpgrevokewidget.h ;
kgpgrevokewidget.moc: kgpgrevokewidget.h
	$(MOC) kgpgrevokewidget.h -o kgpgrevokewidget.moc

searchres.cpp: $(srcdir)/searchres.ui searchres.h searchres.moc
	rm -f searchres.cpp
	echo '#include <kdialog.h>' > searchres.cpp
	echo '#include <klocale.h>' >> searchres.cpp
	$(UIC) -tr ${UIC_TR} -i searchres.h $(srcdir)/searchres.ui > searchres.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" searchres.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_searchres,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> searchres.cpp ;\
	rm -f searchres.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "searchres.moc"' >> searchres.cpp; else rm -f searchres.cpp ; exit $$ret ; fi

searchres.h: $(srcdir)/searchres.ui
	rm -rf searchres.h;
	$(UIC) $(srcdir)/searchres.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> searchres.h ;
searchres.moc: searchres.h
	$(MOC) searchres.h -o searchres.moc

conf_ui2.cpp: $(srcdir)/conf_ui2.ui conf_ui2.h conf_ui2.moc
	rm -f conf_ui2.cpp
	echo '#include <kdialog.h>' > conf_ui2.cpp
	echo '#include <klocale.h>' >> conf_ui2.cpp
	$(UIC) -tr ${UIC_TR} -i conf_ui2.h $(srcdir)/conf_ui2.ui > conf_ui2.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" conf_ui2.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_conf_ui2,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> conf_ui2.cpp ;\
	rm -f conf_ui2.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "conf_ui2.moc"' >> conf_ui2.cpp; else rm -f conf_ui2.cpp ; exit $$ret ; fi

conf_ui2.h: $(srcdir)/conf_ui2.ui
	rm -rf conf_ui2.h;
	$(UIC) $(srcdir)/conf_ui2.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> conf_ui2.h ;
conf_ui2.moc: conf_ui2.h
	$(MOC) conf_ui2.h -o conf_ui2.moc

keyproperties.cpp: $(srcdir)/keyproperties.ui keyproperties.h keyproperties.moc
	rm -f keyproperties.cpp
	echo '#include <kdialog.h>' > keyproperties.cpp
	echo '#include <klocale.h>' >> keyproperties.cpp
	$(UIC) -tr ${UIC_TR} -i keyproperties.h $(srcdir)/keyproperties.ui > keyproperties.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" keyproperties.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_keyproperties,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> keyproperties.cpp ;\
	rm -f keyproperties.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "keyproperties.moc"' >> keyproperties.cpp; else rm -f keyproperties.cpp ; exit $$ret ; fi

keyproperties.h: $(srcdir)/keyproperties.ui
	rm -rf keyproperties.h;
	$(UIC) $(srcdir)/keyproperties.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> keyproperties.h ;
keyproperties.moc: keyproperties.h
	$(MOC) keyproperties.h -o keyproperties.moc

conf_decryption.cpp: $(srcdir)/conf_decryption.ui conf_decryption.h conf_decryption.moc
	rm -f conf_decryption.cpp
	echo '#include <kdialog.h>' > conf_decryption.cpp
	echo '#include <klocale.h>' >> conf_decryption.cpp
	$(UIC) -tr ${UIC_TR} -i conf_decryption.h $(srcdir)/conf_decryption.ui > conf_decryption.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" conf_decryption.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_conf_decryption,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> conf_decryption.cpp ;\
	rm -f conf_decryption.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "conf_decryption.moc"' >> conf_decryption.cpp; else rm -f conf_decryption.cpp ; exit $$ret ; fi

conf_decryption.h: $(srcdir)/conf_decryption.ui
	rm -rf conf_decryption.h;
	$(UIC) $(srcdir)/conf_decryption.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> conf_decryption.h ;
conf_decryption.moc: conf_decryption.h
	$(MOC) conf_decryption.h -o conf_decryption.moc

conf_misc.cpp: $(srcdir)/conf_misc.ui conf_misc.h conf_misc.moc
	rm -f conf_misc.cpp
	echo '#include <kdialog.h>' > conf_misc.cpp
	echo '#include <klocale.h>' >> conf_misc.cpp
	$(UIC) -tr ${UIC_TR} -i conf_misc.h $(srcdir)/conf_misc.ui > conf_misc.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" conf_misc.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_conf_misc,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> conf_misc.cpp ;\
	rm -f conf_misc.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "conf_misc.moc"' >> conf_misc.cpp; else rm -f conf_misc.cpp ; exit $$ret ; fi

conf_misc.h: $(srcdir)/conf_misc.ui
	rm -rf conf_misc.h;
	$(UIC) $(srcdir)/conf_misc.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> conf_misc.h ;
conf_misc.moc: conf_misc.h
	$(MOC) conf_misc.h -o conf_misc.moc

conf_encryption.cpp: $(srcdir)/conf_encryption.ui conf_encryption.h conf_encryption.moc
	rm -f conf_encryption.cpp
	echo '#include <kdialog.h>' > conf_encryption.cpp
	echo '#include <klocale.h>' >> conf_encryption.cpp
	$(UIC) -tr ${UIC_TR} -i conf_encryption.h $(srcdir)/conf_encryption.ui > conf_encryption.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" conf_encryption.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_conf_encryption,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> conf_encryption.cpp ;\
	rm -f conf_encryption.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "conf_encryption.moc"' >> conf_encryption.cpp; else rm -f conf_encryption.cpp ; exit $$ret ; fi

conf_encryption.h: $(srcdir)/conf_encryption.ui
	rm -rf conf_encryption.h;
	$(UIC) $(srcdir)/conf_encryption.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> conf_encryption.h ;
conf_encryption.moc: conf_encryption.h
	$(MOC) conf_encryption.h -o conf_encryption.moc

kgpgsettings.cpp: kgpgsettings.h
kgpgsettings.h: $(srcdir)/kgpg.kcfg $(srcdir)/kgpgsettings.kcfgc $(KCFG_DEPENDENCIES)
	$(KCONFIG_COMPILER) $(srcdir)/kgpg.kcfg $(srcdir)/kgpgsettings.kcfgc; ret=$$?; \
	if test "$$ret" != 0; then rm -f kgpgsettings.h ; exit $$ret ;  fi


keyserver.cpp: $(srcdir)/keyserver.ui keyserver.h keyserver.moc
	rm -f keyserver.cpp
	echo '#include <kdialog.h>' > keyserver.cpp
	echo '#include <klocale.h>' >> keyserver.cpp
	$(UIC) -tr ${UIC_TR} -i keyserver.h $(srcdir)/keyserver.ui > keyserver.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" keyserver.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_keyserver,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> keyserver.cpp ;\
	rm -f keyserver.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "keyserver.moc"' >> keyserver.cpp; else rm -f keyserver.cpp ; exit $$ret ; fi

keyserver.h: $(srcdir)/keyserver.ui
	rm -rf keyserver.h;
	$(UIC) $(srcdir)/keyserver.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> keyserver.h ;
keyserver.moc: keyserver.h
	$(MOC) keyserver.h -o keyserver.moc

sourceselect.cpp: $(srcdir)/sourceselect.ui sourceselect.h sourceselect.moc
	rm -f sourceselect.cpp
	echo '#include <kdialog.h>' > sourceselect.cpp
	echo '#include <klocale.h>' >> sourceselect.cpp
	$(UIC) -tr ${UIC_TR} -i sourceselect.h $(srcdir)/sourceselect.ui > sourceselect.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" sourceselect.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_sourceselect,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> sourceselect.cpp ;\
	rm -f sourceselect.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "sourceselect.moc"' >> sourceselect.cpp; else rm -f sourceselect.cpp ; exit $$ret ; fi

sourceselect.h: $(srcdir)/sourceselect.ui
	rm -rf sourceselect.h;
	$(UIC) $(srcdir)/sourceselect.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> sourceselect.h ;
sourceselect.moc: sourceselect.h
	$(MOC) sourceselect.h -o sourceselect.moc

kgpgwizard.cpp: $(srcdir)/kgpgwizard.ui kgpgwizard.h kgpgwizard.moc
	rm -f kgpgwizard.cpp
	echo '#include <kdialog.h>' > kgpgwizard.cpp
	echo '#include <klocale.h>' >> kgpgwizard.cpp
	$(UIC) -tr ${UIC_TR} -i kgpgwizard.h $(srcdir)/kgpgwizard.ui > kgpgwizard.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" kgpgwizard.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_kgpgwizard,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> kgpgwizard.cpp ;\
	rm -f kgpgwizard.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "kgpgwizard.moc"' >> kgpgwizard.cpp; else rm -f kgpgwizard.cpp ; exit $$ret ; fi

kgpgwizard.h: $(srcdir)/kgpgwizard.ui
	rm -rf kgpgwizard.h;
	$(UIC) $(srcdir)/kgpgwizard.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> kgpgwizard.h ;
kgpgwizard.moc: kgpgwizard.h
	$(MOC) kgpgwizard.h -o kgpgwizard.moc

conf_gpg.cpp: $(srcdir)/conf_gpg.ui conf_gpg.h conf_gpg.moc
	rm -f conf_gpg.cpp
	echo '#include <kdialog.h>' > conf_gpg.cpp
	echo '#include <klocale.h>' >> conf_gpg.cpp
	$(UIC) -tr ${UIC_TR} -i conf_gpg.h $(srcdir)/conf_gpg.ui > conf_gpg.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" conf_gpg.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_conf_gpg,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> conf_gpg.cpp ;\
	rm -f conf_gpg.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "conf_gpg.moc"' >> conf_gpg.cpp; else rm -f conf_gpg.cpp ; exit $$ret ; fi

conf_gpg.h: $(srcdir)/conf_gpg.ui
	rm -rf conf_gpg.h;
	$(UIC) $(srcdir)/conf_gpg.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> conf_gpg.h ;
conf_gpg.moc: conf_gpg.h
	$(MOC) conf_gpg.h -o conf_gpg.moc

conf_servers.cpp: $(srcdir)/conf_servers.ui conf_servers.h conf_servers.moc
	rm -f conf_servers.cpp
	echo '#include <kdialog.h>' > conf_servers.cpp
	echo '#include <klocale.h>' >> conf_servers.cpp
	$(UIC) -tr ${UIC_TR} -i conf_servers.h $(srcdir)/conf_servers.ui > conf_servers.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" conf_servers.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_conf_servers,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> conf_servers.cpp ;\
	rm -f conf_servers.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "conf_servers.moc"' >> conf_servers.cpp; else rm -f conf_servers.cpp ; exit $$ret ; fi

conf_servers.h: $(srcdir)/conf_servers.ui
	rm -rf conf_servers.h;
	$(UIC) $(srcdir)/conf_servers.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> conf_servers.h ;
conf_servers.moc: conf_servers.h
	$(MOC) conf_servers.h -o conf_servers.moc

newkey.cpp: $(srcdir)/newkey.ui newkey.h newkey.moc
	rm -f newkey.cpp
	echo '#include <kdialog.h>' > newkey.cpp
	echo '#include <klocale.h>' >> newkey.cpp
	$(UIC) -tr ${UIC_TR} -i newkey.h $(srcdir)/newkey.ui > newkey.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" newkey.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_newkey,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> newkey.cpp ;\
	rm -f newkey.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "newkey.moc"' >> newkey.cpp; else rm -f newkey.cpp ; exit $$ret ; fi

newkey.h: $(srcdir)/newkey.ui
	rm -rf newkey.h;
	$(UIC) $(srcdir)/newkey.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> newkey.h ;
newkey.moc: newkey.h
	$(MOC) newkey.h -o newkey.moc
