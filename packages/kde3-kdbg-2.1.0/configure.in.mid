dnl Checks for header files.
AC_LANG_C dnl switch to C
AC_HEADER_DIRENT dnl check for dirent.h
AC_HEADER_STDC dnl check for other stdc headers. More traditional ;)
dnl check for some more header files. You can remove some of
dnl them, if you want to. But it doesn't hurt
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h sys/cdefs.h)
AC_CHECK_HEADERS(fnmatch.h sysent.h strings.h sys/stat.h)
AC_CHECK_HEADERS(sys/ioctl.h pty.h libutil.h util.h)

dnl Checks for libraries.
AC_CHECK_LIB(socket, socket, [LIBSOCKET="-lsocket -lnsl"]) dnl for Solaris' X11
AC_SUBST(LIBSOCKET)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_TIME

dnl Checks for library functions.
AC_CHECK_FUNCS(setpgid putenv socket vsnprintf mkfifo)

dnl pseudo tty support in glibc2
AC_SEARCH_LIBS(openpty, util,
  AC_DEFINE_UNQUOTED(HAVE_FUNC_OPENPTY, 1, [Define if you have openpty]))

dnl Check whether we want much debugging output
AH_TEMPLATE([WANT_TRACE_OUTPUT],
  [Define if you want to see voluminous trace output])
AC_MSG_CHECKING([whether kdbg should generate lots of trace output])
dnl Default is no trace output
AC_ARG_ENABLE(lots-a-trace,
  [  --enable-lots-a-trace   generate lots of trace output [default=no]],
  WANT_TRACE_OUTPUT=$enableval, WANT_TRACE_OUTPUT=no)
AC_MSG_RESULT($WANT_TRACE_OUTPUT)
if test "x$WANT_TRACE_OUTPUT" = "xyes"; then
  AC_DEFINE_UNQUOTED(WANT_TRACE_OUTPUT)
fi

dnl Check whether test programs should be compiled
dnl Default is not to compile them
AC_ARG_ENABLE(testprogs,
  [  --enable-testprogs      compile test programs [default=no]],
  [buildtestprogs=$enableval],[buildtestprogs=no])
AM_CONDITIONAL(BUILDTESTPROGS,test "x$buildtestprogs" = "xyes")
dnl write a notice into the log
echo "build test programs: $buildtestprogs" >&5

dnl Check where the communication with gdb should be logged
AC_MSG_CHECKING([where communication with gdb should be logged])
dnl Default is ./gdb-transcript until kdbg is released
AC_ARG_WITH(transcript,
  [  --with-transcript=file  log communication with gdb [default=not logged]],
  GDB_TRANSCRIPT=$withval, GDB_TRANSCRIPT=no)
if test "x$GDB_TRANSCRIPT" = "xyes"; then
  GDB_TRANSCRIPT="./gdb-transcript"
fi
if test "x$GDB_TRANSCRIPT" = "xno"; then
  GDB_TRANSCRIPT="not logged"
else
  dnl add quotes
  GDB_TRANSCRIPT=\"$GDB_TRANSCRIPT\"
  AC_DEFINE_UNQUOTED(GDB_TRANSCRIPT, $GDB_TRANSCRIPT,
    [Define to the name of the file that communication with gdb
   should be logged to; undefine it for no logging])
fi
AC_MSG_RESULT($GDB_TRANSCRIPT)

dnl Check whether placement new works
AH_TEMPLATE([HAVE_PLACEMENT_NEW],[Define if placement new works])
AC_LANG_CPLUSPLUS
AC_MSG_CHECKING(whether placement new is available)
AC_CACHE_VAL(ac_cv_have_placement_new,
[
AC_TRY_COMPILE([
#include <new>
],
[
int ii;
new(&ii) int;
],
ac_cv_have_placement_new=yes,
ac_cv_have_placement_new=no)
])
AC_MSG_RESULT($ac_cv_have_placement_new)
if eval "test \"`echo `$ac_cv_have_placement_new\" = yes"; then
  AC_DEFINE(HAVE_PLACEMENT_NEW)
fi

dnl -----------------
AC_PATH_PROG(PS_COMMAND, ps)
if test -n "$PS_COMMAND"; then
  AC_MSG_CHECKING(for suitable ps invocation)

  PS_COMMAND="$PS_COMMAND -eo pid,ppid,uid,vsz,etime,time,args"
  if $PS_COMMAND > /dev/null 2>&1; then
    # works in principle; check output: extract first line, but avoid 'head -1'
    set x `$PS_COMMAND | (read firstline; echo "$firstline")`
    if test "$*" = "x PID PPID UID VSZ ELAPSED TIME COMMAND"; then
      : # fine
    else
      PS_COMMAND="" # not suitable
    fi
  else
    PS_COMMAND="" # not suitable
  fi

  if test -n "$PS_COMMAND"; then
    AC_MSG_RESULT($PS_COMMAND)
    PS_COMMAND=\"`echo $PS_COMMAND | sed -e 's/ /", "/g'`\"
    AC_DEFINE_UNQUOTED(PS_COMMAND, $PS_COMMAND,
      [Define how to invoke ps])
  else
    AC_MSG_RESULT([not suitable])
  fi
fi
AM_CONDITIONAL(HAVE_PS_COMMAND, test -n "$PS_COMMAND")
