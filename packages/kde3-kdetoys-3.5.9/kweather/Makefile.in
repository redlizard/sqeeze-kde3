# Makefile.in generated by automake 1.10.1 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@



VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
check_PROGRAMS = sun_test$(EXEEXT) stationdatabase_test$(EXEEXT) \
	metar_parser_test$(EXEEXT)
bin_PROGRAMS = kweatherservice$(EXEEXT)
subdir = kweather
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in AUTHORS
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(kde_moduledir)" \
	"$(DESTDIR)$(kdeinitdir)" "$(DESTDIR)$(libdir)" \
	"$(DESTDIR)$(bindir)" "$(DESTDIR)$(appletdir)" \
	"$(DESTDIR)$(kde_servicesdir)" "$(DESTDIR)$(kweatherdatadir)" \
	"$(DESTDIR)$(servicedir)" "$(DESTDIR)$(stationdir)"
kde_moduleLTLIBRARIES_INSTALL = $(INSTALL)
kdeinitLTLIBRARIES_INSTALL = $(INSTALL)
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(kde_module_LTLIBRARIES) $(kdeinit_LTLIBRARIES) \
	$(lib_LTLIBRARIES)
am__DEPENDENCIES_1 =
kcm_weather_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_kcm_weather_la_OBJECTS = kcmweather.lo
#>- kcm_weather_la_OBJECTS = $(am_kcm_weather_la_OBJECTS)
#>+ 4
kcm_weather_la_final_OBJECTS = kcm_weather_la.all_cpp.lo 
kcm_weather_la_nofinal_OBJECTS = kcmweather.lo weatherservice_stub.lo prefdialogdata.lo
@KDE_USE_FINAL_FALSE@kcm_weather_la_OBJECTS = $(kcm_weather_la_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@kcm_weather_la_OBJECTS = $(kcm_weather_la_final_OBJECTS)
#>- kcm_weather_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(kcm_weather_la_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
kcm_weather_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(kcm_weather_la_LDFLAGS) $(LDFLAGS) -o $@
kcm_weatherservice_la_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_kcm_weatherservice_la_OBJECTS = kcmweatherservice.lo \
	serviceconfigwidget.lo
#>- kcm_weatherservice_la_OBJECTS = $(am_kcm_weatherservice_la_OBJECTS)
#>+ 5
kcm_weatherservice_la_final_OBJECTS = kcm_weatherservice_la.all_cpp.lo 
kcm_weatherservice_la_nofinal_OBJECTS = kcmweatherservice.lo \
	serviceconfigwidget.lo weatherservice_stub.lo serviceconfigdata.lo
@KDE_USE_FINAL_FALSE@kcm_weatherservice_la_OBJECTS = $(kcm_weatherservice_la_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@kcm_weatherservice_la_OBJECTS = $(kcm_weatherservice_la_final_OBJECTS)
#>- kcm_weatherservice_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(kcm_weatherservice_la_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
kcm_weatherservice_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(kcm_weatherservice_la_LDFLAGS) $(LDFLAGS) -o $@
#>- kweatherreport_la_DEPENDENCIES = $(am__DEPENDENCIES_1) reportview.lo
#>+ 1
kweatherreport_la_DEPENDENCIES = libkdeinit_kweatherreport.la
#>- am_kweatherreport_la_OBJECTS = reportmain.lo
#>+ 1
am_kweatherreport_la_OBJECTS = kweatherreport_dummy.lo
#>- kweatherreport_la_OBJECTS = $(am_kweatherreport_la_OBJECTS)
#>+ 1
kweatherreport_la_OBJECTS = kweatherreport_dummy.lo
#>- kweatherreport_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(kweatherreport_la_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
kweatherreport_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(kweatherreport_la_LDFLAGS) $(LDFLAGS) -o $@
weather_panelapplet_la_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_weather_panelapplet_la_OBJECTS = reportview.lo kweather.lo \
	dockwidget.lo weatherbutton.lo
#>- weather_panelapplet_la_OBJECTS = $(am_weather_panelapplet_la_OBJECTS)
#>+ 5
weather_panelapplet_la_final_OBJECTS = weather_panelapplet_la.all_cpp.lo 
weather_panelapplet_la_nofinal_OBJECTS = reportview.lo kweather.lo \
	dockwidget.lo weatherbutton.lo weatherIface_skel.lo weatherservice_stub.lo
@KDE_USE_FINAL_FALSE@weather_panelapplet_la_OBJECTS = $(weather_panelapplet_la_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@weather_panelapplet_la_OBJECTS = $(weather_panelapplet_la_final_OBJECTS)
#>- weather_panelapplet_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(weather_panelapplet_la_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
weather_panelapplet_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(weather_panelapplet_la_LDFLAGS) $(LDFLAGS) -o $@
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
#>- PROGRAMS = $(bin_PROGRAMS)
#>+ 2
bin_PROGRAMS += kweatherreport$(EXEEXT) 
PROGRAMS = $(bin_PROGRAMS)
am_kweatherservice_OBJECTS = main.$(OBJEXT) metar_parser.$(OBJEXT) \
	weatherlib.$(OBJEXT) weatherservice.$(OBJEXT) \
	stationdatabase.$(OBJEXT) sun.$(OBJEXT)
#>- kweatherservice_OBJECTS = $(am_kweatherservice_OBJECTS)
#>+ 6
kweatherservice_final_OBJECTS = kweatherservice.all_cpp.o 
kweatherservice_nofinal_OBJECTS = main.$(OBJEXT) metar_parser.$(OBJEXT) \
	weatherlib.$(OBJEXT) weatherservice.$(OBJEXT) \
	stationdatabase.$(OBJEXT) sun.$(OBJEXT) weatherservice_skel.$(OBJEXT) weatherservice_stub.$(OBJEXT)
@KDE_USE_FINAL_FALSE@kweatherservice_OBJECTS = $(kweatherservice_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@kweatherservice_OBJECTS = $(kweatherservice_final_OBJECTS)
kweatherservice_DEPENDENCIES = $(am__DEPENDENCIES_1)
#>- kweatherservice_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(kweatherservice_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
kweatherservice_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(kweatherservice_LDFLAGS) $(LDFLAGS) -o $@
am_metar_parser_test_OBJECTS = metar_parser_test.$(OBJEXT) \
	metar_parser.$(OBJEXT) stationdatabase.$(OBJEXT) sun.$(OBJEXT)
#>- metar_parser_test_OBJECTS = $(am_metar_parser_test_OBJECTS)
#>+ 5
metar_parser_test_final_OBJECTS = metar_parser_test.all_cpp.o 
metar_parser_test_nofinal_OBJECTS = metar_parser_test.$(OBJEXT) \
	metar_parser.$(OBJEXT) stationdatabase.$(OBJEXT) sun.$(OBJEXT)
@KDE_USE_FINAL_FALSE@metar_parser_test_OBJECTS = $(metar_parser_test_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@metar_parser_test_OBJECTS = $(metar_parser_test_final_OBJECTS)
metar_parser_test_DEPENDENCIES =
#>- metar_parser_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(metar_parser_test_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
metar_parser_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(metar_parser_test_LDFLAGS) $(LDFLAGS) -o $@
am_stationdatabase_test_OBJECTS = stationdatabase_test.$(OBJEXT) \
	stationdatabase.$(OBJEXT)
#>- stationdatabase_test_OBJECTS = $(am_stationdatabase_test_OBJECTS)
#>+ 5
stationdatabase_test_final_OBJECTS = stationdatabase_test.all_cpp.o 
stationdatabase_test_nofinal_OBJECTS = stationdatabase_test.$(OBJEXT) \
	stationdatabase.$(OBJEXT)
@KDE_USE_FINAL_FALSE@stationdatabase_test_OBJECTS = $(stationdatabase_test_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@stationdatabase_test_OBJECTS = $(stationdatabase_test_final_OBJECTS)
stationdatabase_test_DEPENDENCIES =
#>- stationdatabase_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(stationdatabase_test_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
stationdatabase_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(stationdatabase_test_LDFLAGS) $(LDFLAGS) -o $@
am_sun_test_OBJECTS = sun_test.$(OBJEXT) sun.$(OBJEXT)
#>- sun_test_OBJECTS = $(am_sun_test_OBJECTS)
#>+ 4
sun_test_final_OBJECTS = sun_test.all_cpp.o 
sun_test_nofinal_OBJECTS = sun_test.$(OBJEXT) sun.$(OBJEXT)
@KDE_USE_FINAL_FALSE@sun_test_OBJECTS = $(sun_test_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@sun_test_OBJECTS = $(sun_test_final_OBJECTS)
sun_test_DEPENDENCIES =
#>- sun_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(sun_test_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
sun_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(sun_test_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
#>- 	$(LDFLAGS) -o $@
#>+ 3
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
#>- SOURCES = $(kcm_weather_la_SOURCES) $(kcm_weatherservice_la_SOURCES) \
#>- 	$(kweatherreport_la_SOURCES) $(weather_panelapplet_la_SOURCES) \
#>- 	$(kweatherservice_SOURCES) $(metar_parser_test_SOURCES) \
#>- 	$(stationdatabase_test_SOURCES) $(sun_test_SOURCES)
#>+ 4
SOURCES = $(kcm_weather_la_SOURCES) $(kcm_weatherservice_la_SOURCES) \
	$(kweatherreport_la_SOURCES) $(weather_panelapplet_la_SOURCES) \
	$(kweatherservice_SOURCES) $(metar_parser_test_SOURCES) \
	$(stationdatabase_test_SOURCES) $(sun_test_SOURCES) $(kweatherreport_SOURCES) 
#>- DIST_SOURCES = $(kcm_weather_la_SOURCES) \
#>- 	$(kcm_weatherservice_la_SOURCES) $(kweatherreport_la_SOURCES) \
#>- 	$(weather_panelapplet_la_SOURCES) $(kweatherservice_SOURCES) \
#>- 	$(metar_parser_test_SOURCES) $(stationdatabase_test_SOURCES) \
#>- 	$(sun_test_SOURCES)
#>+ 5
DIST_SOURCES = $(kcm_weather_la_SOURCES) \
	$(kcm_weatherservice_la_SOURCES) $(kweatherreport_la_SOURCES) \
	$(weather_panelapplet_la_SOURCES) $(kweatherservice_SOURCES) \
	$(metar_parser_test_SOURCES) $(stationdatabase_test_SOURCES) \
	$(sun_test_SOURCES) $(kweatherreport_SOURCES) 
#>- RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
#>- 	html-recursive info-recursive install-data-recursive \
#>- 	install-dvi-recursive install-exec-recursive \
#>- 	install-html-recursive install-info-recursive \
#>- 	install-pdf-recursive install-ps-recursive install-recursive \
#>- 	installcheck-recursive installdirs-recursive pdf-recursive \
#>- 	ps-recursive uninstall-recursive
#>+ 7
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive nmcheck-recursive bcheck-recursive
appletDATA_INSTALL = $(INSTALL_DATA)
kde_servicesDATA_INSTALL = $(INSTALL_DATA)
kweatherdataDATA_INSTALL = $(INSTALL_DATA)
serviceDATA_INSTALL = $(INSTALL_DATA)
stationDATA_INSTALL = $(INSTALL_DATA)
DATA = $(applet_DATA) $(kde_services_DATA) $(kweatherdata_DATA) \
	$(service_DATA) $(station_DATA)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
ARTSCCONFIG = @ARTSCCONFIG@
AUTOCONF = @AUTOCONF@
AUTODIRS = @AUTODIRS@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CONF_FILES = @CONF_FILES@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOPIDLNG = @DCOPIDLNG@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_PERMISSIVE_FLAG = @ENABLE_PERMISSIVE_FLAG@
EXEEXT = @EXEEXT@
F77 = @F77@
FFLAGS = @FFLAGS@
FRAMEWORK_COREAUDIO = @FRAMEWORK_COREAUDIO@
GMSGFMT = @GMSGFMT@
GREP = @GREP@
HAVE_GCC_VISIBILITY = @HAVE_GCC_VISIBILITY@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KCFG_DEPENDENCIES = @KCFG_DEPENDENCIES@
KCONFIG_COMPILER = @KCONFIG_COMPILER@
KDECONFIG = @KDECONFIG@
KDE_CHECK_PLUGIN = @KDE_CHECK_PLUGIN@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS = @KDE_MT_LDFLAGS@
KDE_MT_LIBS = @KDE_MT_LIBS@
KDE_NO_UNDEFINED = @KDE_NO_UNDEFINED@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
KDE_USE_FPIE = @KDE_USE_FPIE@
KDE_USE_NMCHECK_FALSE = @KDE_USE_NMCHECK_FALSE@
KDE_USE_NMCHECK_TRUE = @KDE_USE_NMCHECK_TRUE@
KDE_USE_PIE = @KDE_USE_PIE@
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
LDFLAGS = @LDFLAGS@
LDFLAGS_AS_NEEDED = @LDFLAGS_AS_NEEDED@
LDFLAGS_NEW_DTAGS = @LDFLAGS_NEW_DTAGS@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBJPEG = @LIBJPEG@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBRESOLV = @LIBRESOLV@
LIBS = @LIBS@
LIBSM = @LIBSM@
LIBSOCKET = @LIBSOCKET@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBUTIL = @LIBUTIL@
LIBZ = @LIBZ@
LIB_KAB = @LIB_KAB@
LIB_KABC = @LIB_KABC@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDED = @LIB_KDED@
LIB_KDEPIM = @LIB_KDEPIM@
LIB_KDEPRINT = @LIB_KDEPRINT@
LIB_KDEUI = @LIB_KDEUI@
LIB_KDNSSD = @LIB_KDNSSD@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMPROXY = @LIB_KIMPROXY@
LIB_KIO = @LIB_KIO@
LIB_KJS = @LIB_KJS@
LIB_KNEWSTUFF = @LIB_KNEWSTUFF@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KUNITTEST = @LIB_KUNITTEST@
LIB_KUTILS = @LIB_KUTILS@
LIB_POLL = @LIB_POLL@
LIB_QPE = @LIB_QPE@
LIB_QT = @LIB_QT@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LIB_XEXT = @LIB_XEXT@
LIB_XRENDER = @LIB_XRENDER@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAKEKDEWIDGETS = @MAKEKDEWIDGETS@
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MSGFMT = @MSGFMT@
NOOPT_CFLAGS = @NOOPT_CFLAGS@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
QTE_NORTTI = @QTE_NORTTI@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TOPSUBDIRS = @TOPSUBDIRS@
UIC = @UIC@
UIC_TR = @UIC_TR@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
USE_THREADS = @USE_THREADS@
VERSION = @VERSION@
WOVERLOADED_VIRTUAL = @WOVERLOADED_VIRTUAL@
XGETTEXT = @XGETTEXT@
XMKMF = @XMKMF@
XMLLINT = @XMLLINT@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
X_RPATH = @X_RPATH@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
all_includes = @all_includes@
all_libraries = @all_libraries@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_kcfgdir = @kde_kcfgdir@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = @kde_qtver@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
kdeinitdir = @kdeinitdir@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
x_includes = @x_includes@
x_libraries = @x_libraries@
xdg_appsdir = @xdg_appsdir@
xdg_directorydir = @xdg_directorydir@
xdg_menudir = @xdg_menudir@
SUBDIRS = graphics
#>- METASOURCES = AUTO
INCLUDES = $(all_includes)
#>- lib_LTLIBRARIES = 
#>+ 1
lib_LTLIBRARIES =   libkdeinit_kweatherreport.la
kdeinit_LTLIBRARIES = kweatherreport.la
kde_module_LTLIBRARIES = weather_panelapplet.la kcm_weather.la kcm_weatherservice.la
sun_test_SOURCES = sun_test.cpp sun.cpp
sun_test_LDFLAGS = $(all_libraries)
sun_test_LDADD = -lqt-mt
stationdatabase_test_SOURCES = stationdatabase_test.cpp stationdatabase.cpp
stationdatabase_test_LDFLAGS = $(all_libraries)
stationdatabase_test_LDADD = -lqt-mt -lkdecore
metar_parser_test_SOURCES = metar_parser_test.cpp metar_parser.cpp\
                            stationdatabase.cpp sun.cpp

metar_parser_test_LDFLAGS = $(all_libraries)
metar_parser_test_LDADD = -lqt-mt -lkdecore
#>- weather_panelapplet_la_SOURCES = reportview.cpp kweather.cpp dockwidget.cpp \
#>-                                  weatherIface.skel weatherservice.stub \
#>-                                  weatherbutton.cpp
#>+ 3
weather_panelapplet_la_SOURCES=reportview.cpp kweather.cpp dockwidget.cpp \
                                   \
                                 weatherbutton.cpp weatherIface_skel.cpp weatherservice_stub.cpp

weather_panelapplet_la_LDFLAGS = $(KDE_PLUGIN) -module $(all_libraries)
weather_panelapplet_la_LIBADD = $(LIB_KHTML)
appletdir = $(kde_datadir)/kicker/applets
applet_DATA = kweather.desktop
stationdir = $(kde_datadir)/kweatherservice
station_DATA = stations.dat
#>- kcm_weather_la_SOURCES = kcmweather.cpp prefdialogdata.ui weatherservice.stub
#>+ 1
kcm_weather_la_SOURCES=kcmweather.cpp   weatherservice_stub.cpp prefdialogdata.cpp
kcm_weather_la_LDFLAGS = -module $(KDE_PLUGIN) $(KDE_RPATH) $(all_libraries) \
                         -avoid-version -no-undefined

kcm_weather_la_LIBADD = $(LIB_KDEUI) $(LIB_KIO)
#>- kcm_weatherservice_la_SOURCES = kcmweatherservice.cpp serviceconfigwidget.cpp \
#>-                                 serviceconfigdata.ui weatherservice.stub
#>+ 2
kcm_weatherservice_la_SOURCES=kcmweatherservice.cpp serviceconfigwidget.cpp \
                                  weatherservice_stub.cpp serviceconfigdata.cpp

kcm_weatherservice_la_LDFLAGS = -module $(KDE_PLUGIN) $(KDE_RPATH) $(all_libraries) \
                                -avoid-version -no-undefined

kcm_weatherservice_la_LIBADD = $(LIB_KDEUI)

#weather_sidebar_la_SOURCES = sidebarwidgetbase.ui sidebarwidget.cpp dockwidget.cpp weatherbar.cpp weatherbar.skel
#weather_sidebar_la_LDFLAGS = $(all_libraries) -module -no-undefined
#weather_sidebar_la_LIBADD = $(LIB_KPARTS) $(LIB_KFILE) -lkonqsidebarplugin

#globalentrydir   = $(kde_datadir)/konqsidebartng/entries
#globalentry_DATA = weatherbar.desktop

#globaladddir   = $(kde_datadir)/konqsidebartng/add
#globaladd_DATA = weatherbar_add.desktop
kweatherservice_LDFLAGS = $(all_libraries) $(KDE_RPATH)
kweatherservice_LDADD = $(LIB_KIO)
#>- kweatherservice_SOURCES = main.cpp metar_parser.cpp weatherlib.cpp \
#>-                           weatherservice.cpp weatherservice.skel \
#>-                           stationdatabase.cpp sun.cpp weatherservice.stub
#>+ 3
kweatherservice_SOURCES=main.cpp metar_parser.cpp weatherlib.cpp \
                          weatherservice.cpp  \
                          stationdatabase.cpp sun.cpp  weatherservice_skel.cpp weatherservice_stub.cpp

service_DATA = kweatherservice.desktop
servicedir = $(kde_servicesdir)
kde_services_DATA = kcmweather.desktop kcmweatherservice.desktop
kweatherreport_la_LDFLAGS = $(all_libraries) $(KDE_RPATH) -module -avoid-version
#>- kweatherreport_la_LIBADD = $(LIB_KHTML) reportview.lo
#>+ 1
kweatherreport_la_LIBADD = libkdeinit_kweatherreport.la
#>- kweatherreport_la_SOURCES = reportmain.cpp weatherservice.stub
#>+ 2
kweatherreport_la_SOURCES = kweatherreport_la_dummy.cpp
libkdeinit_kweatherreport_la_SOURCES = reportmain.cpp  weatherservice_stub.cpp
KDE_ICON = kweather
kweatherdatadir = $(kde_datadir)/kweatherservice
kweatherdata_DATA = weather_stations.desktop
#>- all: all-recursive
#>+ 1
all: docs-am  all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
#>- 	@for dep in $?; do \
#>- 	  case '$(am__configure_deps)' in \
#>- 	    *$$dep*) \
#>- 	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
#>- 		&& exit 0; \
#>- 	      exit 1;; \
#>- 	  esac; \
#>- 	done; \
#>- 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  kweather/Makefile'; \
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --foreign  kweather/Makefile
#>+ 12
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  kweather/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  kweather/Makefile
	cd $(top_srcdir) && perl admin/am_edit kweather/Makefile.in
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-kde_moduleLTLIBRARIES: $(kde_module_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(kde_moduledir)" || $(MKDIR_P) "$(DESTDIR)$(kde_moduledir)"
	@list='$(kde_module_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(kde_moduleLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(kde_moduledir)/$$f'"; \
	    $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(kde_moduleLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(kde_moduledir)/$$f"; \
	  else :; fi; \
	done

uninstall-kde_moduleLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(kde_module_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(kde_moduledir)/$$p'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(kde_moduledir)/$$p"; \
	done

clean-kde_moduleLTLIBRARIES:
	-test -z "$(kde_module_LTLIBRARIES)" || rm -f $(kde_module_LTLIBRARIES)
	@list='$(kde_module_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-kdeinitLTLIBRARIES: $(kdeinit_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(kdeinitdir)" || $(MKDIR_P) "$(DESTDIR)$(kdeinitdir)"
	@list='$(kdeinit_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(kdeinitLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(kdeinitdir)/$$f'"; \
	    $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(kdeinitLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(kdeinitdir)/$$f"; \
	  else :; fi; \
	done

uninstall-kdeinitLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(kdeinit_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(kdeinitdir)/$$p'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(kdeinitdir)/$$p"; \
	done

clean-kdeinitLTLIBRARIES:
	-test -z "$(kdeinit_LTLIBRARIES)" || rm -f $(kdeinit_LTLIBRARIES)
	@list='$(kdeinit_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
kcm_weather.la: $(kcm_weather_la_OBJECTS) $(kcm_weather_la_DEPENDENCIES) 
	$(kcm_weather_la_LINK) -rpath $(kde_moduledir) $(kcm_weather_la_OBJECTS) $(kcm_weather_la_LIBADD) $(LIBS)
kcm_weatherservice.la: $(kcm_weatherservice_la_OBJECTS) $(kcm_weatherservice_la_DEPENDENCIES) 
	$(kcm_weatherservice_la_LINK) -rpath $(kde_moduledir) $(kcm_weatherservice_la_OBJECTS) $(kcm_weatherservice_la_LIBADD) $(LIBS)
kweatherreport.la: $(kweatherreport_la_OBJECTS) $(kweatherreport_la_DEPENDENCIES) 
	$(kweatherreport_la_LINK) -rpath $(kdeinitdir) $(kweatherreport_la_OBJECTS) $(kweatherreport_la_LIBADD) $(LIBS)
weather_panelapplet.la: $(weather_panelapplet_la_OBJECTS) $(weather_panelapplet_la_DEPENDENCIES) 
	$(weather_panelapplet_la_LINK) -rpath $(kde_moduledir) $(weather_panelapplet_la_OBJECTS) $(weather_panelapplet_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
kweatherservice$(EXEEXT): $(kweatherservice_OBJECTS) $(kweatherservice_DEPENDENCIES) 
	@rm -f kweatherservice$(EXEEXT)
	$(kweatherservice_LINK) $(kweatherservice_OBJECTS) $(kweatherservice_LDADD) $(LIBS)
metar_parser_test$(EXEEXT): $(metar_parser_test_OBJECTS) $(metar_parser_test_DEPENDENCIES) 
	@rm -f metar_parser_test$(EXEEXT)
	$(metar_parser_test_LINK) $(metar_parser_test_OBJECTS) $(metar_parser_test_LDADD) $(LIBS)
stationdatabase_test$(EXEEXT): $(stationdatabase_test_OBJECTS) $(stationdatabase_test_DEPENDENCIES) 
	@rm -f stationdatabase_test$(EXEEXT)
	$(stationdatabase_test_LINK) $(stationdatabase_test_OBJECTS) $(stationdatabase_test_LDADD) $(LIBS)
sun_test$(EXEEXT): $(sun_test_OBJECTS) $(sun_test_DEPENDENCIES) 
	@rm -f sun_test$(EXEEXT)
	$(sun_test_LINK) $(sun_test_OBJECTS) $(sun_test_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dockwidget.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kcmweather.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kcmweatherservice.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kweather.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/metar_parser.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/metar_parser_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reportmain.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reportview.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/serviceconfigwidget.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stationdatabase.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stationdatabase_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sun.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sun_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/weatherbutton.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/weatherlib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/weatherservice.Po@am__quote@

.cpp.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-appletDATA: $(applet_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(appletdir)" || $(MKDIR_P) "$(DESTDIR)$(appletdir)"
	@list='$(applet_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(appletDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(appletdir)/$$f'"; \
	  $(appletDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(appletdir)/$$f"; \
	done

uninstall-appletDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(applet_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(appletdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(appletdir)/$$f"; \
	done
install-kde_servicesDATA: $(kde_services_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(kde_servicesdir)" || $(MKDIR_P) "$(DESTDIR)$(kde_servicesdir)"
	@list='$(kde_services_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(kde_servicesDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(kde_servicesdir)/$$f'"; \
	  $(kde_servicesDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(kde_servicesdir)/$$f"; \
	done

uninstall-kde_servicesDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(kde_services_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(kde_servicesdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(kde_servicesdir)/$$f"; \
	done
install-kweatherdataDATA: $(kweatherdata_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(kweatherdatadir)" || $(MKDIR_P) "$(DESTDIR)$(kweatherdatadir)"
	@list='$(kweatherdata_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(kweatherdataDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(kweatherdatadir)/$$f'"; \
	  $(kweatherdataDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(kweatherdatadir)/$$f"; \
	done

uninstall-kweatherdataDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(kweatherdata_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(kweatherdatadir)/$$f'"; \
	  rm -f "$(DESTDIR)$(kweatherdatadir)/$$f"; \
	done
install-serviceDATA: $(service_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(servicedir)" || $(MKDIR_P) "$(DESTDIR)$(servicedir)"
	@list='$(service_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(serviceDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(servicedir)/$$f'"; \
	  $(serviceDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(servicedir)/$$f"; \
	done

uninstall-serviceDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(service_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(servicedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(servicedir)/$$f"; \
	done
install-stationDATA: $(station_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(stationdir)" || $(MKDIR_P) "$(DESTDIR)$(stationdir)"
	@list='$(station_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(stationDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(stationdir)/$$f'"; \
	  $(stationDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(stationdir)/$$f"; \
	done

uninstall-stationDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(station_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(stationdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(stationdir)/$$f"; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-recursive
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(kde_moduledir)" "$(DESTDIR)$(kdeinitdir)" "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(appletdir)" "$(DESTDIR)$(kde_servicesdir)" "$(DESTDIR)$(kweatherdatadir)" "$(DESTDIR)$(servicedir)" "$(DESTDIR)$(stationdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

#>- clean-am: clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
#>- 	clean-kde_moduleLTLIBRARIES clean-kdeinitLTLIBRARIES \
#>- 	clean-libLTLIBRARIES clean-libtool mostlyclean-am
#>+ 3
clean-am: clean-metasources clean-idl clean-ui clean-bcheck clean-final  clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	clean-kde_moduleLTLIBRARIES clean-kdeinitLTLIBRARIES \
	clean-libLTLIBRARIES clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

#>- install-data-am: install-appletDATA install-kde_moduleLTLIBRARIES \
#>- 	install-kde_servicesDATA install-kdeinitLTLIBRARIES \
#>- 	install-kweatherdataDATA install-serviceDATA \
#>- 	install-stationDATA
#>+ 4
install-data-am: install-kde-icons   install-appletDATA \
	install-kde_servicesDATA install-kdeinitLTLIBRARIES \
	install-kweatherdataDATA install-serviceDATA \
	install-stationDATA

install-dvi: install-dvi-recursive

#>- install-exec-am: install-binPROGRAMS install-libLTLIBRARIES
#>+ 1
install-exec-am:  install-binPROGRAMS install-libLTLIBRARIES install-kde_moduleLTLIBRARIES

install-html: install-html-recursive

install-info: install-info-recursive

install-man:

install-pdf: install-pdf-recursive

install-ps: install-ps-recursive

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

#>- uninstall-am: uninstall-appletDATA uninstall-binPROGRAMS \
#>- 	uninstall-kde_moduleLTLIBRARIES uninstall-kde_servicesDATA \
#>- 	uninstall-kdeinitLTLIBRARIES uninstall-kweatherdataDATA \
#>- 	uninstall-libLTLIBRARIES uninstall-serviceDATA \
#>- 	uninstall-stationDATA
#>+ 5
uninstall-am: uninstall-kde-icons  uninstall-appletDATA uninstall-binPROGRAMS \
	uninstall-kde_moduleLTLIBRARIES uninstall-kde_servicesDATA \
	uninstall-kdeinitLTLIBRARIES uninstall-kweatherdataDATA \
	uninstall-libLTLIBRARIES uninstall-serviceDATA \
	uninstall-stationDATA

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) install-am \
	install-strip

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am clean clean-binPROGRAMS \
	clean-checkPROGRAMS clean-generic clean-kde_moduleLTLIBRARIES \
	clean-kdeinitLTLIBRARIES clean-libLTLIBRARIES clean-libtool \
	ctags ctags-recursive distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-appletDATA install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-kde_moduleLTLIBRARIES \
	install-kde_servicesDATA install-kdeinitLTLIBRARIES \
	install-kweatherdataDATA install-libLTLIBRARIES install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-serviceDATA install-stationDATA install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags tags-recursive uninstall uninstall-am \
	uninstall-appletDATA uninstall-binPROGRAMS \
	uninstall-kde_moduleLTLIBRARIES uninstall-kde_servicesDATA \
	uninstall-kdeinitLTLIBRARIES uninstall-kweatherdataDATA \
	uninstall-libLTLIBRARIES uninstall-serviceDATA \
	uninstall-stationDATA


messages: rc.cpp
	$(EXTRACTRC) *.ui > rc.cpp
	$(XGETTEXT) rc.cpp *.cpp *.h -o $(podir)/kweather.pot
	rm -f rc.cpp
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 2
libkdeinit_kweatherreport_la_LIBADD = $(LIB_KHTML) reportview.lo

#>+ 2
libkdeinit_kweatherreport_la_LDFLAGS = -no-undefined -avoid-version $(all_libraries)

#>+ 2
libkdeinit_kweatherreport_la_DEPENDENCIES = $(am__DEPENDENCIES_1) reportview.lo

#>+ 2
am_libkdeinit_kweatherreport_la_OBJECTS = reportmain.lo

#>+ 13

kweatherreport.la.cpp:
	echo 'extern "C" int kdemain(int argc, char* argv[]);' > kweatherreport.la.cpp; \
	echo 'int main(int argc, char* argv[]) { return kdemain(argc,argv); }' >> kweatherreport.la.cpp

kweatherreport_dummy.cpp:
	echo '#include <kdemacros.h>' > kweatherreport_dummy.cpp; \
	echo 'extern "C" int kdemain(int argc, char* argv[]);' >> kweatherreport_dummy.cpp; \
	echo 'extern "C" KDE_EXPORT int kdeinitmain(int argc, char* argv[]) { return kdemain(argc,argv); }' >> kweatherreport_dummy.cpp
kweatherreport_LDFLAGS = $(KDE_RPATH) -no-undefined $(all_libraries)
kweatherreport_LDADD = libkdeinit_kweatherreport.la
kweatherreport_DEPENDENCIES = libkdeinit_kweatherreport.la

#>+ 5
weatherservice.kidl: $(srcdir)/weatherservice.h $(DCOP_DEPENDENCIES)
	$(DCOPIDL) $(srcdir)/weatherservice.h > weatherservice.kidl || ( rm -f weatherservice.kidl ; false )
weatherservice_stub.h: weatherservice.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-skel weatherservice.kidl

#>+ 3
weatherbar.moc: $(srcdir)/weatherbar.h
	$(MOC) $(srcdir)/weatherbar.h -o weatherbar.moc

#>+ 2
mocs: weatherbar.moc

#>+ 3
serviceconfigwidget.moc: $(srcdir)/serviceconfigwidget.h
	$(MOC) $(srcdir)/serviceconfigwidget.h -o serviceconfigwidget.moc

#>+ 2
mocs: serviceconfigwidget.moc

#>+ 3
kcmweather.moc: $(srcdir)/kcmweather.h
	$(MOC) $(srcdir)/kcmweather.h -o kcmweather.moc

#>+ 2
mocs: kcmweather.moc

#>+ 3
weatherservice.moc: $(srcdir)/weatherservice.h
	$(MOC) $(srcdir)/weatherservice.h -o weatherservice.moc

#>+ 2
mocs: weatherservice.moc

#>+ 3
weatherlib.moc: $(srcdir)/weatherlib.h
	$(MOC) $(srcdir)/weatherlib.h -o weatherlib.moc

#>+ 2
mocs: weatherlib.moc

#>+ 3
kcmweatherservice.moc: $(srcdir)/kcmweatherservice.h
	$(MOC) $(srcdir)/kcmweatherservice.h -o kcmweatherservice.moc

#>+ 2
mocs: kcmweatherservice.moc

#>+ 3
kweather.moc: $(srcdir)/kweather.h
	$(MOC) $(srcdir)/kweather.h -o kweather.moc

#>+ 2
mocs: kweather.moc

#>+ 3
dockwidget.moc: $(srcdir)/dockwidget.h
	$(MOC) $(srcdir)/dockwidget.h -o dockwidget.moc

#>+ 2
mocs: dockwidget.moc

#>+ 3
weatherbutton.moc: $(srcdir)/weatherbutton.h
	$(MOC) $(srcdir)/weatherbutton.h -o weatherbutton.moc

#>+ 2
mocs: weatherbutton.moc

#>+ 3
reportview.moc: $(srcdir)/reportview.h
	$(MOC) $(srcdir)/reportview.h -o reportview.moc

#>+ 2
mocs: reportview.moc

#>+ 3
sidebarwidget.moc: $(srcdir)/sidebarwidget.h
	$(MOC) $(srcdir)/sidebarwidget.h -o sidebarwidget.moc

#>+ 2
mocs: sidebarwidget.moc

#>+ 5
weatherIface.kidl: $(srcdir)/weatherIface.h $(DCOP_DEPENDENCIES)
	$(DCOPIDL) $(srcdir)/weatherIface.h > weatherIface.kidl || ( rm -f weatherIface.kidl ; false )
weatherIface_skel.cpp: weatherIface.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-stub weatherIface.kidl

#>+ 3
weatherservice_skel.cpp: weatherservice.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-stub weatherservice.kidl

#>+ 3
clean-metasources:
	-rm -f  weatherbar.moc serviceconfigwidget.moc kcmweather.moc weatherservice.moc weatherlib.moc kcmweatherservice.moc kweather.moc dockwidget.moc weatherbutton.moc reportview.moc sidebarwidget.moc

#>+ 2
KDE_DIST=kcmweatherservice.h weatherlog.sh hi48-app-kweather.png reportview.h weatherbar_add.desktop kweatherservice.desktop hi16-app-kweather.png kcmweatherservice.desktop weatherIface.h kcmweather.desktop serviceconfigwidget.h weather_stations.desktop serviceconfigdata.ui weatherbar.h sidebarwidget.h dockwidget.h kweather.h sun.h test.sh kweatherreport.desktop prefdialogdata.ui kweather.desktop hi32-app-kweather.png weatherbar.desktop configure.in.in weatherbutton.h stationdatabase.h Makefile.in kweather.kdevprj metar_parser.h kcmweather.h weatherservice.h stations.dat Makefile.am weathersig.sh weatherlib.h 

#>+ 10
clean-idl:
	-rm -f \
	weatherservice_stub.cpp weatherservice_stub.h weatherservice.kidl \
	weatherservice_stub.cpp weatherservice_stub.h weatherservice.kidl \
	weatherservice_stub.cpp weatherservice_stub.h weatherservice.kidl \
	weatherIface_skel.cpp weatherIface_skel.h weatherIface.kidl \
	weatherservice_stub.cpp weatherservice_stub.h weatherservice.kidl \
	weatherservice_skel.cpp weatherservice_skel.h weatherservice.kidl \
	weatherservice_stub.cpp weatherservice_stub.h weatherservice.kidl 

#>+ 5
clean-ui:
	-rm -f \
	prefdialogdata.cpp prefdialogdata.h prefdialogdata.moc \
	serviceconfigdata.cpp serviceconfigdata.h serviceconfigdata.moc 

#>+ 2
docs-am:

#>+ 13
install-kde-icons:
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps
	$(INSTALL_DATA) $(srcdir)/hi16-app-kweather.png $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/kweather.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps
	$(INSTALL_DATA) $(srcdir)/hi48-app-kweather.png $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps/kweather.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps
	$(INSTALL_DATA) $(srcdir)/hi32-app-kweather.png $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/kweather.png

uninstall-kde-icons:
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/kweather.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/48x48/apps/kweather.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/kweather.png

#>+ 15
force-reedit:
		@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  kweather/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  kweather/Makefile
	cd $(top_srcdir) && perl admin/am_edit kweather/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-recursive

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
libkdeinit_kweatherreport_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/reportmain.cpp weatherservice_stub.cpp 
	@echo 'creating libkdeinit_kweatherreport_la.all_cpp.cpp ...'; \
	rm -f libkdeinit_kweatherreport_la.all_cpp.files libkdeinit_kweatherreport_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> libkdeinit_kweatherreport_la.all_cpp.final; \
	for file in reportmain.cpp weatherservice_stub.cpp ; do \
	  echo "#include \"$$file\"" >> libkdeinit_kweatherreport_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> libkdeinit_kweatherreport_la.all_cpp.final; \
	done; \
	cat libkdeinit_kweatherreport_la.all_cpp.final libkdeinit_kweatherreport_la.all_cpp.files > libkdeinit_kweatherreport_la.all_cpp.cpp; \
	rm -f libkdeinit_kweatherreport_la.all_cpp.final libkdeinit_kweatherreport_la.all_cpp.files

#>+ 11
kcm_weather_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/kcmweather.cpp weatherservice_stub.cpp prefdialogdata.cpp  prefdialogdata.moc kcmweather.moc
	@echo 'creating kcm_weather_la.all_cpp.cpp ...'; \
	rm -f kcm_weather_la.all_cpp.files kcm_weather_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> kcm_weather_la.all_cpp.final; \
	for file in kcmweather.cpp weatherservice_stub.cpp prefdialogdata.cpp ; do \
	  echo "#include \"$$file\"" >> kcm_weather_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> kcm_weather_la.all_cpp.final; \
	done; \
	cat kcm_weather_la.all_cpp.final kcm_weather_la.all_cpp.files > kcm_weather_la.all_cpp.cpp; \
	rm -f kcm_weather_la.all_cpp.final kcm_weather_la.all_cpp.files

#>+ 11
kcm_weatherservice_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/kcmweatherservice.cpp $(srcdir)/serviceconfigwidget.cpp weatherservice_stub.cpp serviceconfigdata.cpp  serviceconfigwidget.moc serviceconfigdata.moc kcmweatherservice.moc
	@echo 'creating kcm_weatherservice_la.all_cpp.cpp ...'; \
	rm -f kcm_weatherservice_la.all_cpp.files kcm_weatherservice_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> kcm_weatherservice_la.all_cpp.final; \
	for file in kcmweatherservice.cpp serviceconfigwidget.cpp weatherservice_stub.cpp serviceconfigdata.cpp ; do \
	  echo "#include \"$$file\"" >> kcm_weatherservice_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> kcm_weatherservice_la.all_cpp.final; \
	done; \
	cat kcm_weatherservice_la.all_cpp.final kcm_weatherservice_la.all_cpp.files > kcm_weatherservice_la.all_cpp.cpp; \
	rm -f kcm_weatherservice_la.all_cpp.final kcm_weatherservice_la.all_cpp.files

#>+ 11
weather_panelapplet_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/reportview.cpp $(srcdir)/kweather.cpp $(srcdir)/dockwidget.cpp $(srcdir)/weatherbutton.cpp weatherIface_skel.cpp weatherservice_stub.cpp  kweather.moc dockwidget.moc weatherbutton.moc reportview.moc
	@echo 'creating weather_panelapplet_la.all_cpp.cpp ...'; \
	rm -f weather_panelapplet_la.all_cpp.files weather_panelapplet_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> weather_panelapplet_la.all_cpp.final; \
	for file in reportview.cpp kweather.cpp dockwidget.cpp weatherbutton.cpp weatherIface_skel.cpp weatherservice_stub.cpp ; do \
	  echo "#include \"$$file\"" >> weather_panelapplet_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> weather_panelapplet_la.all_cpp.final; \
	done; \
	cat weather_panelapplet_la.all_cpp.final weather_panelapplet_la.all_cpp.files > weather_panelapplet_la.all_cpp.cpp; \
	rm -f weather_panelapplet_la.all_cpp.final weather_panelapplet_la.all_cpp.files

#>+ 11
kweatherservice.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/main.cpp $(srcdir)/metar_parser.cpp $(srcdir)/weatherlib.cpp $(srcdir)/weatherservice.cpp $(srcdir)/stationdatabase.cpp $(srcdir)/sun.cpp weatherservice_skel.cpp weatherservice_stub.cpp  weatherlib.moc weatherservice.moc
	@echo 'creating kweatherservice.all_cpp.cpp ...'; \
	rm -f kweatherservice.all_cpp.files kweatherservice.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> kweatherservice.all_cpp.final; \
	for file in main.cpp metar_parser.cpp weatherlib.cpp weatherservice.cpp stationdatabase.cpp sun.cpp weatherservice_skel.cpp weatherservice_stub.cpp ; do \
	  echo "#include \"$$file\"" >> kweatherservice.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> kweatherservice.all_cpp.final; \
	done; \
	cat kweatherservice.all_cpp.final kweatherservice.all_cpp.files > kweatherservice.all_cpp.cpp; \
	rm -f kweatherservice.all_cpp.final kweatherservice.all_cpp.files

#>+ 11
metar_parser_test.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/metar_parser_test.cpp $(srcdir)/metar_parser.cpp $(srcdir)/stationdatabase.cpp $(srcdir)/sun.cpp 
	@echo 'creating metar_parser_test.all_cpp.cpp ...'; \
	rm -f metar_parser_test.all_cpp.files metar_parser_test.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> metar_parser_test.all_cpp.final; \
	for file in metar_parser_test.cpp metar_parser.cpp stationdatabase.cpp sun.cpp ; do \
	  echo "#include \"$$file\"" >> metar_parser_test.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> metar_parser_test.all_cpp.final; \
	done; \
	cat metar_parser_test.all_cpp.final metar_parser_test.all_cpp.files > metar_parser_test.all_cpp.cpp; \
	rm -f metar_parser_test.all_cpp.final metar_parser_test.all_cpp.files

#>+ 11
stationdatabase_test.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/stationdatabase_test.cpp $(srcdir)/stationdatabase.cpp 
	@echo 'creating stationdatabase_test.all_cpp.cpp ...'; \
	rm -f stationdatabase_test.all_cpp.files stationdatabase_test.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> stationdatabase_test.all_cpp.final; \
	for file in stationdatabase_test.cpp stationdatabase.cpp ; do \
	  echo "#include \"$$file\"" >> stationdatabase_test.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> stationdatabase_test.all_cpp.final; \
	done; \
	cat stationdatabase_test.all_cpp.final stationdatabase_test.all_cpp.files > stationdatabase_test.all_cpp.cpp; \
	rm -f stationdatabase_test.all_cpp.final stationdatabase_test.all_cpp.files

#>+ 11
sun_test.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/sun_test.cpp $(srcdir)/sun.cpp 
	@echo 'creating sun_test.all_cpp.cpp ...'; \
	rm -f sun_test.all_cpp.files sun_test.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> sun_test.all_cpp.final; \
	for file in sun_test.cpp sun.cpp ; do \
	  echo "#include \"$$file\"" >> sun_test.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> sun_test.all_cpp.final; \
	done; \
	cat sun_test.all_cpp.final sun_test.all_cpp.files > sun_test.all_cpp.cpp; \
	rm -f sun_test.all_cpp.final sun_test.all_cpp.files

#>+ 3
clean-final:
	-rm -f libkdeinit_kweatherreport_la.all_cpp.cpp kcm_weather_la.all_cpp.cpp kcm_weatherservice_la.all_cpp.cpp weather_panelapplet_la.all_cpp.cpp kweatherservice.all_cpp.cpp metar_parser_test.all_cpp.cpp stationdatabase_test.all_cpp.cpp sun_test.all_cpp.cpp

#>+ 5
libkdeinit_kweatherreport_la_final_OBJECTS = libkdeinit_kweatherreport_la.all_cpp.lo 
libkdeinit_kweatherreport_la_nofinal_OBJECTS = reportmain.lo weatherservice_stub.lo
@KDE_USE_FINAL_FALSE@libkdeinit_kweatherreport_la_OBJECTS = $(libkdeinit_kweatherreport_la_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@libkdeinit_kweatherreport_la_OBJECTS = $(libkdeinit_kweatherreport_la_final_OBJECTS)

#>+ 2
kweatherreport_OBJECTS = kweatherreport.la.$(OBJEXT)

#>+ 3
final:
	$(MAKE) libkdeinit_kweatherreport_la_OBJECTS="$(libkdeinit_kweatherreport_la_final_OBJECTS)" kcm_weather_la_OBJECTS="$(kcm_weather_la_final_OBJECTS)" kcm_weatherservice_la_OBJECTS="$(kcm_weatherservice_la_final_OBJECTS)" weather_panelapplet_la_OBJECTS="$(weather_panelapplet_la_final_OBJECTS)" kweatherservice_OBJECTS="$(kweatherservice_final_OBJECTS)" metar_parser_test_OBJECTS="$(metar_parser_test_final_OBJECTS)" stationdatabase_test_OBJECTS="$(stationdatabase_test_final_OBJECTS)" sun_test_OBJECTS="$(sun_test_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) libkdeinit_kweatherreport_la_OBJECTS="$(libkdeinit_kweatherreport_la_final_OBJECTS)" kcm_weather_la_OBJECTS="$(kcm_weather_la_final_OBJECTS)" kcm_weatherservice_la_OBJECTS="$(kcm_weatherservice_la_final_OBJECTS)" weather_panelapplet_la_OBJECTS="$(weather_panelapplet_la_final_OBJECTS)" kweatherservice_OBJECTS="$(kweatherservice_final_OBJECTS)" metar_parser_test_OBJECTS="$(metar_parser_test_final_OBJECTS)" stationdatabase_test_OBJECTS="$(stationdatabase_test_final_OBJECTS)" sun_test_OBJECTS="$(sun_test_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) libkdeinit_kweatherreport_la_OBJECTS="$(libkdeinit_kweatherreport_la_nofinal_OBJECTS)" kcm_weather_la_OBJECTS="$(kcm_weather_la_nofinal_OBJECTS)" kcm_weatherservice_la_OBJECTS="$(kcm_weatherservice_la_nofinal_OBJECTS)" weather_panelapplet_la_OBJECTS="$(weather_panelapplet_la_nofinal_OBJECTS)" kweatherservice_OBJECTS="$(kweatherservice_nofinal_OBJECTS)" metar_parser_test_OBJECTS="$(metar_parser_test_nofinal_OBJECTS)" stationdatabase_test_OBJECTS="$(stationdatabase_test_nofinal_OBJECTS)" sun_test_OBJECTS="$(sun_test_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) libkdeinit_kweatherreport_la_OBJECTS="$(libkdeinit_kweatherreport_la_nofinal_OBJECTS)" kcm_weather_la_OBJECTS="$(kcm_weather_la_nofinal_OBJECTS)" kcm_weatherservice_la_OBJECTS="$(kcm_weatherservice_la_nofinal_OBJECTS)" weather_panelapplet_la_OBJECTS="$(weather_panelapplet_la_nofinal_OBJECTS)" kweatherservice_OBJECTS="$(kweatherservice_nofinal_OBJECTS)" metar_parser_test_OBJECTS="$(metar_parser_test_nofinal_OBJECTS)" stationdatabase_test_OBJECTS="$(stationdatabase_test_nofinal_OBJECTS)" sun_test_OBJECTS="$(sun_test_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 47
kcmweather.lo: kcmweather.moc 
weatherbar.o: weatherbar.moc 
kweatherreport$(EXEEXT): $(kweatherreport_OBJECTS) $(kweatherreport_DEPENDENCIES)
	@rm -f kweatherreport$(EXEEXT)
	$(CXXLINK) $(kweatherreport_LDFLAGS) $(kweatherreport_OBJECTS) $(kweatherreport_LDADD) $(LIBS)

$(srcdir)/kweather.cpp: weatherservice_stub.h 
kweather.o: kweather.moc 
$(srcdir)/main.cpp: weatherservice_stub.h 
kcmweather.o: kcmweather.moc 
$(srcdir)/sun.cpp: weatherservice_stub.h 
reportview.lo: reportview.moc 
serviceconfigwidget.lo: serviceconfigwidget.moc 
dockwidget.o: dockwidget.moc 
kcmweatherservice.o: kcmweatherservice.moc 
kcmweatherservice.lo: kcmweatherservice.moc 
$(srcdir)/weatherservice.cpp: weatherservice_stub.h 
weatherbutton.lo: weatherbutton.moc 
weatherservice.o: weatherservice.moc 
$(srcdir)/serviceconfigwidget.cpp: weatherservice_stub.h serviceconfigdata.h 
nmcheck-am: nmcheck
$(srcdir)/weatherlib.cpp: weatherservice_stub.h 
weatherbutton.o: weatherbutton.moc 
kweather.lo: kweather.moc 
weatherservice_stub.cpp: weatherservice_stub.h 
libkdeinit_kweatherreport.la: $(libkdeinit_kweatherreport_la_OBJECTS) $(libkdeinit_kweatherreport_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libkdeinit_kweatherreport_la_LDFLAGS) $(libkdeinit_kweatherreport_la_OBJECTS) $(libkdeinit_kweatherreport_la_LIBADD) $(LIBS)

sidebarwidget.lo: sidebarwidget.moc 
$(srcdir)/weatherbutton.cpp: weatherservice_stub.h 
reportview.o: reportview.moc 
$(srcdir)/kcmweatherservice.cpp: weatherservice_stub.h serviceconfigdata.h 
weatherlib.lo: weatherlib.moc 
$(srcdir)/reportmain.cpp: weatherservice_stub.h 
dockwidget.lo: dockwidget.moc 
nmcheck: 
$(srcdir)/dockwidget.cpp: weatherservice_stub.h 
$(srcdir)/metar_parser.cpp: weatherservice_stub.h 
$(srcdir)/reportview.cpp: weatherservice_stub.h 
$(srcdir)/stationdatabase.cpp: weatherservice_stub.h 
serviceconfigwidget.o: serviceconfigwidget.moc 
$(srcdir)/kcmweather.cpp: weatherservice_stub.h prefdialogdata.h 
weatherservice.lo: weatherservice.moc 
sidebarwidget.o: sidebarwidget.moc 
weatherlib.o: weatherlib.moc 
weatherbar.lo: weatherbar.moc 

#>+ 30
prefdialogdata.cpp: $(srcdir)/prefdialogdata.ui prefdialogdata.h prefdialogdata.moc
	rm -f prefdialogdata.cpp
	echo '#include <kdialog.h>' > prefdialogdata.cpp
	echo '#include <klocale.h>' >> prefdialogdata.cpp
	$(UIC) -tr ${UIC_TR} -i prefdialogdata.h $(srcdir)/prefdialogdata.ui > prefdialogdata.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" prefdialogdata.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_prefdialogdata,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> prefdialogdata.cpp ;\
	rm -f prefdialogdata.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "prefdialogdata.moc"' >> prefdialogdata.cpp; else rm -f prefdialogdata.cpp ; exit $$ret ; fi

prefdialogdata.h: $(srcdir)/prefdialogdata.ui
	rm -rf prefdialogdata.h;
	$(UIC) $(srcdir)/prefdialogdata.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> prefdialogdata.h ;
prefdialogdata.moc: prefdialogdata.h
	$(MOC) prefdialogdata.h -o prefdialogdata.moc

serviceconfigdata.cpp: $(srcdir)/serviceconfigdata.ui serviceconfigdata.h serviceconfigdata.moc
	rm -f serviceconfigdata.cpp
	echo '#include <kdialog.h>' > serviceconfigdata.cpp
	echo '#include <klocale.h>' >> serviceconfigdata.cpp
	$(UIC) -tr ${UIC_TR} -i serviceconfigdata.h $(srcdir)/serviceconfigdata.ui > serviceconfigdata.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" serviceconfigdata.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_serviceconfigdata,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> serviceconfigdata.cpp ;\
	rm -f serviceconfigdata.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "serviceconfigdata.moc"' >> serviceconfigdata.cpp; else rm -f serviceconfigdata.cpp ; exit $$ret ; fi

serviceconfigdata.h: $(srcdir)/serviceconfigdata.ui
	rm -rf serviceconfigdata.h;
	$(UIC) $(srcdir)/serviceconfigdata.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> serviceconfigdata.h ;
serviceconfigdata.moc: serviceconfigdata.h
	$(MOC) serviceconfigdata.h -o serviceconfigdata.moc
