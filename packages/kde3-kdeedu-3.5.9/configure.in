dnl =======================================================
dnl FILE: ./admin/configure.in.min
dnl =======================================================

dnl    This file is part of the KDE libraries/packages
dnl    Copyright (C) 2001 Stephan Kulow (coolo@kde.org)
 
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU Library General Public
dnl    License as published by the Free Software Foundation; either
dnl    version 2 of the License, or (at your option) any later version.
 
dnl    This library is distributed in the hope that it will be useful,
dnl    but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    Library General Public License for more details.
 
dnl    You should have received a copy of the GNU Library General Public License
dnl    along with this library; see the file COPYING.LIB.  If not, write to
dnl    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
dnl    Boston, MA 02110-1301, USA.

# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT(acinclude.m4) dnl a source file from your sub dir

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_SYSTEM 
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(kde3-kdeedu, "3.5.9") dnl searches for some needed programs

KDE_SET_PREFIX

dnl generate the config header
AM_CONFIG_HEADER(config.h) dnl at the distribution this done

dnl Checks for programs.
AC_CHECK_COMPILERS
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
KDE_PROG_LIBTOOL

dnl for NLS support. Call them in this order!
dnl WITH_NLS is for the po files
AM_KDE_WITH_NLS

dnl KDE_USE_QT
AC_PATH_KDE
dnl =======================================================
dnl FILE: configure.in.in
dnl =======================================================

#MIN_CONFIG
CXXFLAGS="$CXXFLAGS $KDE_DEFAULT_CXXFLAGS"
AC_CHECK_SETENV
AC_CHECK_UNSETENV

KDE_INIT_DOXYGEN([KDE Education API Reference], [Version $VERSION])
dnl =======================================================
dnl FILE: ./doc/kig/scripting-api/configure.in.in
dnl =======================================================

dnl AC_OUTPUT( doc/kig/scripting-api/Doxyfile.scripting-api )
dnl =======================================================
dnl FILE: ./kalzium/configure.in.in
dnl =======================================================

#MIN_CONFIG(3.3)

ocaml_installed=no
facile_installed=no
eqchem_enabled=no

AC_DEFUN([OCAML_PROG],[
    KDE_FIND_PATH(ocamlopt, OCAML, [$bindir],
      [
        OCAML=''
      ])
])

AC_DEFUN([FACILE_PROG],[
    AC_REQUIRE([OCAML_PROG])

    AC_MSG_CHECKING([if the facile constraint solver is installed])
    FACILE="`ocamlopt -where`/facile"
    if test -d "$FACILE" ; then
        eqchem_enabled=yes
        AC_MSG_RESULT([yes])
        facile_installed=yes
    else
        eqchem_enabled=no
        AC_MSG_RESULT([no])
        facile_installed=no
    fi

    AC_SUBST([FACILE])
])

AC_ARG_ENABLE( ocamlsolver,
  [  --disable-ocamlsolver	  Disable support for the OCaml solver @<:@default=check@:>@]],
  [  with_ocamlsolver=$enableval ],
  [  with_ocamlsolver=check] )

if test "x$with_ocamlsolver" != xno; then
  OCAML_PROG
  if test -n "$OCAML"; then
    ocaml_installed=yes
    FACILE_PROG
  fi

  AH_TEMPLATE(HAVE_FACILE, facile solver available?)

  EQCHEM_SUB=
  OCAMLLIB=
  EQCHEM_LDADD=
  if test "$eqchem_enabled" = "yes"; then
    EQCHEM_SUB=solver
    OCAMLLIB=`ocamlc -where`
    FACILELIB=`ocamlc -where`/facile
    EQCHEM_LDADD="-lasmrun -lstr -lnums -lm -ldl solver.o modwrap.o"

    AC_DEFINE(HAVE_FACILE, 1)
  fi

  AC_SUBST(EQCHEM_SUB)
  AC_SUBST(OCAMLLIB)
  AC_SUBST(FACILELIB)
  AC_SUBST(EQCHEM_LDADD)

  if test "$eqchem_enabled" = "yes"; then
    with_ocamlsolver=yes
  fi
fi
dnl =======================================================
dnl FILE: ./kig/configure.in.in
dnl =======================================================

kig_version=0.10.7

kde_save_LIBS=$LIBS
LIBS="$LIBS -lm"
KDE_CHECK_FUNC_EXT(trunc)
LIBS="$kde_save_LIBS"

KDE_LANG_CPLUSPLUS

# this variable is set to true if we need to warn the user that Python
# scripting support has been disabled due to missing headers or libs
# or whatever..  It's not set if the user explicitly disabled python
# scripting ( "./configure --disable-kig-python-scripting" ).  We
# complain about this at the end of the ./configure script.  Check out
# configure.in.bot for the code..
kig_warn_about_disabling_python="no"

# this var is set to yes if we want to compile python scripting, and to 
# no otherwise
kig_enable_python_scripting="yes"

# this var is set to no if we want to disable support for compressed files
# (for compatibility reasons with kde 3.1)
kig_enable_compressed_files="yes"

AC_DEFUN([KIG_PYTHON_NOT_FOUND], [
  AC_MSG_WARN( 
    [[Kig needs the Python and Boost.Python libraries and their headers \
installed for its Python scripting support.  One of both was not \
found, or the versions were incompatible, and Python scripting will be disabled.]] );
  kig_warn_about_disabling_python="yes"
  kig_enable_python_scripting="no" ] )

AC_ARG_ENABLE( kig-python-scripting, 
  [  --disable-kig-python-scripting	Disable Kig Python Scripting support],
  [  kig_enable_python_scripting=$enableval ],
  [  kig_enable_python_scripting=yes] )

AC_ARG_ENABLE( kig-compressed-files, 
  [  --disable-kig-compressed-files	Disable Kig Compressed Files support],
  [  kig_enable_compressed_files=$enableval ],
  [  kig_enable_compressed_files=yes] )

dnl domi: we use some macro's by Ben Burton from the Regina program,
dnl to check for the availability of a good python+boost.python
dnl combination.  They are included here, the end is marked at the 
dnl bottom.  I have changed it only by removing some macro's, and by 
dnl making the other call KIG_PYTHON_NOT_FOUND instead of 
dnl REGINA_DO_NOT_COMPILE, and REGINA_WARN_*.
dnl
dnl    Regina - A Normal Surface Theory Calculator
dnl    Configure Script Macros
dnl
dnl    Copyright (c) 2002-2003, Ben Burton
dnl    For further details contact Ben Burton (bab@debian.org).
dnl
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU General Public License as
dnl    published by the Free Software Foundation; either version 2 of the
dnl    License, or (at your option) any later version.
dnl
dnl    This file is distributed in the hope that it will be useful, but
dnl    WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    General Public License for more details.
dnl
dnl    You should have received a copy of the GNU General Public
dnl    License along with this program; if not, write to the Free
dnl    Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
dnl    MA 02110-1301, USA.
dnl
dnl    Note that this copyright notice applies only to macros beginning
dnl    with REGINA_.  Other macros found in acinclude.m4 have been taken
dnl    from external sources; these macros are stored in separate files
dnl    in the admin/ subdirectory and copyright notices can be found in
dnl    these separate files (and in the comments provided with the macros
dnl    themselves).
dnl

dnl    -----------------------------------------------------------------
dnl
dnl                        Macros written for Regina
dnl
dnl    -----------------------------------------------------------------

dnl
dnl    REGINA_LIB_BOOST_PYTHON(TARGET-LIST, REQUIRED-BY)
dnl
dnl    Checks for a usable boost.python installation.
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if boost.python is missing.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        BOOST_PYTHON_INCLUDES: The compiler flags required for
dnl                               building against boost.python,
dnl                               including flags for building against
dnl                               python itself.
dnl        BOOST_PYTHON_LIBS: The linker flags required for building
dnl                           against boost.python.
dnl        PYTHON_LIBS: The linker flags required for building against
dnl                     python itself.
dnl
dnl    AC_DEFINE()s the following variables:
dnl
dnl        HAVE_BOOST_PYTHON: Defined as 1 if we have a usable boost.python
dnl                           installation, or remains undefined otherwise.
dnl
dnl    Example: REGINA_LIB_BOOST_PYTHON(PYTHON, [the Python interface])
dnl
AC_DEFUN([REGINA_LIB_BOOST_PYTHON], [
  AC_LANG_PUSH(C++)
  KDE_CHECK_HEADERS([boost/shared_ptr.hpp], [
    __regina_py_save_cxxflags="$CXXFLAGS"
    __regina_py_save_ldflags="$LDFLAGS"
    __regina_py_save_libs="$LIBS"
    __regina_py_ok=0
    for pyver in python python2.5 python2.4 python2.3 python2.2; do
      for incdir in "/usr/include/$pyver" "/usr/local/include/$pyver" \
          "/usr/$pyver/include" "/usr/local/$pyver/include" \
          "$prefix/include/$pyver" "$prefix/$pyver/include"; do
        CXXFLAGS="$__regina_py_save_cxxflags -I$incdir"
        LDFLAGS="$__regina_py_save_ldflags -shared"

        # Check for python includes.
        AC_TRY_COMPILE([
          #include <Python.h>
        ], [
          PyObject obj;
        ], [
          # Check for compatibility with boost.python.
          AC_MSG_CHECKING([for boost.python with $incdir/Python.h])
          AC_TRY_COMPILE([
            #include <boost/python.hpp>
            const char* greet() { return "Hello world!"; }
            BOOST_PYTHON_MODULE(hello) { boost::python::def("greet", greet); }
          ], [
            /* No main body. */
          ], [
            AC_MSG_RESULT([yes])
	
            # Check for -lpython.
            for pylib in "$pyver" python python2.3 python2.2; do
              for pylibdir in "/usr/lib" "/usr/local/lib" "/usr/lib/$pyver/config" \
		"/usr/local/lib/$pyver/config"; do
		for extralibs in "" "-lpthread -lm -lutil -ldl"; do
                  AC_MSG_CHECKING([for $pylibdir/lib$pylib and $extralibs with $incdir/Python.h])
		  LDFLAGS="$__regina_py_save_ldflags -L$pylibdir"
		  LIBS="-l$pylib $extralibs"
		  AC_TRY_LINK([
		    #include <Python.h>
		  ], [
		    Py_Initialize(); Py_Finalize();
		  ], [
		    AC_MSG_RESULT([yes])
		    for bplib in "-lboost_python-mt" "-lboost_python-gcc-mt-1_32" "-lboost_python-gcc-mt-1_31" "-lboost_python-gcc-mt" "-lboost_python"; do
		      AC_MSG_CHECKING([compilation of a boost.python program with $bplib])
		      LDFLAGS="$__regina_py_save_ldflags -L$pylibdir"
		      LIBS="-l$pylib $bplib $extralibs"
		      AC_TRY_LINK([
			#include <boost/python.hpp>
			const char* greet() { return "Hello world!"; }
			BOOST_PYTHON_MODULE(hello) { boost::python::def("greet", greet); }
		      ], [
		        /* No main body. */
		      ], [
			AC_MSG_RESULT([yes])
			# And we're done!
			BOOST_PYTHON_INCLUDES="-I$incdir"
			BOOST_PYTHON_LIBS="$bplib"
			PYTHON_LIBS="-l$pylib $extralibs"
			PYTHON_LDFLAGS="-L$pylibdir"
			__regina_py_ok=1
		      ], [
			AC_MSG_RESULT([no])
		      ])
		      if test "$__regina_py_ok" = "1"; then break; fi
		    done
		  ], [
		    AC_MSG_RESULT([no])
		  ])
		  if test "$__regina_py_ok" = "1"; then break; fi
		done
	        if test "$__regina_py_ok" = "1"; then break; fi
              done
              if test "$__regina_py_ok" = "1"; then break; fi
            done
          ], [
            AC_MSG_RESULT([no])
          ])
        ])
        if test "$__regina_py_ok" = "1"; then break; fi
      done
      if test "$__regina_py_ok" = "1"; then break; fi
    done

    CXXFLAGS="$__regina_py_save_cxxflags"
    LDFLAGS="$__regina_py_save_ldflags"
    LIBS="$__regina_py_save_libs"

    if test "$__regina_py_ok" = "1"; then
      AC_DEFINE(HAVE_BOOST_PYTHON, 1,
        [Define to 1 if you have a usable boost.python installation.])
    else
      BOOST_PYTHON_INCLUDES=
      BOOST_PYTHON_LIBS=
      KIG_PYTHON_NOT_FOUND
    fi
  ], [
    KIG_PYTHON_NOT_FOUND
  ])
  AC_LANG_POP(C++)
  AC_SUBST(BOOST_PYTHON_INCLUDES)
  AC_SUBST(BOOST_PYTHON_LIBS)
  AC_SUBST(PYTHON_LDFLAGS)
  AC_SUBST(PYTHON_LIBS)
])

dnl This is the end of the macro's copied from Ben Burton's Regina
dnl program.

if test "x$kig_enable_python_scripting" != xno; then
  kig_enable_python_scripting="yes" # either yes or no..

  kig_save_CXXFLAGS="$CXXFLAGS"
  CXXFLAGS=`echo $CXXFLAGS | sed -e 's/-fno-exceptions//g'`
  REGINA_LIB_BOOST_PYTHON( PYTHON, Kig Python Scripting )
  CXXFLAGS="$kig_save_CXXFLAGS"
fi

if test "x$kig_enable_python_scripting" != xno; then
  AC_DEFINE( KIG_ENABLE_PYTHON_SCRIPTING, 1, [Defined if Kig Python scripting is enabled] )
fi

AM_CONDITIONAL(KIG_COMPILE_PYTHON_SCRIPTING, test x$kig_enable_python_scripting != xno)

if test "x$kig_enable_compressed_files" = xno; then
  CXXFLAGS="$CXXFLAGS -DKIG_NO_COMPRESSED_FILES"
fi

AC_SUBST( KIGVERSION, $kig_version )
AC_DEFINE_UNQUOTED( KIGVERSION, "$kig_version", [The current Kig version as a string] )

KDE_CHECK_HEADERS([ieeefp.h])

# apparently the KDE build system wants to see "dnl AC_OUTPUT( ... )",
# not a normal AC_OUTPUT
dnl AC_OUTPUT( kig/kig.lsm )
dnl AC_OUTPUT( kig/README )
dnl AC_OUTPUT( kig/package-kig.sh )
dnl AC_OUTPUT( kig/VERSION )
dnl =======================================================
dnl FILE: ./kstars/configure.in.in
dnl =======================================================

dnl KStars configuration

timezone_int=no
AC_TRY_COMPILE(
	#include <time.h>
	,
	daylight = 0;
	timezone = 0;
	,
	AC_DEFINE(TIMEZONE_IS_INT,1,[The symbol timezone is an int, not a function])
	,
	AC_DEFINE(TIMEZONE_IS_INT,0,[The symbol timezone is an int, not a function])
	)

# KStars INDI driver for the FLI CCD
case "${host_os}" in
       *linux* ) OSDIR=linux ;;
       *bsd*   ) OSDIR=bsd   ;;
       *       ) OSDIR=null  ;;
esac

# This variable to is check for the availability of libusb
have_libusb="no"

dnl --enable-libusb=PATH
AC_ARG_ENABLE(libusb,
	AC_HELP_STRING([--enable-libusb=PATH],[libusb path (default /usr)]),
	[
		case ${enableval} in
			"" | "yes" | "YES")
				;;
			"no" | "NO")
				use_libusb=false
				;;
			*)
				CPPFLAGS="$CPPFLAGS -I${enableval}/include"
				LDFLAGS="$LDFLAGS -L${enableval}/lib"
				;;
		esac
	]
)

dnl check if libusb is available
if test "${use_libusb}" != false ; then
	AC_SUBST(LIBUSB)
	AC_CHECK_HEADERS(usb.h, [have_libusb="yes"],
		[ AC_MSG_WARN([usb.h not found, use --enable-libusb=PATH. Otherwise, INDI will compile without Apogee USB support.]) ])

	ac_save_LIBS="$LIBS"
	LIBS="$LIBS $COREFOUNDATION $IOKIT"
	AC_CHECK_LIB(usb, usb_init, [LIBUSB="$LIBUSB -lusb" have_libusb="yes"],
		[ AC_MSG_WARN([libusb not found. INDI will compile without Apogee USB support.]) ])
	LIBS="$ac_save_LIBS"

fi

dnl check if v4l2 is available
have_v4l2=false
case "$target" in
   *-*-linux*)
	AC_ARG_ENABLE(v4l2,
	              [AC_HELP_STRING([--disable-v4l2],
		                      [disable V4L2 interface for KStars])],
		      [ case "${enableval}" in
		        no)  disable_v4l2=yes ;;
			yes) disable_v4l2=no ;;
			 *) AC_MSG_ERROR(bad value ${enableval} for --disable-v4l2) ;;
			 esac],
		      [disable_v4l2=no])
        if test x$disable_v4l2 = xno; then
	  AC_CHECK_TYPE([struct v4l2_buffer], 
                        [have_v4l2=true],
	                [have_v4l2=false],
		        [#include <sys/time.h>
#include <linux/videodev.h>])
	 if test x$have_v4l2 = xfalse; then
	    KERNEL_VERSION=`uname -r`
	    AC_CHECK_FILE(/lib/modules/$KERNEL_VERSION/build/include/linux/videodev2.h,
	                  [AC_MSG_WARN([])
			   AC_MSG_WARN([])
			  AC_MSG_WARN([We cannot locate videodev2.h in /usr/include/linux])
			  AC_MSG_WARN([])
			  AC_MSG_WARN([This file is responsible for V4L2 in KStars])
			   AC_MSG_WARN([This file is correct in /lib/modules/$KERNEL_VERSION/build/include])
			   AC_MSG_WARN([It is recommended that you copy this file and videodev.h to /usr/include/linux])
			   AC_MSG_WARN([])
			   ])
	  fi
        else
            have_v4l2=false
        fi
	;;
    *)
	;;
   esac

if test x$have_v4l2 = xtrue; then
  AC_DEFINE(HAVE_LINUX_VIDEODEV2_H, 1, [Define to 1 if you have the <linux/videodev2.h> header file.])
fi

AM_CONDITIONAL(BSD, test x$OSDIR = xbsd)
AM_CONDITIONAL(LINUX, test x$OSDIR = xlinux)
AM_CONDITIONAL(NULL, test x$OSDIR = xnull)
AM_CONDITIONAL(HAVE_LIBUSB, test x$have_libusb = xyes)
AM_CONDITIONAL(HAVE_V4L2, [test x$have_v4l2 = xtrue])

dnl =======================================================
dnl FILE: ./ktouch/configure.in.in
dnl =======================================================

AC_CHECK_HEADERS(sstream)
KDE_CREATE_SUBDIRSLIST
AM_CONDITIONAL(libkdeedu_SUBDIR_included, test "x$libkdeedu_SUBDIR_included" = xyes)
AM_CONDITIONAL(applnk_SUBDIR_included, test "x$applnk_SUBDIR_included" = xyes)
AM_CONDITIONAL(blinken_SUBDIR_included, test "x$blinken_SUBDIR_included" = xyes)
AM_CONDITIONAL(doc_SUBDIR_included, test "x$doc_SUBDIR_included" = xyes)
AM_CONDITIONAL(kalzium_SUBDIR_included, test "x$kalzium_SUBDIR_included" = xyes)
AM_CONDITIONAL(kanagram_SUBDIR_included, test "x$kanagram_SUBDIR_included" = xyes)
AM_CONDITIONAL(kbruch_SUBDIR_included, test "x$kbruch_SUBDIR_included" = xyes)
AM_CONDITIONAL(keduca_SUBDIR_included, test "x$keduca_SUBDIR_included" = xyes)
AM_CONDITIONAL(kgeography_SUBDIR_included, test "x$kgeography_SUBDIR_included" = xyes)
AM_CONDITIONAL(khangman_SUBDIR_included, test "x$khangman_SUBDIR_included" = xyes)
AM_CONDITIONAL(kig_SUBDIR_included, test "x$kig_SUBDIR_included" = xyes)
AM_CONDITIONAL(kiten_SUBDIR_included, test "x$kiten_SUBDIR_included" = xyes)
AM_CONDITIONAL(klatin_SUBDIR_included, test "x$klatin_SUBDIR_included" = xyes)
AM_CONDITIONAL(klettres_SUBDIR_included, test "x$klettres_SUBDIR_included" = xyes)
AM_CONDITIONAL(kmplot_SUBDIR_included, test "x$kmplot_SUBDIR_included" = xyes)
AM_CONDITIONAL(kpercentage_SUBDIR_included, test "x$kpercentage_SUBDIR_included" = xyes)
AM_CONDITIONAL(kstars_SUBDIR_included, test "x$kstars_SUBDIR_included" = xyes)
AM_CONDITIONAL(ktouch_SUBDIR_included, test "x$ktouch_SUBDIR_included" = xyes)
AM_CONDITIONAL(kturtle_SUBDIR_included, test "x$kturtle_SUBDIR_included" = xyes)
AM_CONDITIONAL(kverbos_SUBDIR_included, test "x$kverbos_SUBDIR_included" = xyes)
AM_CONDITIONAL(kvoctrain_SUBDIR_included, test "x$kvoctrain_SUBDIR_included" = xyes)
AM_CONDITIONAL(kwordquiz_SUBDIR_included, test "x$kwordquiz_SUBDIR_included" = xyes)
AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ applnk/Makefile ])
AC_CONFIG_FILES([ blinken/Makefile ])
AC_CONFIG_FILES([ blinken/fonts/Makefile ])
AC_CONFIG_FILES([ blinken/icons/Makefile ])
AC_CONFIG_FILES([ blinken/images/Makefile ])
AC_CONFIG_FILES([ blinken/sounds/Makefile ])
AC_CONFIG_FILES([ blinken/src/Makefile ])
AC_CONFIG_FILES([ doc/Makefile ])
AC_CONFIG_FILES([ doc/blinken/Makefile ])
AC_CONFIG_FILES([ doc/kalzium/Makefile ])
AC_CONFIG_FILES([ doc/kanagram/Makefile ])
AC_CONFIG_FILES([ doc/kbruch/Makefile ])
AC_CONFIG_FILES([ doc/keduca/Makefile ])
AC_CONFIG_FILES([ doc/kgeography/Makefile ])
AC_CONFIG_FILES([ doc/khangman/Makefile ])
AC_CONFIG_FILES([ doc/kig/Makefile ])
AC_CONFIG_FILES([ doc/kig/scripting-api/Makefile ])
AC_CONFIG_FILES([ doc/kiten/Makefile ])
AC_CONFIG_FILES([ doc/klatin/Makefile ])
AC_CONFIG_FILES([ doc/klettres/Makefile ])
AC_CONFIG_FILES([ doc/kmplot/Makefile ])
AC_CONFIG_FILES([ doc/kpercentage/Makefile ])
AC_CONFIG_FILES([ doc/kstars/Makefile ])
AC_CONFIG_FILES([ doc/ktouch/Makefile ])
AC_CONFIG_FILES([ doc/kturtle/Makefile ])
AC_CONFIG_FILES([ doc/kverbos/Makefile ])
AC_CONFIG_FILES([ doc/kvoctrain/Makefile ])
AC_CONFIG_FILES([ doc/kwordquiz/Makefile ])
AC_CONFIG_FILES([ kalzium/Makefile ])
AC_CONFIG_FILES([ kalzium/src/Makefile ])
AC_CONFIG_FILES([ kalzium/src/data/Makefile ])
AC_CONFIG_FILES([ kalzium/src/data/toolpics/Makefile ])
AC_CONFIG_FILES([ kalzium/src/elementpics/Makefile ])
AC_CONFIG_FILES([ kalzium/src/icons/Makefile ])
AC_CONFIG_FILES([ kalzium/src/icons/htmlview/Makefile ])
AC_CONFIG_FILES([ kanagram/Makefile ])
AC_CONFIG_FILES([ kanagram/data/Makefile ])
AC_CONFIG_FILES([ kanagram/icons/Makefile ])
AC_CONFIG_FILES([ kanagram/images/Makefile ])
AC_CONFIG_FILES([ kanagram/sounds/Makefile ])
AC_CONFIG_FILES([ kanagram/src/Makefile ])
AC_CONFIG_FILES([ kbruch/Makefile ])
AC_CONFIG_FILES([ kbruch/src/Makefile ])
AC_CONFIG_FILES([ kbruch/testcases/Makefile ])
AC_CONFIG_FILES([ keduca/Makefile ])
AC_CONFIG_FILES([ keduca/keduca/Makefile ])
AC_CONFIG_FILES([ keduca/keducabuilder/Makefile ])
AC_CONFIG_FILES([ keduca/libkeduca/Makefile ])
AC_CONFIG_FILES([ keduca/resources/Makefile ])
AC_CONFIG_FILES([ keduca/resources/icons/Makefile ])
AC_CONFIG_FILES([ keduca/resources/pics/Makefile ])
AC_CONFIG_FILES([ kgeography/Makefile ])
AC_CONFIG_FILES([ kgeography/data/Makefile ])
AC_CONFIG_FILES([ kgeography/data/flags/Makefile ])
AC_CONFIG_FILES([ kgeography/data/flags/italy/Makefile ])
AC_CONFIG_FILES([ kgeography/icons/Makefile ])
AC_CONFIG_FILES([ kgeography/src/Makefile ])
AC_CONFIG_FILES([ khangman/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/data/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/data/en/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/fonts/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/icons/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/pics/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/pics/desert/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/pics/sea/Makefile ])
AC_CONFIG_FILES([ khangman/khangman/sounds/Makefile ])
AC_CONFIG_FILES([ kig/Makefile ])
AC_CONFIG_FILES([ kig/data/Makefile ])
AC_CONFIG_FILES([ kig/examples/Makefile ])
AC_CONFIG_FILES([ kig/filters/Makefile ])
AC_CONFIG_FILES([ kig/icons/Makefile ])
AC_CONFIG_FILES([ kig/kfile/Makefile ])
AC_CONFIG_FILES([ kig/kig/Makefile ])
AC_CONFIG_FILES([ kig/macros/Makefile ])
AC_CONFIG_FILES([ kig/mimetypes/Makefile ])
AC_CONFIG_FILES([ kig/misc/Makefile ])
AC_CONFIG_FILES([ kig/modes/Makefile ])
AC_CONFIG_FILES([ kig/objects/Makefile ])
AC_CONFIG_FILES([ kig/pykig/Makefile ])
AC_CONFIG_FILES([ kig/scripting/Makefile ])
AC_CONFIG_FILES([ kiten/Makefile ])
AC_CONFIG_FILES([ kiten/pics/Makefile ])
AC_CONFIG_FILES([ klatin/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/grammar/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/verbs/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/vocab/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/vocab/de/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/vocab/en/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/data/vocab/pl/Makefile ])
AC_CONFIG_FILES([ klatin/klatin/icons/Makefile ])
AC_CONFIG_FILES([ klettres/Makefile ])
AC_CONFIG_FILES([ klettres/klettres/Makefile ])
AC_CONFIG_FILES([ klettres/klettres/data/Makefile ])
AC_CONFIG_FILES([ klettres/klettres/data/langs/Makefile ])
AC_CONFIG_FILES([ klettres/klettres/icons/Makefile ])
AC_CONFIG_FILES([ klettres/klettres/pics/Makefile ])
AC_CONFIG_FILES([ kmplot/Makefile ])
AC_CONFIG_FILES([ kmplot/icons/Makefile ])
AC_CONFIG_FILES([ kmplot/icons/actions/Makefile ])
AC_CONFIG_FILES([ kmplot/kmplot/Makefile ])
AC_CONFIG_FILES([ kpercentage/Makefile ])
AC_CONFIG_FILES([ kpercentage/kpercentage/Makefile ])
AC_CONFIG_FILES([ kpercentage/kpercentage/icons/Makefile ])
AC_CONFIG_FILES([ kpercentage/kpercentage/icons/actions/Makefile ])
AC_CONFIG_FILES([ kpercentage/kpercentage/pics/Makefile ])
AC_CONFIG_FILES([ kstars/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/data/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/icons/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/indi/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/indi/apogee/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/indi/fli/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/indi/webcam/Makefile ])
AC_CONFIG_FILES([ kstars/kstars/tools/Makefile ])
AC_CONFIG_FILES([ ktouch/Makefile ])
AC_CONFIG_FILES([ ktouch/graphics/Makefile ])
AC_CONFIG_FILES([ ktouch/icons/Makefile ])
AC_CONFIG_FILES([ ktouch/keyboards/Makefile ])
AC_CONFIG_FILES([ ktouch/sounds/Makefile ])
AC_CONFIG_FILES([ ktouch/src/Makefile ])
AC_CONFIG_FILES([ ktouch/training/Makefile ])
AC_CONFIG_FILES([ kturtle/Makefile ])
AC_CONFIG_FILES([ kturtle/data/Makefile ])
AC_CONFIG_FILES([ kturtle/src/Makefile ])
AC_CONFIG_FILES([ kturtle/src/pics/Makefile ])
AC_CONFIG_FILES([ kverbos/Makefile ])
AC_CONFIG_FILES([ kverbos/kverbos/Makefile ])
AC_CONFIG_FILES([ kverbos/kverbos/data/Makefile ])
AC_CONFIG_FILES([ kverbos/kverbos/data/de/Makefile ])
AC_CONFIG_FILES([ kverbos/kverbos/data/en/Makefile ])
AC_CONFIG_FILES([ kverbos/kverbos/icons/Makefile ])
AC_CONFIG_FILES([ kvoctrain/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/common-dialogs/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/docprop-dialogs/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/entry-dialogs/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/examples/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/kvt-core/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/kvt-core/kvt-xml/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/pics/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/query-dialogs/Makefile ])
AC_CONFIG_FILES([ kvoctrain/kvoctrain/statistik-dialogs/Makefile ])
AC_CONFIG_FILES([ kwordquiz/Makefile ])
AC_CONFIG_FILES([ kwordquiz/src/Makefile ])
AC_CONFIG_FILES([ kwordquiz/src/examples/Makefile ])
AC_CONFIG_FILES([ kwordquiz/src/pics/Makefile ])
AC_CONFIG_FILES([ libkdeedu/Makefile ])
AC_CONFIG_FILES([ libkdeedu/extdate/Makefile ])
AC_CONFIG_FILES([ libkdeedu/kdeeducore/Makefile ])
AC_CONFIG_FILES([ libkdeedu/kdeeducore/tests/Makefile ])
AC_CONFIG_FILES([ libkdeedu/kdeeduplot/Makefile ])
AC_CONFIG_FILES([ libkdeedu/kdeeduui/Makefile ])
AC_CONFIG_FILES([ libkdeedu/kdeeduui/tests/Makefile ])
AC_CONFIG_FILES([ doc/kig/scripting-api/Doxyfile.scripting-api ])
AC_CONFIG_FILES([ kig/kig.lsm ])
AC_CONFIG_FILES([ kig/README ])
AC_CONFIG_FILES([ kig/package-kig.sh ])
AC_CONFIG_FILES([ kig/VERSION ])
AC_OUTPUT
if test x$eqchem_enabled = xno && test x$with_ocamlsolver != xno ; then
    cat << EOF

The Kalzium Chemical Equation Solver has been disabled. Possible
reasons of that:

EOF

  if test "x$ocaml_installed" = "xno"; then
    cat << EOF
* OCaml was not found. In order to have the Solver, you have to
  install OCaml. You can get OCaml from http://pauillac.inria.fr/ocaml/.

EOF
  fi

  if test "x$facile_installed" = "xno"; then
    cat << EOF
* The FaCiLe module for OCaml was not found. In order to have the Solver,
  you have to install the FaCiLe module. You can get it from
  http://www.recherche.enac.fr/opti/facile/.

EOF
  fi

fi
if test x$kig_warn_about_disabling_python = xyes; then
  cat << EOF

Kig Python scripting support has been disabled, because you 
are missing the necessary headers and/or libraries.
In order to use Kig Python scripting, you need to have 
Python installed, along with its development package ( e.g. 
libpython-dev ), and also the Boost.Python library, along with 
its development package ( e.g. libboost-python-dev ).

Kig will continue to function without Python scripting support, 
but you will not be able to created Python scripted objects, or 
load Kig files that use them.

Installing the libraries:
The python development libraries themselves are almost certainly 
packaged by your favourite distribution.  Look for a package name 
like libpython-dev, with possibly a version number inserted 
somewhere in the name..  For the Boost.Python libs, check this 
documentation: "http://boost.org/more/download.html" and 
"http://boost.org/more/download.html#Installation"  or look for 
a package like libboost-python-dev or libboost-dev.. 
EOF
fi

if test "x$kig_enable_python_scripting" = "xyes"; then
    # tell users about the Boost.Python 1.30 + GCC 3.2+ problem and patch. 
    cat << EOF

Kig WARNING
===========
There is a problem using unpatched Boost.Python 1.30 in combination
with GCC 3.2 and above.  In some distributions, like Debian sarge, 
this problem has been fixed, but in other distributions, the problem 
may still be there.  If you encounter problems while compiling Kig, 
then you should try to re-run configure with the option 
"--disable-kig-python-scripting".  This may fix the compilation, but 
you will not be able to use the Kig Python Scripting.
EOF
fi
# Check if KDE_SET_PREFIX was called, and --prefix was passed to configure
if test -n "$kde_libs_prefix" -a -n "$given_prefix"; then
  # And if so, warn when they don't match
  if test "$kde_libs_prefix" != "$given_prefix"; then
    # And if kde doesn't know about the prefix yet
    echo ":"`kde-config --path exe`":" | grep ":$given_prefix/bin/:" 2>&1 >/dev/null
    if test $? -ne 0; then
      echo ""
      echo "Warning: you chose to install this package in $given_prefix,"
      echo "but KDE was found in $kde_libs_prefix."
      echo "For this to work, you will need to tell KDE about the new prefix, by ensuring"
      echo "that KDEDIRS contains it, e.g. export KDEDIRS=$given_prefix:$kde_libs_prefix"
      echo "Then restart KDE."
      echo ""
    fi
  fi
fi

if test x$GXX = "xyes" -a x$kde_have_gcc_visibility = "xyes" -a x$kde_cv_val_qt_gcc_visibility_patched = "xno"; then
  echo ""
  echo "Your GCC supports symbol visibility, but the patch for Qt supporting visibility"
  echo "was not included. Therefore, GCC symbol visibility support remains disabled."
  echo ""
  echo "For better performance, consider including the Qt visibility supporting patch"
  echo "located at:"
  echo ""
  echo "http://bugs.kde.org/show_bug.cgi?id=109386"
  echo ""
  echo "and recompile all of Qt and KDE. Note, this is entirely optional and"
  echo "everything will continue to work just fine without it."
  echo ""
fi

if test "$all_tests" = "bad"; then
  if test ! "$cache_file" = "/dev/null"; then
    echo ""
    echo "Please remove the file $cache_file after changing your setup"
    echo "so that configure will find the changes next time."
    echo ""
  fi
else
  echo ""
  echo "Good - your configure finished. Start make now"
  echo ""
fi
