#include <artsflow.idl>

module Noatun
{

interface Equalizer : Arts::StereoEffect
{
	attribute sequence<float> levelCenters;
	attribute sequence<float> levelWidths;
	attribute sequence<float> levels;
	
	attribute long bands;
	attribute long enabled;
	attribute float preamp;
	void set(sequence<float> levels, sequence<float> centers, sequence<float> widths);
};

interface EqualizerSSE : Arts::StereoEffect
{
	attribute sequence<float> levelCenters;
	attribute sequence<float> levelWidths;
	attribute sequence<float> levels;
	
	attribute long bands;
	attribute long enabled;
	attribute float preamp;
	void set(sequence<float> levels, sequence<float> centers, sequence<float> widths);
};

interface FFTScope : Arts::StereoEffect
{
	attribute float bandResolution;
	sequence<float> scope();
};

interface FFTScopeStereo : Arts::StereoEffect
{
	attribute float bandResolution;
	sequence<float> scopeRight();
	sequence<float> scopeLeft();
};

interface RawScope : Arts::StereoEffect
{
	attribute long buffer;
	sequence<float> scope();
};

interface RawScopeStereo : Arts::StereoEffect
{
	attribute long buffer;
	sequence<float> scopeLeft();
	sequence<float> scopeRight();
};

interface StereoEffectStack : Arts::StereoEffect
{
	long insertAfter(long after, Arts::StereoEffect effect, string name);
	void move(long after, long item);
	sequence<long> effectList();
	long insertTop(Arts::StereoEffect effect, string name);
	long insertBottom(Arts::StereoEffect effect, string name);
	void remove(long ID);
};

interface StereoVolumeControl : Arts::StereoEffect
{
	attribute float percent;
};

interface StereoVolumeControlSSE : Arts::StereoEffect
{
	attribute float percent;
};

interface Listener
{
	void message();
};

interface Session
{
	attribute long pid;
	void addListener(Noatun::Listener listener);
	void removeListener(Noatun::Listener listener);
};


};


